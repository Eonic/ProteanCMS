<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Net.FtpClient</name>
    </assembly>
    <members>
        <member name="T:System.Net.FtpClient.Extensions.ChecksumExtension">
            <summary>
            Retrieve checksum of file on the server
            </summary></member>
        <member name="M:System.Net.FtpClient.Extensions.ChecksumExtension.GetChecksum(System.Net.FtpClient.FtpClient,System.String)">
            <summary>
            Retrieves a checksum of the given file using a checksumming method
            that the server supports, if any. The algorithm used goes in this order:
            1. HASH command; server preferred algorithm. See FtpClient.SetHashAlgorithm()
            2. MD5 / XMD5 commands
            3. XSHA1 command
            4. XSHA256 command
            5. XSHA512 command
            6. XCRC command
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path of the file to checksum</param>
            <returns>FtpHash object containing the value and algorithm. Use the IsValid property to
            determine if this command was successfull. FtpCommandException's can be thrown from
            the underlying calls.</returns>
            <example><code source="..\Examples\GetChecksum.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.Extensions.ChecksumExtension.BeginGetChecksum(System.Net.FtpClient.FtpClient,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronusly retrieve a checksum of the specified file. This feature
            is non-standard.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns></member>
        <member name="M:System.Net.FtpClient.Extensions.ChecksumExtension.EndGetChecksum(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginGetChecksum()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetChecksum()</param>
            <returns>FtpHash object containing the value and algorithm. Use the IsValid property to
            determine if this command was successfull. FtpCommandException's can be thrown from
            the underlying calls.</returns></member>
        <member name="T:System.Net.FtpClient.Extensions.MD5">
            <summary>
            Implementation of the non-standard MD5 command
            </summary></member>
        <member name="M:System.Net.FtpClient.Extensions.MD5.GetMD5(System.Net.FtpClient.FtpClient,System.String)">
            <summary>
            Gets the MD5 hash of the specified file using MD5. This is a non-standard extension
            to the protocol and may or may not work. A FtpCommandException will be
            thrown if the command fails.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <returns>Server response, presumably the MD5 hash.</returns></member>
        <member name="M:System.Net.FtpClient.Extensions.MD5.BeginGetMD5(System.Net.FtpClient.FtpClient,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronusly retrieve a MD5 hash. The MD5 command is non-standard
            and not guaranteed to work.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns></member>
        <member name="M:System.Net.FtpClient.Extensions.MD5.EndGetMD5(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginGetMD5()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetMD5()</param>
            <returns>The MD5 hash of the specified file.</returns></member>
        <member name="T:System.Net.FtpClient.FtpSslValidation">
            <summary>
            Event is fired when a ssl certificate needs to be validated
            </summary>
            <param name="control">The contol connection that triggered the event</param>
            <param name="e">Event args</param></member>
        <member name="T:System.Net.FtpClient.FtpClient">
            <summary>
            FTP Control Connection. Speaks the FTP protocol with the server and
            provides facilities for performing basic transactions.
            Debugging problems with FTP transactions is much easier to do when
            you can see exactly what is sent to the server and the reply
            System.Net.FtpClient gets in return. Please review the Debug example
            below for information on how to add TraceListeners for capturing
            the convorsation between System.Net.FtpClient and the server.
            </summary>
            <example>The following example illustrates how to assist in debugging
            System.Net.FtpClient by getting a transaction log from the server.
            <code source="..\Examples\Debug.cs" lang="cs" />
            </example>
            <example>The following example demonstrates adding a custom file
            listing parser in the event that you encounter a list format
            not already supported.
            <code source="..\Examples\CustomParser.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to validate
            a SSL certificate when using SSL/TLS.
            <code source="..\Examples\ValidateCertificate.cs" lang="cs" />
            </example>
            <example>The following example demonsrates how to download a file.
            <code source="..\Examples\OpenRead.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to download a file
            using a URI object.
            <code source="..\Examples\OpenReadURI.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to upload a file.
            <code source="..\Examples\OpenWrite.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to upload a file
            using a URI object.
            <code source="..\Examples\OpenWriteURI.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to append to a file.
            <code source="..\Examples\OpenAppend.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to append to a file
            using a URI object.
            <code source="..\Examples\OpenAppendURI.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to get a file
            listing from the server.
            <code source="..\Examples\GetListing.cs" lang="cs" />
            </example></member>
        <member name="F:System.Net.FtpClient.FtpClient.m_lock">
            <summary>
            Used for internally syncrhonizing access to this
            object from multiple threads
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpClient.m_asyncmethods">
            <summary>
            A list of asynchronoous methods that are in progress
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpClient.m_stream">
            <summary>
            Control connection socket stream
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.IsDisposed">
            <summary>
            Gets a value indicating if this object has already been disposed.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.BaseStream">
            <summary>
            Gets the base stream for talking to the server via
            the control connection.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.InternetProtocolVersions">
            <summary>
            Flags specifying which versions of the internet protocol to
            support when making a connection. All addresses returned during
            name resolution are tried until a successful connection is made.
            You can fine tune which versions of the internet protocol to use
            by adding or removing flags here. I.e., setting this property
            to FtpIpVersion.IPv4 will cause the connection process to
            ignore IPv6 addresses. The default value is ANY version.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.SocketPollInterval">
            <summary>
            Gets or sets the length of time in miliseconds
            that must pass since the last socket activity
            before calling Poll() on the socket to test for
            connectivity. Setting this interval too low will
            have a negative impact on perfomance. Setting this
            interval to 0 disables Poll()'ing all together.
            The default value is 15 seconds.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.StaleDataCheck">
            <summary>
            Gets or sets a value indicating whether a test should be performed to
            see if there is stale (unrequested data) sitting on the socket. In some
            cases the control connection may time out but before the server closes
            the connection it might send a 4xx response that was unexpected and
            can cause synchronization errors with transactions. To avoid this
            problem the Execute() method checks to see if there is any data
            available on the socket before executing a command. On Azure hosting
            platforms this check can cause an exception to be thrown. In order
            to work around the exception you can set this property to false
            which will skip the test entirely however doing so eliminates the
            best effort attempt of detecting such scenarios. See this thread
            for more details about the Azure problem:
            https://netftp.codeplex.com/discussions/535879
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.IsConnected">
            <summary>
            Gets a value indicating if the connection is alive
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.EnableThreadSafeDataConnections">
            <summary>
            When this value is set to true (default) the control connection
            is cloned and a new connection the server is established for the
            data channel operation. This is a thread safe approach to make
            asynchronous operations on a single control connection transparent
            to the developer.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.IsClone">
            <summary>
            Gets a value indicating if this control connection is a clone. This property
            is used with data streams to determine if the connection should be closed
            when the stream is closed. Servers typically only allow 1 data connection
            per control connection. If you try to open multiple data connections this
            object will be cloned for 2 or more resulting in N new connections to the
            server.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.Encoding">
            <summary>
            Gets or sets the text encoding being used when talking with the server. The default
            value is Encoding.ASCII however upon connection, the client checks
            for UTF8 support and if it's there this property is switched over to
            Encoding.UTF8. Manually setting this value overrides automatic detection
            based on the FEAT list; if you change this value it's always used
            regardless of what the server advertises, if anything.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.Host">
            <summary>
            The server to connect to
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.Port">
            <summary>
            The port to connect to. If this value is set to 0 (Default) the port used
            will be determined by the type of SSL used or if no SSL is to be used it
            will automatically connect to port 21.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.Credentials">
            <summary>
            Credentials used for authentication
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.MaximumDereferenceCount">
            <summary>
            Gets or sets a value that controls the maximum depth
            of recursion that DereferenceLink() will follow symbolic
            links before giving up. You can also specify the value
            to be used as one of the overloaded parameters to the
            DereferenceLink() method. The default value is 20. Specifying
            -1 here means inifinitly try to resolve a link. This is
            not recommended for obvious reasons (stack overflow).
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.ClientCertificates">
            <summary>
            Client certificates to be used in SSL authentication process
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.DataConnectionType">
            <summary>
            Data connection type, default is AutoPassive which tries
            a connection with EPSV first and if it fails then tries
            PASV before giving up. If you know exactly which kind of
            connection you need you can slightly increase performance
            by defining a speicific type of passive or active data
            connection here.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.UngracefullDisconnection">
            <summary>
            Disconnect from the server without sending QUIT. This helps
            work around IOExceptions caused by buggy connection resets
            when closing the control connection.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.ConnectTimeout">
            <summary>
            Gets or sets the length of time in miliseconds to wait for a connection
            attempt to succeed before giving up. Default is 15000 (15 seconds).
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.ReadTimeout">
            <summary>
            Gets or sets the length of time wait in miliseconds for data to be
            read from the underlying stream. The default value is 15000 (15 seconds).
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.DataConnectionConnectTimeout">
            <summary>
            Gets or sets the length of time in miliseconds for a data connection
            to be established before giving up. Default is 15000 (15 seconds).
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.DataConnectionReadTimeout">
            <summary>
            Gets or sets the length of time in miliseconds the data channel
            should wait for the server to send data. Default value is
            15000 (15 seconds).
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.SocketKeepAlive">
            <summary>
            Gets or sets a value indicating if SocketOption.KeepAlive should be set on
            the underlying stream's socket. If the connection is alive, the option is
            adjusted in real-time. The value is stored and the KeepAlive option is set
            accordingly upon any new connections. The value set here is also applied to
            all future data streams. It has no affect on cloned control connections or
            data connections already in progress. The default value is false.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.Capabilities">
            <summary>
            Gets the server capabilties represented by flags
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.HashAlgorithms">
            <summary>
            Get the hash types supported by the server, if any. This
            is a recent extension to the protocol that is not fully
            standardized and is not guarateed to work. See here for
            more details:
            http://tools.ietf.org/html/draft-bryan-ftpext-hash-02
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.EncryptionMode">
            <summary>
            Type of SSL to use, or none. Default is none. Explicit is TLS, Implicit is SSL.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.DataConnectionEncryption">
            <summary>
            Indicates if data channel transfers should be encrypted. Only valid if EncryptionMode
            property is not equal to FtpSslMode.None.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpClient.SslProtocols">
            <summary>
            Encryption protocols to use. Only valid if EncryptionMode property is not equal to FtpSslMode.None.
            Default value is .NET Framework defaults from SslStream class.
            </summary></member>
        <member name="E:System.Net.FtpClient.FtpClient.ValidateCertificate">
            <summary>
            Event is fired to validate SSL certificates. If this event is
            not handled and there are errors validating the certificate
            the connection will be aborted.
            </summary>
            <example><code source="..\Examples\ValidateCertificate.cs" lang="cs" /></example></member>
        <member name="P:System.Net.FtpClient.FtpClient.SystemType">
            <summary>
            Gets the type of system/server that we're
            connected to.
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpClient.HasFeature(System.Net.FtpClient.FtpCapability)">
            <summary>
            Performs a bitwise and to check if the specified
            flag is set on the Capabilities enum property.
            </summary>
            <param name="cap">The capability to check for</param>
            <returns>True if the feature was found</returns></member>
        <member name="M:System.Net.FtpClient.FtpClient.OnValidateCertficate(System.Net.FtpClient.FtpSslValidationEventArgs)">
            <summary>
            Fires the SSL validation event
            </summary>
            <param name="e">Event Args</param></member>
        <member name="M:System.Net.FtpClient.FtpClient.GetAsyncDelegate``1(System.IAsyncResult)">
            <summary>
            Retretieves the delegate for the specified IAsyncResult and removes
            it from the m_asyncmethods collection if the operation is successfull
            </summary>
            <typeparam name="T">Type of delegate to retrieve</typeparam>
            <param name="ar">The IAsyncResult to retrieve the delegate for</param>
            <returns>The delegate that generated the specified IAsyncResult</returns></member>
        <member name="M:System.Net.FtpClient.FtpClient.CloneConnection">
            <summary>
            Clones the control connection for opening multipe data streams
            </summary>
            <returns>A new control connection with the same property settings as this one</returns>
            <example><code source="..\Examples\CloneConnection.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.GetReply">
            <summary>
            Retreives a reply from the server. Do not execute this method
            unless you are sure that a reply has been sent, i.e., you
            executed a command. Doing so will cause the code to hang
            indefinitely waiting for a server reply that is never comming.
            </summary>
            <returns>FtpReply representing the response from the server</returns>
            <example><code source="..\Examples\BeginGetReply.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.Execute(System.String,System.Object[])">
            <summary>
            Executes a command
            </summary>
            <param name="command">The command to execute with optional format place holders</param>
            <param name="args">Format parameters to the command</param>
            <returns>The servers reply to the command</returns>
            <example><code source="..\Examples\Execute.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.Execute(System.String)">
            <summary>
            Executes a command
            </summary>
            <param name="command">The command to execute</param>
            <returns>The servers reply to the command</returns>
            <example><code source="..\Examples\Execute.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginExecute(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Performs an asynchronouse execution of the specified command
            </summary>
            <param name="command">The command to execute</param>
            <param name="callback">The AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginExecute.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndExecute(System.IAsyncResult)">
            <summary>
            Ends an asynchronous command
            </summary>
            <param name="ar">IAsyncResult returned from BeginExecute</param>
            <returns>FtpReply object (never null).</returns>
            <example><code source="..\Examples\BeginExecute.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.Connect">
            <summary>
            Connect to the server. Throws ObjectDisposedException if this object has been disposed.
            </summary>
            <example><code source="..\Examples\Connect.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.Authenticate">
            <summary>
            Performs a login on the server. This method is overridable so
            that the login procedure can be changed to support, for example,
            a FTP proxy.
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpClient.GetFeatures(System.Net.FtpClient.FtpReply)">
            <summary>
            Populates the capabilities flags based on capabilities
            supported by this server. This method is overridable
            so that new features can be supported
            </summary>
            <param name="reply">The reply object from the FEAT command. The InfoMessages property will
            contain a list of the features the server supported delimited by a new line '\n' character.</param></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginConnect(System.AsyncCallback,System.Object)">
            <summary>
            Initiates a connection to the server
            </summary>
            <param name="callback">AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginConnect.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndConnect(System.IAsyncResult)">
            <summary>
            Ends an asynchronous connection attempt to the server
            </summary>
            <param name="ar">IAsyncResult returned from BeginConnect()</param>
            <example><code source="..\Examples\BeginConnect.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.FireValidateCertficate(System.Net.FtpClient.FtpSocketStream,System.Net.FtpClient.FtpSslValidationEventArgs)">
            <summary>
            Catches the socket stream ssl validation event and fires the event handlers
            attached to this object for validating SSL certificates
            </summary>
            <param name="stream">The stream that fired the event</param>
            <param name="e">The event args used to validate the certficate</param></member>
        <member name="M:System.Net.FtpClient.FtpClient.Disconnect">
            <summary>
            Disconnect from the server
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginDisconnect(System.AsyncCallback,System.Object)">
            <summary>
            Initiates a disconnection on the server
            </summary>
            <param name="callback">AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDisconnect.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndDisconnect(System.IAsyncResult)">
            <summary>
            Ends a call to BeginDisconnect
            </summary>
            <param name="ar">IAsyncResult returned from BeginDisconnect</param>
            <example><code source="..\Examples\BeginConnect.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenPassiveDataStream(System.Net.FtpClient.FtpDataConnectionType,System.String,System.Int64)">
            <summary>
            Opens the specified type of passive data stream
            </summary>
            <param name="type">Type of passive data stream to open</param>
            <param name="command">The command to execute that requires a data stream</param>
            <param name="restart">Restart location in bytes for file transfer</param>
            <returns>A data stream ready to be used</returns></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenActiveDataStream(System.Net.FtpClient.FtpDataConnectionType,System.String,System.Int64)">
            <summary>
            Opens the specified type of active data stream
            </summary>
            <param name="type">Type of passive data stream to open</param>
            <param name="command">The command to execute that requires a data stream</param>
            <param name="restart">Restart location in bytes for file transfer</param>
            <returns>A data stream ready to be used</returns></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenDataStream(System.String,System.Int64)">
            <summary>
            Opens a data stream.
            </summary>
            <param name="command">The command to execute that requires a data stream</param>
            <param name="restart">Restart location in bytes for file transfer</param>
            <returns>The data stream.</returns></member>
        <member name="M:System.Net.FtpClient.FtpClient.CloseDataStream(System.Net.FtpClient.FtpDataStream)">
            <summary>
            Disconnects a data stream
            </summary>
            <param name="stream">The data stream to close</param></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.String)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <returns>A stream for reading the file on the server</returns>
            <example><code source="..\Examples\OpenRead.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.String,System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <returns>A stream for reading the file on the server</returns>
            <example><code source="..\Examples\OpenRead.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.String,System.Int64)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="restart">Resume location</param>
            <returns>A stream for reading the file on the server</returns>
            <example><code source="..\Examples\OpenRead.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.String,System.Net.FtpClient.FtpDataType,System.Int64)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="restart">Resume location</param>
            <returns>A stream for reading the file on the server</returns>
            <example><code source="..\Examples\OpenRead.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginOpenRead(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenRead.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginOpenRead(System.String,System.Net.FtpClient.FtpDataType,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenRead.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginOpenRead(System.String,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="restart">Resume location</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenRead.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginOpenRead(System.String,System.Net.FtpClient.FtpDataType,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="restart">Resume location</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenRead.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndOpenRead(System.IAsyncResult)">
            <summary>
            Ends a call to BeginOpenRead()
            </summary>
            <param name="ar">IAsyncResult returned from BeginOpenRead()</param>
            <returns>A readable stream</returns>
            <example><code source="..\Examples\BeginOpenRead.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenWrite(System.String)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <returns>A stream for writing to the file on the server</returns>
            <example><code source="..\Examples\OpenWrite.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenWrite(System.String,System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <returns>A stream for writing to the file on the server</returns>
            <example><code source="..\Examples\OpenWrite.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginOpenWrite(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenWrite.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginOpenWrite(System.String,System.Net.FtpClient.FtpDataType,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenWrite.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndOpenWrite(System.IAsyncResult)">
            <summary>
            Ends a call to BeginOpenWrite()
            </summary>
            <param name="ar">IAsyncResult returned from BeginOpenWrite()</param>
            <returns>A writable stream</returns>
            <example><code source="..\Examples\BeginOpenWrite.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenAppend(System.String)">
            <summary>
            Opens the specified file to be appended to
            </summary>
            <param name="path">The full or relative path to the file to be opened</param>
            <returns>A stream for writing to the file on the server</returns>
            <example><code source="..\Examples\OpenAppend.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenAppend(System.String,System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens the specified file to be appended to
            </summary>
            <param name="path">The full or relative path to the file to be opened</param>
            <param name="type">ASCII/Binary</param>
            <returns>A stream for writing to the file on the server</returns>
            <example><code source="..\Examples\OpenAppend.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginOpenAppend(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenAppend.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginOpenAppend(System.String,System.Net.FtpClient.FtpDataType,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenAppend.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndOpenAppend(System.IAsyncResult)">
            <summary>
            Ends a call to BeginOpenAppend()
            </summary>
            <param name="ar">IAsyncResult returned from BeginOpenWrite()</param>
            <returns>A writable stream</returns>
            <example><code source="..\Examples\BeginOpenAppend.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.DereferenceLink(System.Net.FtpClient.FtpListItem)">
            <summary>
            Recursively dereferences a symbolic link. See the
            MaximumDereferenceCount property for controlling
            how deep this method will recurse before giving up.
            </summary>
            <param name="item">The symbolic link</param>
            <returns>FtpListItem, null if the link can't be dereferenced</returns>
            <example><code source="..\Examples\DereferenceLink.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.DereferenceLink(System.Net.FtpClient.FtpListItem,System.Int32)">
            <summary>
            Recursively dereferences a symbolic link
            </summary>
            <param name="item">The symbolic link</param>
            <param name="recMax">The maximum depth of recursion that can be performed before giving up.</param>
            <returns>FtpListItem, null if the link can't be dereferenced</returns>
            <example><code source="..\Examples\DereferenceLink.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.DereferenceLink(System.Net.FtpClient.FtpListItem,System.Int32,System.Int32@)">
            <summary>
            Derefence a FtpListItem object
            </summary>
            <param name="item">The item to derefence</param>
            <param name="recMax">Maximum recursive calls</param>
            <param name="count">Counter</param>
            <returns>FtpListItem, null if the link can't be dereferenced</returns>
            <example><code source="..\Examples\DereferenceLink.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginDereferenceLink(System.Net.FtpClient.FtpListItem,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Derefence a FtpListItem object asynchronously
            </summary>
            <param name="item">The item to derefence</param>
            <param name="recMax">Maximum recursive calls</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDereferenceLink.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginDereferenceLink(System.Net.FtpClient.FtpListItem,System.AsyncCallback,System.Object)">
            <summary>
            Derefence a FtpListItem object asynchronously. See the
            MaximumDereferenceCount property for controlling
            how deep this method will recurse before giving up.
            </summary>
            <param name="item">The item to derefence</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDereferenceLink.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndDereferenceLink(System.IAsyncResult)">
            <summary>
            Ends a call to BeginDereferenceLink
            </summary>
            <param name="ar">IAsyncResult</param>
            <returns>FtpListItem, null if the link can't be dereferenced</returns>
            <example><code source="..\Examples\BeginDereferenceLink.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.GetObjectInfo(System.String)">
            <summary>
            Returns information about a file system object. You should check the Capabilities
            flags for the FtpCapability.MLSD flag before calling this method. Failing to do
            so will result in an InvalidOperationException being thrown when the server
            does not support machine listings. Returns null if the server response can't
            be parsed or the server returns a failure completion code. The error for a failure
            is logged with FtpTrace. No exception is thrown on error because that would negate
            the usefullness of this method for checking for the existence of an object.
            </summary>
            <param name="path">The path of the object to retrieve information about</param>
            <returns>A FtpListItem object</returns></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetObjectInfo(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Returns information about a file system object. You should check the Capabilities
            flags for the FtpCapability.MLSD flag before calling this method. Failing to do
            so will result in an InvalidOperationException being thrown when the server
            does not support machine listings. Returns null if the server response can't
            be parsed or the server returns a failure completion code. The error for a failure
            is logged with FtpTrace. No exception is thrown on error because that would negate
            the usefullness of this method for checking for the existence of an object.
            </summary>
            <param name="path">Path of the item to retrieve information about</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndGetObjectInfo(System.IAsyncResult)">
            <summary>
            Ends a call to BeginGetObjectInfo
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetObjectInfo</param>
            <returns>FtpListItem if the command succeeded, null if there was a problem.</returns></member>
        <member name="M:System.Net.FtpClient.FtpClient.GetListing">
            <summary>
            Gets a file listing from the server. Each FtpListItem object returned
            contains information about the file that was able to be retrieved. If
            a DateTime property is equal to DateTime.MinValue then it means the
            date in question was not able to be retrieved. If the Size property
            is equal to 0 then it means the size of the object could also not
            be retrieved.
            </summary>
            <returns>An array of FtpListItem objects</returns>
            <example><code source="..\Examples\GetListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.GetListing(System.String)">
            <summary>
            Gets a file listing from the server. Each FtpListItem object returned
            contains information about the file that was able to be retrieved. If
            a DateTime property is equal to DateTime.MinValue then it means the
            date in question was not able to be retrieved. If the Size property
            is equal to 0 then it means the size of the object could also not
            be retrieved.
            </summary>
            <param name="path">The path of the directory to list</param>
            <returns>An array of FtpListItem objects</returns>
            <example><code source="..\Examples\GetListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.GetListing(System.String,System.Net.FtpClient.FtpListOption)">
            <summary>
            Gets a file listing from the server. Each FtpListItem object returned
            contains information about the file that was able to be retrieved. If
            a DateTime property is equal to DateTime.MinValue then it means the
            date in question was not able to be retrieved. If the Size property
            is equal to 0 then it means the size of the object could also not
            be retrieved.
            </summary>
            <param name="path">The path of the directory to list</param>
            <param name="options">Options that dictacte how a list is performed and what information is gathered.</param>
            <returns>An array of FtpListItem objects</returns>
            <example><code source="..\Examples\GetListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetListing(System.AsyncCallback,System.Object)">
            <summary>
            Gets a file listing from the server asynchronously
            </summary>
            <param name="callback">AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetListing(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Gets a file listing from the server asynchronously
            </summary>
            <param name="path">The path to list</param>
            <param name="callback">AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetListing(System.String,System.Net.FtpClient.FtpListOption,System.AsyncCallback,System.Object)">
            <summary>
            Gets a file listing from the server asynchronously
            </summary>
            <param name="path">The path to list</param>
            <param name="options">Options that dictate how the list operation is performed</param>
            <param name="callback">AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndGetListing(System.IAsyncResult)">
            <summary>
            Ends an asynchronous file listing
            </summary>
            <param name="ar">IAsyncResult return from BeginGetListing()</param>
            <returns>An array of items retrieved in the listing</returns>
            <example><code source="..\Examples\BeginGetListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.GetNameListing">
            <summary>
            Returns a file/directory listing using the NLST command.
            </summary>
            <returns>A string array of file and directory names if any were returned.</returns></member>
        <member name="M:System.Net.FtpClient.FtpClient.GetNameListing(System.String)">
            <summary>
            Returns a file/directory listing using the NLST command.
            </summary>
            <param name="path">The path of the directory to list</param>
            <returns>A string array of file and directory names if any were returned.</returns>
            <example><code source="..\Examples\GetNameListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetNameListing(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously gets a list of file and directory names for the specified path.
            </summary>
            <param name="path">The path of the directory to list</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetNameListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetNameListing(System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously gets a list of file and directory names for the specified path.
            </summary>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetNameListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndGetNameListing(System.IAsyncResult)">
            <summary>
            Ends a call to BeginGetNameListing()
            </summary>
            <param name="ar">IAsyncResult object returned from BeginGetNameListing</param>
            <returns>An array of file and directory names if any were returned.</returns>
            <example><code source="..\Examples\BeginGetNameListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.SetDataType(System.Net.FtpClient.FtpDataType)">
            <summary>
            Sets the data type of information sent over the data stream
            </summary>
            <param name="type">ASCII/Binary</param></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginSetDataType(System.Net.FtpClient.FtpDataType,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously sets the data type on the server
            </summary>
            <param name="type">ASCII/Binary</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndSetDataType(System.IAsyncResult)">
            <summary>
            Ends a call to BeginSetDataType()
            </summary>
            <param name="ar">IAsyncResult returned from BeginSetDataType()</param></member>
        <member name="M:System.Net.FtpClient.FtpClient.SetWorkingDirectory(System.String)">
            <summary>
            Sets the work directory on the server
            </summary>
            <param name="path">The path of the directory to change to</param>
            <example><code source="..\Examples\SetWorkingDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginSetWorkingDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously changes the working directory on the server
            </summary>
            <param name="path">The directory to change to</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginSetWorkingDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndSetWorkingDirectory(System.IAsyncResult)">
            <summary>
            Ends asynchronous directory change
            </summary>
            <param name="ar">IAsyncResult returned from BeginSetWorkingDirectory</param>
            <example><code source="..\Examples\BeginSetWorkingDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.GetWorkingDirectory">
            <summary>
            Gets the current working directory
            </summary>
            <returns>The current working directory, ./ if the response couldn't be parsed.</returns>
            <example><code source="..\Examples\GetWorkingDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetWorkingDirectory(System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously retrieves the working directory
            </summary>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetWorkingDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndGetWorkingDirectory(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to retrieve the working directory
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetWorkingDirectory</param>
            <returns>The current working directory</returns>
            <example><code source="..\Examples\BeginGetWorkingDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.GetFileSize(System.String)">
            <summary>
            Gets the size of the file
            </summary>
            <param name="path">The full or relative path of the file</param>
            <returns>-1 if the command fails, otherwise the file size</returns>
            <example><code source="..\Examples\GetFileSize.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetFileSize(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously retrieve the size of the specified file
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetFileSize.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndGetFileSize(System.IAsyncResult)">
            <summary>
            Ends a call to BeginGetFileSize()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetFileSize</param>
            <returns>The size of the file, -1 if there was a problem.</returns>
            <example><code source="..\Examples\BeginGetFileSize.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.GetModifiedTime(System.String)">
            <summary>
            Gets the modified time of the file
            </summary>
            <param name="path">The full path to the file</param>
            <returns>The modified time, DateTime.MinValue if there was a problem</returns>
            <example><code source="..\Examples\GetModifiedTime.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetModifiedTime(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Gets the modified time of the file
            </summary>
            <param name="path">The full path to the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetModifiedTime.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndGetModifiedTime(System.IAsyncResult)">
            <summary>
            Ends a call to BeginGetModifiedTime()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetModifiedTime()</param>
            <returns>The modified time, DateTime.MinValue if there was a problem</returns>
            <example><code source="..\Examples\BeginGetModifiedTime.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.DeleteFile(System.String)">
            <summary>
            Deletes a file on the server
            </summary>
            <param name="path">The full or relative path to the file</param>
            <example><code source="..\Examples\DeleteFile.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously deletes a file from the server
            </summary>
            <param name="path">The full or relative path to the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDeleteFile.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndDeleteFile(System.IAsyncResult)">
            <summary>
            Ends a call to BeginDeleteFile
            </summary>
            <param name="ar">IAsyncResult returned from BeginDeleteFile</param>
            <example><code source="..\Examples\BeginDeleteFile.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.DeleteDirectory(System.String)">
            <summary>
            Deletes the specified directory on the server.
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <example><code source="..\Examples\DeleteDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Delets the specified directory on the server
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <param name="force">If the directory is not empty, remove its contents</param>
            <example><code source="..\Examples\DeleteDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.DeleteDirectory(System.String,System.Boolean,System.Net.FtpClient.FtpListOption)">
            <summary>
            Deletes the specified directory on the server
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <param name="force">If the directory is not empty, remove its contents</param>
            <param name="options">FtpListOptions for controlling how the directory
            contents are retrieved with the force option is true. If you experience problems
            the file listing can be fine tuned through this parameter.</param>
            <example><code source="..\Examples\DeleteDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginDeleteDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously removes a directory from the server
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDeleteDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginDeleteDirectory(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously removes a directory from the server
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <param name="force">If the directory is not empty, remove its contents</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDeleteDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginDeleteDirectory(System.String,System.Boolean,System.Net.FtpClient.FtpListOption,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously removes a directory from the server
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <param name="force">If the directory is not empty, remove its contents</param>
            <param name="options">FtpListOptions for controlling how the directory
            contents are retrieved with the force option is true. If you experience problems
            the file listing can be fine tuned through this parameter.</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDeleteDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndDeleteDirectory(System.IAsyncResult)">
            <summary>
            Ends a call to BeginDeleteDirectory()
            </summary>
            <param name="ar">IAsyncResult returned from BeginDeleteDirectory</param>
            <example><code source="..\Examples\BeginDeleteDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.DirectoryExists(System.String)">
            <summary>
            Tests if the specified directory exists on the server. This
            method works by trying to change the working directory to
            the path specified. If it succeeds, the directory is changed
            back to the old working directory and true is returned. False
            is returned otherwise and since the CWD failed it is assumed
            the working directory is still the same.
            </summary>
            <param name="path">The path of the directory</param>
            <returns>True if it exists, false otherwise.</returns>
            <example><code source="..\Examples\DirectoryExists.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginDirectoryExists(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Checks if a directory exists on the server asynchronously.
            </summary>
            <returns>IAsyncResult</returns>
            <param name="path">The full or relative path of the directory to check for</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <example><code source="..\Examples\BeginDirectoryExists.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndDirectoryExists(System.IAsyncResult)">
            <summary>
            Ends a call to BeginDirectoryExists
            </summary>
            <param name="ar">IAsyncResult returned from BeginDirectoryExists</param>
            <returns>True if the directory exists. False otherwise.</returns>
            <example><code source="..\Examples\BeginDirectoryExists.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.FileExists(System.String)">
            <summary>
            Checks if a file exsts on the server by taking a
            file listing of the parent directory in the path
            and comparing the results the path supplied.
            </summary>
            <param name="path">The full or relative path to the file</param>
            <returns>True if the file exists</returns>
            <example><code source="..\Examples\FileExists.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.FileExists(System.String,System.Net.FtpClient.FtpListOption)">
            <summary>
            Checks if a file exsts on the server by taking a
            file listing of the parent directory in the path
            and comparing the results the path supplied.
            </summary>
            <param name="path">The full or relative path to the file</param>
            <param name="options">Options for controling the file listing used to
            determine if the file exists.</param>
            <returns>True if the file exists</returns>
            <example><code source="..\Examples\FileExists.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginFileExists(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Checks if a file exsts on the server by taking a
            file listing of the parent directory in the path
            and comparing the results the path supplied.
            </summary>
            <param name="path">The full or relative path to the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginFileExists.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginFileExists(System.String,System.Net.FtpClient.FtpListOption,System.AsyncCallback,System.Object)">
            <summary>
            Checks if a file exsts on the server by taking a
            file listing of the parent directory in the path
            and comparing the results the path supplied.
            </summary>
            <param name="path">The full or relative path to the file</param>
            <param name="options">Options for controling the file listing used to
            determine if the file exists.</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginFileExists.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndFileExists(System.IAsyncResult)">
            <summary>
            Ends a call to BeginFileExists
            </summary>
            <param name="ar">IAsyncResult returned from BeginFileExists</param>
            <returns>True if the file exists</returns>
            <example><code source="..\Examples\BeginFileExists.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.CreateDirectory(System.String)">
            <summary>
            Creates a directory on the server. If the preceding
            directories do not exist they are created.
            </summary>
            <param name="path">The full or relative path to the new directory</param>
            <example><code source="..\Examples\CreateDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.CreateDirectory(System.String,System.Boolean)">
            <summary>
            Creates a directory on the server
            </summary>
            <param name="path">The full or relative path to the directory to create</param>
            <param name="force">Try to force all non-existant pieces of the path to be created</param>
            <example><code source="..\Examples\CreateDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Creates a directory asynchronously
            </summary>
            <param name="path">The full or relative path to the directory to create</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginCreateDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginCreateDirectory(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Creates a directory asynchronously
            </summary>
            <param name="path">The full or relative path to the directory to create</param>
            <param name="force">Try to create the whole path if the preceding directories do not exist</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginCreateDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndCreateDirectory(System.IAsyncResult)">
            <summary>
            Ends a call to BeginCreateDirectory
            </summary>
            <param name="ar">IAsyncResult returned from BeginCreateDirectory</param>
            <example><code source="..\Examples\BeginCreateDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.Rename(System.String,System.String)">
            <summary>
            Renames an object on the remote file system.
            </summary>
            <param name="path">The full or relative path to the object</param>
            <param name="dest">The old or new full or relative path including the new name of the object</param>
            <example><code source="..\Examples\Rename.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginRename(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously renames an object on the server
            </summary>
            <param name="path">The full or relative path to the object</param>
            <param name="dest">The old or new full or relative path including the new name of the object</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginRename.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndRename(System.IAsyncResult)">
            <summary>
            Ends a call to BeginRename
            </summary>
            <param name="ar">IAsyncResult returned from BeginRename</param>
            <example><code source="..\Examples\BeginRename.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.GetHashAlgorithm">
            <summary>
            Gets the currently selected hash algorith for the HASH
            command. This feature is experimental. See this link
            for details:
            http://tools.ietf.org/html/draft-bryan-ftpext-hash-02
            </summary>
            <returns>The FtpHashType flag or FtpHashType.NONE if there was a problem.</returns>
            <example><code source="..\Examples\GetHashAlgorithm.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetHashAlgorithm(System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously get the hash algorithm being used by the HASH command.
            </summary>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndGetHashAlgorithm(System.IAsyncResult)">
            <summary>
            Ends a call to BeginGetHashAlgorithm
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetHashAlgorithm</param></member>
        <member name="M:System.Net.FtpClient.FtpClient.SetHashAlgorithm(System.Net.FtpClient.FtpHashAlgorithm)">
            <summary>
            Tells the server which hash algorith to use
            for the HASH command. If you specifiy an
            algorithm not listed in FtpClient.HashTypes
            a NotImplemented() exectpion will be thrown
            so be sure to query that list of Flags before
            selecting a hash algorithm. Support for the
            HASH command is experimental. Please see
            the following link for more details:
            http://tools.ietf.org/html/draft-bryan-ftpext-hash-02
            </summary>
            <param name="type">Hash Algorithm</param>
            <example><code source="..\Examples\SetHashAlgorithm.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginSetHashAlgorithm(System.Net.FtpClient.FtpHashAlgorithm,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously sets the hash algorithm type to be used with the HASH command.
            </summary>
            <param name="type">Hash algorithm to use</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndSetHashAlgorithm(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginSetHashAlgorithm
            </summary>
            <param name="ar">IAsyncResult returned from BeginSetHashAlgorithm</param></member>
        <member name="M:System.Net.FtpClient.FtpClient.GetHash(System.String)">
            <summary>
            Gets the hash of an object on the server using the
            currently selected hash algorithm. Supported
            algorithms, if any, are available in the HashAlgorithms
            property. You should confirm that it's not equal
            to FtpHashAlgorithm.NONE before calling this method
            otherwise the server trigger a FtpCommandException()
            due to a lack of support for the HASH command. You can
            set the algorithm using the SetHashAlgorithm() method and
            you can query the server for the current hash algorithm
            using the GetHashAlgorithm() method.
            This feature is experimental and based on the following draft:
            http://tools.ietf.org/html/draft-bryan-ftpext-hash-02
            </summary>
            <param name="path">Full or relative path of the object to compute the hash for.</param>
            <returns>The hash of the file.</returns>
            <example><code source="..\Examples\GetHash.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.BeginGetHash(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously retrieves the hash for the specified file
            </summary>
            <param name="path">The file you want the server to compute the hash for</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns></member>
        <member name="M:System.Net.FtpClient.FtpClient.EndGetHash(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginGetHash
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetHash</param></member>
        <member name="M:System.Net.FtpClient.FtpClient.DisableUTF8">
            <summary>
            Disables UTF8 support and changes the Encoding property
            back to ASCII. If the server returns an error when trying
            to turn UTF8 off a FtpCommandException will be thrown.
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpClient.Dispose">
            <summary>
            Disconnects from the server, releases resources held by this
            object.
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpClient.Finalize">
            <summary>
            Finalizer
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpClient.#ctor">
            <summary>
            Creates a new isntance of FtpClient
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpClient.Connect(System.Uri,System.Boolean)">
            <summary>
            Connects to the specified URI. If the path specified by the URI ends with a
            / then the working directory is changed to the path specified.
            </summary>
            <param name="uri">The URI to parse</param>
            <param name="checkcertificate">Indicates if a ssl certificate should be validated when using FTPS schemes</param>
            <returns>FtpClient object</returns></member>
        <member name="M:System.Net.FtpClient.FtpClient.Connect(System.Uri)">
            <summary>
            Connects to the specified URI. If the path specified by the URI ends with a
            / then the working directory is changed to the path specified.
            </summary>
            <param name="uri">The URI to parse</param>
            <returns>FtpClient object</returns></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.Uri,System.Boolean,System.Net.FtpClient.FtpDataType,System.Int64)">
            <summary>
            Opens a stream to the file specified by the URI
            </summary>
            <param name="uri">FTP/FTPS URI pointing at a file</param>
            <param name="checkcertificate">Indicates if a ssl certificate should be validated when using FTPS schemes</param>
            <param name="datatype">ASCII/Binary mode</param>
            <param name="restart">Restart location</param>
            <returns>Stream object</returns>
            <example><code source="..\Examples\OpenReadURI.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.Uri,System.Boolean,System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens a stream to the file specified by the URI
            </summary>
            <param name="uri">FTP/FTPS URI pointing at a file</param>
            <param name="checkcertificate">Indicates if a ssl certificate should be validated when using FTPS schemes</param>
            <param name="datatype">ASCII/Binary mode</param>
            <returns>Stream object</returns>
            <example><code source="..\Examples\OpenReadURI.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.Uri,System.Boolean)">
            <summary>
            Opens a stream to the file specified by the URI
            </summary>
            <param name="uri">FTP/FTPS URI pointing at a file</param>
            <param name="checkcertificate">Indicates if a ssl certificate should be validated when using FTPS schemes</param>
            <returns>Stream object</returns>
            <example><code source="..\Examples\OpenReadURI.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenRead(System.Uri)">
            <summary>
            Opens a stream to the file specified by the URI
            </summary>
            <param name="uri">FTP/FTPS URI pointing at a file</param>
            <returns>Stream object</returns>
            <example><code source="..\Examples\OpenReadURI.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenWrite(System.Uri,System.Boolean,System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens a stream to the file specified by the URI
            </summary>
            <param name="uri">FTP/FTPS URI pointing at a file</param>
            <param name="checkcertificate">Indicates if a ssl certificate should be validated when using FTPS schemes</param>
            <param name="datatype">ASCII/Binary mode</param>
            <returns>Stream object</returns>
            <example><code source="..\Examples\OpenWriteURI.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenWrite(System.Uri,System.Boolean)">
            <summary>
            Opens a stream to the file specified by the URI
            </summary>
            <param name="uri">FTP/FTPS URI pointing at a file</param>
            <param name="checkcertificate">Indicates if a ssl certificate should be validated when using FTPS schemes</param>
            <returns>Stream object</returns>
            <example><code source="..\Examples\OpenWriteURI.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenWrite(System.Uri)">
            <summary>
            Opens a stream to the file specified by the URI
            </summary>
            <param name="uri">FTP/FTPS URI pointing at a file</param>
            <returns>Stream object</returns>
            <example><code source="..\Examples\OpenWriteURI.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenAppend(System.Uri,System.Boolean,System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens a stream to the file specified by the URI
            </summary>
            <param name="uri">FTP/FTPS URI pointing at a file</param>
            <param name="checkcertificate">Indicates if a ssl certificate should be validated when using FTPS schemes</param>
            <param name="datatype">ASCII/Binary mode</param>
            <returns>Stream object</returns>
            <example><code source="..\Examples\OpenAppendURI.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenAppend(System.Uri,System.Boolean)">
            <summary>
            Opens a stream to the file specified by the URI
            </summary>
            <param name="uri">FTP/FTPS URI pointing at a file</param>
            <param name="checkcertificate">Indicates if a ssl certificate should be validated when using FTPS schemes</param>
            <returns>Stream object</returns>
            <example><code source="..\Examples\OpenAppendURI.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpClient.OpenAppend(System.Uri)">
            <summary>
            Opens a stream to the file specified by the URI
            </summary>
            <param name="uri">FTP/FTPS URI pointing at a file</param>
            <returns>Stream object</returns>
            <example><code source="..\Examples\OpenAppendURI.cs" lang="cs" /></example></member>
        <member name="T:System.Net.FtpClient.FtpClient.FtpControlConnectionClone">
            <summary>
            Used internally to mark properties in the control connection that
            should be cloned when opening a data connection.
            </summary></member>
        <member name="T:System.Net.FtpClient.FtpDataStream">
            <summary>
            Base class for data stream connections
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpDataStream.CommandStatus">
            <summary>
            Gets the status of the command that was used to open
            this data channel
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpDataStream.ControlConnection">
            <summary>
            Gets or sets the control connection for this data stream. Setting
            the control connection causes the object to be clonded and a new
            connection is made to the server to carry out the task. This ensures
            that multiple streams can be opened simultainously.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpDataStream.Length">
            <summary>
            Gets or sets the length of the stream. Only valid for file transfers
            and only valid on servers that support the Size command.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpDataStream.Position">
            <summary>
            Gets or sets the position of the stream
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data off the stream
            </summary>
            <param name="buffer">The buffer to read into</param>
            <param name="offset">Where to start in the buffer</param>
            <param name="count">Number of bytes to read</param>
            <returns>The number of bytes read</returns></member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the stream
            </summary>
            <param name="buffer">The buffer to write to the stream</param>
            <param name="offset">Where to start in the buffer</param>
            <param name="count">The number of bytes to write to the buffer</param></member>
        <member name="M:System.Net.FtpClient.FtpDataStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream
            </summary>
            <param name="value">Value to apply to the Length property</param></member>
        <member name="M:System.Net.FtpClient.FtpDataStream.SetPosition(System.Int64)">
            <summary>
            Sets the position of the stream. Inteneded to be used
            internally by FtpControlConnection.
            </summary>
            <param name="pos">The position</param></member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Dispose(System.Boolean)">
            <summary>
            Disconnects (if necessary) and releases associated resources
            </summary>
            <param name="disposing">Disposing</param></member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Close">
            <summary>
            Closes the connection and reads the server's reply
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpDataStream.#ctor(System.Net.FtpClient.FtpClient)">
            <summary>
            Creates a new data stream object
            </summary>
            <param name="conn">The control connection to be used for carrying out this operation</param></member>
        <member name="M:System.Net.FtpClient.FtpDataStream.Finalize">
            <summary>
            Finalizer
            </summary></member>
        <member name="T:System.Net.FtpClient.FtpEncryptionMode">
            <summary>
            Defines the type of encryption to use
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpEncryptionMode.None">
            <summary>
            Plain text.
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpEncryptionMode.Implicit">
            <summary>
            Encryption is used from the start of the connection, port 990
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpEncryptionMode.Explicit">
            <summary>
            Connection starts in plain text and encryption is enabled
            with the AUTH command immediately after the server greeting.
            </summary></member>
        <member name="T:System.Net.FtpClient.FtpResponseType">
            <summary>
            The type of response the server responded with
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpResponseType.None">
            <summary>
            No response
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpResponseType.PositivePreliminary">
            <summary>
            Success
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpResponseType.PositiveCompletion">
            <summary>
            Successs
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpResponseType.PositiveIntermediate">
            <summary>
            Succcess
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpResponseType.TransientNegativeCompletion">
            <summary>
            Temporary failure
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpResponseType.PermanentNegativeCompletion">
            <summary>
            Permanent failure
            </summary></member>
        <member name="T:System.Net.FtpClient.FtpCapability">
            <summary>
            Server features
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpCapability.NONE">
            <summary>
            This server said it doesn't support anything!
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpCapability.MLSD">
            <summary>
            Supports the MLST command
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpCapability.SIZE">
            <summary>
            Supports the SIZE command
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpCapability.MDTM">
            <summary>
            Supports the MDTM command
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpCapability.REST">
            <summary>
            Supports download/upload stream resumes
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpCapability.UTF8">
            <summary>
            Supports UTF8
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpCapability.PRET">
            <summary>
            PRET Command used in distributed ftp server software DrFTPD
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpCapability.MFMT">
            <summary>
            Server supports the MFMT command for setting the
            modifid date of an object on the server
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpCapability.MFCT">
            <summary>
            Server supports the MFCT command for setting the
            created date of an object on the server
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpCapability.MFF">
            <summary>
            Server supports the MFF command for setting certain facts
            about file sytem objects. If you need this command, it would
            probably be handy to query FEAT your self and have a look at
            the FtpReply.InfoMessages property to see which facts the server
            allows you to modify.
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpCapability.STAT">
            <summary>
            Server supports the STAT command
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpCapability.HASH">
            <summary>
            Support for the HASH command
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpCapability.MD5">
            <summary>
            Support for the non-standard MD5 command
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpCapability.XMD5">
            <summary>
            Support for the non-standard XMD5 command
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpCapability.XCRC">
            <summary>
            Support for the non-standard XCRC command
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpCapability.XSHA1">
            <summary>
            Support for the non-standard XSHA1 command
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpCapability.XSHA256">
            <summary>
            Support for the non-standard XSHA256 command
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpCapability.XSHA512">
            <summary>
            Support for the non-standard XSHA512 command
            </summary></member>
        <member name="T:System.Net.FtpClient.FtpHashAlgorithm">
            <summary>
            Different types of hashing algorithms for computing checksums.
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpHashAlgorithm.NONE">
            <summary>
            HASH command is not supported
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpHashAlgorithm.SHA1">
            <summary>
            SHA-1
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpHashAlgorithm.SHA256">
            <summary>
            SHA-256
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpHashAlgorithm.SHA512">
            <summary>
            SHA-512
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpHashAlgorithm.MD5">
            <summary>
            MD5
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpHashAlgorithm.CRC">
            <summary>
            CRC
            </summary></member>
        <member name="T:System.Net.FtpClient.FtpIpVersion">
            <summary>
            IP Versions to allow when connecting
            to a server.
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpIpVersion.IPv4">
            <summary>
            Internet Protocol Version 4
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpIpVersion.IPv6">
            <summary>
            Internet Protocol Version 6
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpIpVersion.ANY">
            <summary>
            Allow any supported version
            </summary></member>
        <member name="T:System.Net.FtpClient.FtpDataConnectionType">
            <summary>
            Data connection type
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpDataConnectionType.AutoPassive">
            <summary>
            This type of data connection attempts to use the EPSV command
            and if the server does not support EPSV it falls back to the
            PASV command before giving up unless you are connected via IPv6
            in which case the PASV command is not supported.
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpDataConnectionType.PASV">
            <summary>
            Passive data connection. EPSV is a better
            option if it's supported. Passive connections
            connect to the IP address dicated by the server
            which may or may not be accessible by the client
            for example a server behind a NAT device may
            give an IP address on its local network that
            is inaccessible to the client. Please note that IPv6
            does not support this type data connection. If you
            ask for PASV and are connected via IPv6 EPSV will
            automatically be used in its place.
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpDataConnectionType.PASVEX">
            <summary>
            Same as PASV except the host supplied by the server is ignored
            and the data conncetion is made to the same address that the control
            connection is connected to. This is useful in scenarios where the
            server supplies a private/non-routable network address in the
            PASV response. It's functionally identical to EPSV except some
            servers may not implement the EPSV command. Please note that IPv6
            does not support this type data connection. If you
            ask for PASV and are connected via IPv6 EPSV will
            automatically be used in its place.
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpDataConnectionType.EPSV">
            <summary>
            Extended passive data connection, recommended. Works
            the same as a PASV connection except the server
            does not dictate an IP address to connect to, instead
            the passive connection goes to the same address used
            in the control connection. This type of data connection
            supports IPv4 and IPv6.
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpDataConnectionType.AutoActive">
            <summary>
            This type of data connection attempts to use the EPRT command
            and if the server does not support EPRT it falls back to the
            PORT command before giving up unless you are connected via IPv6
            in which case the PORT command is not supported.
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpDataConnectionType.PORT">
            <summary>
            Active data connection, not recommended unless
            you have a specific reason for using this type.
            Creates a listening socket on the client which
            requires firewall exceptions on the client system
            as well as client network when connecting to a
            server outside of the client's network. In addition
            the IP address of the interface used to connect to the
            server is the address the server is told to connect to
            which, if behind a NAT device, may be inaccessible to
            the server. This type of data connection is not supported
            by IPv6. If you specify PORT and are connected via IPv6
            EPRT will automatically be used instead.
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpDataConnectionType.EPRT">
            <summary>
            Extended active data connection, not recommended
            unless you have a specific reason for using this
            type. Creates a listening socket on the client
            which requires firewall exceptions on the client
            as well as client network when connecting to a
            server outside of the client's network. The server
            connects to the IP address it sees the client comming
            from. This type of data connection supports IPv4 and IPv6.
            </summary></member>
        <member name="T:System.Net.FtpClient.FtpDataType">
            <summary>
            Type of data transfer to do
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpDataType.ASCII">
            <summary>
            ASCII transfer
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpDataType.Binary">
            <summary>
            Binary transfer
            </summary></member>
        <member name="T:System.Net.FtpClient.FtpFileSystemObjectType">
            <summary>
            Type of file system of object
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpFileSystemObjectType.File">
            <summary>
            A file
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpFileSystemObjectType.Directory">
            <summary>
            A directory
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpFileSystemObjectType.Link">
            <summary>
            A symbolic link
            </summary></member>
        <member name="T:System.Net.FtpClient.FtpPermission">
            <summary>
            Types of file permissions
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpPermission.None">
            <summary>
            No access
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpPermission.Execute">
            <summary>
            Executable
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpPermission.Write">
            <summary>
            Writeable
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpPermission.Read">
            <summary>
            Readable
            </summary></member>
        <member name="T:System.Net.FtpClient.FtpSpecialPermissions">
            <summary>
            Types of special UNIX permissions
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpSpecialPermissions.None">
            <summary>
            No special permissions are set
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpSpecialPermissions.Sticky">
            <summary>
            Sticky bit is set
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpSpecialPermissions.SetGroupID">
            <summary>
            SGID bit is set
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpSpecialPermissions.SetUserID">
            <summary>
            SUID bit is set
            </summary></member>
        <member name="T:System.Net.FtpClient.FtpListOption">
            <summary>
            Flags that can dicate how a file listing is performed
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpListOption.Modify">
            <summary>
            Load the modify date using MDTM when it could not
            be parsed from the server listing. This only pertains
            to servers that do not implement the MLSD command.
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpListOption.Size">
            <summary>
            Load the file size using the SIZE command when it
            could not be parsed from the server listing. This
            only pertains to servers that do not support the
            MLSD command.
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpListOption.SizeModify">
            <summary>
            Combines the Modify and Size flags
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpListOption.AllFiles">
            <summary>
            Show hidden/dot files. This only pertains to servers
            that do not support the MLSD command. This option
            makes use the non standard -a parameter to LIST to
            tell the server to show hidden files. Since it's a
            non-standard option it may not always work. MLSD listings
            have no such option and whether or not a hidden file is
            shown is at the discretion of the server.
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpListOption.ForceList">
            <summary>
            Force the use of the NLST command even if MLSD
            is supported by the server
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpListOption.NameList">
            <summary>
            Use the NLST command instead of LIST for a reliable file listing
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpListOption.ForceNameList">
            <summary>
            Combines the ForceList and NameList flags
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpListOption.DerefLinks">
            <summary>
            Try to dereference symbolic links
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpListOption.UseLS">
            <summary>
            Sets the ForceList flag and uses `LS' instead of `LIST' as the
            command for getting a directory listing. This option overrides
            ForceNameList and ignores the AllFiles flag.
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpListOption.Recursive">
            <summary>
            Adds the -r option to the list command. Some servers may not
            support this feature.
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpListOption.NoPath">
            <summary>
            Do not retrieve path when no path is supplied to GetListing(),
            instead just execute LIST with no path argument.
            </summary></member>
        <member name="T:System.Net.FtpClient.FtpException">
            <summary>
            FTP related error
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpException.#ctor(System.String)">
            <summary>
            Initializes the exception object
            </summary>
            <param name="message">The error message</param></member>
        <member name="T:System.Net.FtpClient.FtpCommandException">
            <summary>
            Exception triggered on command failures
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpCommandException.CompletionCode">
            <summary>
            Gets the completion code associated with the response
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpCommandException.ResponseType">
            <summary>
            The type of response received from the last command executed
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpCommandException.#ctor(System.String,System.String)">
            <summary>
            Initalizes a new instance of a FtpResponseException
            </summary>
            <param name="code">Status code</param>
            <param name="message">Associated message</param></member>
        <member name="M:System.Net.FtpClient.FtpCommandException.#ctor(System.Net.FtpClient.FtpReply)">
            <summary>
            Initalizes a new instance of a FtpResponseException
            </summary>
            <param name="reply">The FtpReply to build the exception from</param></member>
        <member name="T:System.Net.FtpClient.FtpSecurityNotAvailableException">
            <summary>
            Exception is thrown when encryption could not be negotiated by the server
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpSecurityNotAvailableException.#ctor">
            <summary>
            Default constructor
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpSecurityNotAvailableException.#ctor(System.String)">
            <summary>
            Custom error message
            </summary>
            <param name="message">Error message</param></member>
        <member name="T:System.Net.FtpClient.FtpExtensions">
            <summary>
            Extension methods related to FTP tasks
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpExtensions.GetFtpPath(System.String)">
            <summary>
            Converts the specified path into a valid FTP file system path
            </summary>
            <param name="path">The file system path</param>
            <returns>A path formatted for FTP</returns></member>
        <member name="M:System.Net.FtpClient.FtpExtensions.GetFtpPath(System.String,System.String[])">
            <summary>
            Creates a valid FTP path by appending the specified segments to this string
            </summary>
            <param name="path">This string</param>
            <param name="segments">The path segments to append</param>
            <returns>A valid FTP path</returns></member>
        <member name="M:System.Net.FtpClient.FtpExtensions.GetFtpDirectoryName(System.String)">
            <summary>
            Gets the directory name of a path formatted for a FTP server
            </summary>
            <param name="path">The path</param>
            <returns>The parent directory path</returns></member>
        <member name="M:System.Net.FtpClient.FtpExtensions.GetFtpFileName(System.String)">
            <summary>
            Gets the file name from the path
            </summary>
            <param name="path">The full path to the file</param>
            <returns>The file name</returns></member>
        <member name="M:System.Net.FtpClient.FtpExtensions.GetFtpDate(System.String,System.Globalization.DateTimeStyles)">
            <summary>
            Tries to convert the string FTP date representation  into a date time object
            </summary>
            <param name="date">The date</param>
            <param name="style">UTC/Local Time</param>
            <returns>A date time object representing the date, DateTime.MinValue if there was a problem</returns></member>
        <member name="T:System.Net.FtpClient.FtpHash">
            <summary>
            Represents a computed hash of an object
            on the FTP server. See the following link
            for more information:
            http://tools.ietf.org/html/draft-bryan-ftpext-hash-02
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpHash.Algorithm">
            <summary>
            Gets the algorithm that was used to compute the hash
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpHash.Value">
            <summary>
            Gets the computed hash returned by the server
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpHash.IsValid">
            <summary>
            Gets a value indicating if this object represents a
            valid hash response from the server.
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpHash.Verify(System.String)">
            <summary>
            Computes the hash for the specified file and compares
            it to the value in this object. CRC hashes are not supported
            because there is no built-in support in the .net framework and
            a CRC implementation exceeds the scope of this project. If you
            attempt to Verify() a CRC hash a NotImplemented() exception will
            be thrown.
            </summary>
            <param name="file">The file to compute the hash for</param>
            <returns>True if the computed hash matches what's stored in this object.</returns></member>
        <member name="M:System.Net.FtpClient.FtpHash.Verify(System.IO.Stream)">
            <summary>
            Computes the hash for the specified stream and compares
            it to the value in this object. CRC hashes are not supported
            because there is no built-in support in the .net framework and
            a CRC implementation exceeds the scope of this project. If you
            attempt to Verify() a CRC hash a NotImplemented() exception will
            be thrown.
            </summary>
            <param name="istream">The stream to compute the hash for</param>
            <returns>True if the computed hash matches what's stored in this object.</returns></member>
        <member name="M:System.Net.FtpClient.FtpHash.#ctor">
            <summary>
            Creates an empty instance.
            </summary></member>
        <member name="T:System.Net.FtpClient.FtpListItem">
            <summary>
            Represents a file system object on the server
            </summary>
            <example><code source="..\Examples\CustomParser.cs" lang="cs" /></example></member>
        <member name="P:System.Net.FtpClient.FtpListItem.Type">
            <summary>
            Gets the type of file system object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpListItem.FullName">
            <summary>
            Gets the full path name to the object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpListItem.Name">
            <summary>
            Gets the name of the object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpListItem.LinkTarget">
            <summary>
            Gets the target a symbolic link points to. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpListItem.LinkObject">
            <summary>
            Gets the object the LinkTarget points to. This property is null unless pass the
            FtpListOption.DerefLink flag in which case GetListing() will try to resolve
            the target itself.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpListItem.Modified">
            <summary>
            Gets the last write time of the object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpListItem.Created">
            <summary>
            Gets the created date of the object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpListItem.Size">
            <summary>
            Gets the size of the object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpListItem.SpecialPermissions">
            <summary>
            Gets special UNIX permissions such as Stiky, SUID and SGID. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpListItem.OwnerPermissions">
            <summary>
            Gets the owner permissions. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpListItem.GroupPermissions">
            <summary>
            Gets the group permissions. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpListItem.OthersPermissions">
            <summary>
            Gets the others permissions. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpListItem.Input">
            <summary>
            Gets the input string that was parsed to generate the
            values in this object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpListItem.ToString">
            <summary>
            Returns a string representation of this object and its properties
            </summary>
            <returns>A string value</returns></member>
        <member name="M:System.Net.FtpClient.FtpListItem.Parse(System.String,System.String,System.Net.FtpClient.FtpCapability)">
            <summary>
            Parses a line from a file listing using the first successful match in the Parsers collection.
            </summary>
            <param name="path">The source path of the file listing</param>
            <param name="buf">A line from the file listing</param>
            <param name="capabilities">Server capabilities</param>
            <returns>A FtpListItem object representing the parsed line, null if the line was
            unable to be parsed. If you have encountered an unsupported list type add a parser
            to the public static Parsers collection of FtpListItem.</returns></member>
        <member name="F:System.Net.FtpClient.FtpListItem.m_parserLock">
            <summary>
            Used for synchronizing access to the Parsers collection
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpListItem.InitParsers">
            <summary>
            Initalizes the default list of parsers
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpListItem.Parsers">
            <summary>
            Collection of parsers. Each parser object contains
            a regex string that uses named groups, i.e., (?&lt;group_name&gt;foobar).
            The support group names are modify for last write time, size for the
            size and name for the name of the file system object. Each group name is
            optional, if they are present then those values are retrieved from a
            successful match. In addition, each parser contains a Type property
            which gets set in the FtpListItem object to distinguish between different
            types of objects.
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpListItem.AddParser(System.Net.FtpClient.FtpListItem.Parser)">
            <summary>
            Adds a custom parser
            </summary>
            <param name="parser">The parser delegate to add</param>
            <example><code source="..\Examples\CustomParser.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.FtpListItem.ClearParsers">
            <summary>
            Removes all parser delegates
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpListItem.RemoveParser(System.Net.FtpClient.FtpListItem.Parser)">
            <summary>
            Removes the specified parser
            </summary>
            <param name="parser">The parser delegate to remove</param></member>
        <member name="M:System.Net.FtpClient.FtpListItem.ParseMachineList(System.String,System.Net.FtpClient.FtpCapability)">
            <summary>
            Parses MLS* format listings
            </summary>
            <param name="buf">A line from the listing</param>
            <param name="capabilities">Server capabilities</param>
            <returns>FtpListItem if the item is able to be parsed</returns></member>
        <member name="M:System.Net.FtpClient.FtpListItem.ParseUnixList(System.String,System.Net.FtpClient.FtpCapability)">
            <summary>
            Parses LIST format listings
            </summary>
            <param name="buf">A line from the listing</param>
            <param name="capabilities">Server capabilities</param>
            <returns>FtpListItem if the item is able to be parsed</returns></member>
        <member name="M:System.Net.FtpClient.FtpListItem.ParseDosList(System.String,System.Net.FtpClient.FtpCapability)">
            <summary>
            Parses IIS DOS format listings
            </summary>
            <param name="buf">A line from the listing</param>
            <param name="capabilities">Server capabilities</param>
            <returns>FtpListItem if the item is able to be parsed</returns></member>
        <member name="T:System.Net.FtpClient.FtpListItem.Parser">
            <summary>
            Ftp listing line parser
            </summary>
            <param name="line">The line from the listing</param>
            <param name="capabilities">The server capabilities</param>
            <returns>FtpListItem if the line can be parsed, null otherwise</returns></member>
        <member name="T:System.Net.FtpClient.FtpReply">
            <summary>
            Represents a reply to an event on the server
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpReply.Type">
            <summary>
            The type of response received from the last command executed
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpReply.Code">
            <summary>
            The status code of the response
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpReply.Message">
            <summary>
            The message, if any, that the server sent with the response
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpReply.InfoMessages">
            <summary>
            Informational messages sent from the server
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpReply.Success">
            <summary>
            General success or failure of the last command executed
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpReply.ErrorMessage">
            <summary>
            Gets the error message including any informational output
            that was sent by the server. Sometimes the final response
            line doesn't contain anything informative as to what was going
            on with the server. Instead it may send information messages so
            in an effort to give as meaningful as a response as possible
            the informational messages will be included in the error.
            </summary></member>
        <member name="T:System.Net.FtpClient.FtpSocketStreamSslValidation">
            <summary>
            Event fired if a bad SSL certificate is encountered. This even is used internally; if you
            don't have a specific reason for using it you are probably looking for FtpSslValidation.
            </summary>
            <param name="stream"></param>
            <param name="e"></param></member>
        <member name="T:System.Net.FtpClient.FtpSslValidationEventArgs">
            <summary>
            Event args for the FtpSslValidationError delegate
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSslValidationEventArgs.Certificate">
            <summary>
            The certificate to be validated
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSslValidationEventArgs.Chain">
            <summary>
            The certificate chain
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSslValidationEventArgs.PolicyErrors">
            <summary>
            Validation errors, if any.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSslValidationEventArgs.Accept">
            <summary>
            Gets or sets a value indicating if this certificate should be accepted. The default
            value is false. If the certificate is not accepted, an AuthenticationException will
            be thrown.
            </summary></member>
        <member name="T:System.Net.FtpClient.FtpSocketStream">
            <summary>
            Stream class used for talking. Used by FtpClient, extended by FtpDataStream
            </summary></member>
        <member name="F:System.Net.FtpClient.FtpSocketStream.m_lastActivity">
            <summary>
            Used for tacking read/write activity on the socket
            to determine if Poll() should be used to test for
            socket conenctivity. The socket in this class will
            not know it has been disconnected if the remote host
            closes the connection first. Using Poll() avoids
            the exception that would be thrown when trying to
            read or write to the disconnected socket.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.Socket">
            <summary>
            The socket used for talking
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.SocketPollInterval">
            <summary>
            Gets or sets the length of time in miliseconds
            that must pass since the last socket activity
            before calling Poll() on the socket to test for
            connectivity. Setting this interval too low will
            have a negative impact on perfomance. Setting this
            interval to 0 disables Poll()'ing all together.
            The default value is 15 seconds.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.SocketDataAvailable">
            <summary>
            Gets the number of available bytes on the socket, 0 if the
            socket has not been initalized. This property is used internally
            by FtpClient in an effort to detect disconnections and gracefully
            reconnect the control connection.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.IsConnected">
            <summary>
            Gets a value indicating if this socket stream is connected
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.IsEncrypted">
            <summary>
            Gets a value indicating if encryption is being used
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.NetworkStream">
            <summary>
            The non-encrypted stream
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.SslStream">
            <summary>
            The encrypted stream
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.BaseStream">
            <summary>
            Underlying stream, could be a NetworkStream or SslStream
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.CanRead">
            <summary>
            Gets a value indicating if this stream can be read
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.CanSeek">
            <summary>
            Gets a value indicating if this stream if seekable
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.CanWrite">
            <summary>
            Gets a value indicating if this stream can be written to
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.Length">
            <summary>
            Gets the length of the stream
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.Position">
            <summary>
            Gets the current position of the stream. Trying to
            set this property throws an InvalidOperationException()
            </summary></member>
        <member name="E:System.Net.FtpClient.FtpSocketStream.ValidateCertificate">
            <summary>
            Event is fired when a SSL certificate needs to be validated
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.ReadTimeout">
            <summary>
            Gets or sets the amount of time to wait for a read operation to complete. Default
            value is Timeout.Infinite.
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.ConnectTimeout">
            <summary>
            Gets or sets the length of time miliseconds to wait
            for a connection succeed before giving up. The default
            is 30000 (30 seconds).
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.LocalEndPoint">
            <summary>
            Gets the local end point of the socket
            </summary></member>
        <member name="P:System.Net.FtpClient.FtpSocketStream.RemoteEndPoint">
            <summary>
            Gets the remote end point of the socket
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.OnValidateCertificate(System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Fires the SSL certificate validation event
            </summary>
            <param name="certificate">Certificate being validated</param>
            <param name="chain">Certificate chain</param>
            <param name="errors">Policy errors if any</param>
            <returns>True if it was accepted, false otherwise</returns></member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Throws an InvalidOperationException
            </summary>
            <param name="offset">Ignored</param>
            <param name="origin">Ignored</param>
            <returns></returns></member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.SetLength(System.Int64)">
            <summary>
            Throws an InvalidOperationException
            </summary>
            <param name="value">Ignored</param></member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.Flush">
            <summary>
            Flushes the stream
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.RawSocketRead(System.Byte[])">
            <summary>
            Bypass the stream and read directly off the socket.
            </summary>
            <param name="buffer">The buffer to read into</param>
            <returns>The number of bytes read</returns></member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream
            </summary>
            <param name="buffer">Buffer to read into</param>
            <param name="offset">Where in the buffer to start</param>
            <param name="count">Number of bytes to be read</param>
            <returns></returns></member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.ReadLine(System.Text.Encoding)">
            <summary>
            Reads a line from the socket
            </summary>
            <returns>A line from the stream, null if there is nothing to read</returns></member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the stream
            </summary>
            <param name="buffer">Buffer to write to stream</param>
            <param name="offset">Where in the buffer to start</param>
            <param name="count">Number of bytes to be read</param></member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.WriteLine(System.Text.Encoding,System.String)">
            <summary>
            Writes a line to the stream using the specified encoding
            </summary>
            <param name="encoding">Encoding used for writing the line</param>
            <param name="buf">The data to write</param></member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.Dispose">
            <summary>
            Disposes the stream
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.Close">
            <summary>
            Disconnects from server
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)">
            <summary>
            Sets socket options on the underlying socket
            </summary>
            <param name="level">SocketOptionLevel</param>
            <param name="name">SocketOptionName</param>
            <param name="value">SocketOptionValue</param></member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.Connect(System.String,System.Int32,System.Net.FtpClient.FtpIpVersion)">
            <summary>
            Connect to the specified host
            </summary>
            <param name="host">The host to connect to</param>
            <param name="port">The port to connect to</param>
            <param name="ipVersions">Internet Protocol versions to support durring the connection phase</param></member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.ActivateEncryption(System.String)">
            <summary>
            Activates SSL on this stream using default protocols. Fires the ValidateCertificate event.
            If this event is not handled and there are SslPolicyErrors present, the certificate will
            not be accepted.
            </summary>
            <param name="targethost">The host to authenticate the certiciate against</param></member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.ActivateEncryption(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>
            Activates SSL on this stream using default protocols. Fires the ValidateCertificate event.
            If this event is not handled and there are SslPolicyErrors present, the certificate will
            not be accepted.
            </summary>
            <param name="targethost">The host to authenticate the certiciate against</param>
            <param name="clientCerts">A collection of client certificates to use when authenticating the SSL stream</param></member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.ActivateEncryption(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols)">
            <summary>
            Activates SSL on this stream using the specified protocols. Fires the ValidateCertificate event.
            If this event is not handled and there are SslPolicyErrors present, the certificate will
            not be accepted.
            </summary>
            <param name="targethost">The host to authenticate the certiciate against</param>
            <param name="clientCerts">A collection of client certificates to use when authenticating the SSL stream</param>
            <param name="sslProtocols">A bitwise parameter for supported encryption protocols.</param></member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.Listen(System.Net.IPAddress,System.Int32)">
            <summary>
            Instructs this stream to listen for connections on the specified address and port
            </summary>
            <param name="address">The address to listen on</param>
            <param name="port">The port to listen on</param></member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.Accept">
            <summary>
            Accepts a connection from a listening socket
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.BeginAccept(System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously accepts a connection from a listening socket
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns></member>
        <member name="M:System.Net.FtpClient.FtpSocketStream.EndAccept(System.IAsyncResult)">
            <summary>
            Completes a BeginAccept() operation
            </summary>
            <param name="ar">IAsyncResult returned from BeginAccept</param></member>
        <member name="T:System.Net.FtpClient.FtpTrace">
            <summary>
            Used for transaction logging and debug information.
            </summary>
            <example>The following example illustrates how to assist in debugging
            System.Net.FtpClient by getting a transaction log from the server.
            <code source="..\Examples\Debug.cs" lang="cs" />
            </example></member>
        <member name="P:System.Net.FtpClient.FtpTrace.FlushOnWrite">
            <summary>
            Gets or sets whether the trace listeners should be flushed or not
            after writing to them. Default value is false.
            </summary></member>
        <member name="M:System.Net.FtpClient.FtpTrace.AddListener(System.Diagnostics.TraceListener)">
            <summary>
            Add a TraceListner to the collection. You can use one of the predefined
            TraceListeners in the System.Diagnostics namespace, such as ConsoleTraceListener
            for logging to the console, or you can write your own deriving from
            System.Diagnostics.TraceListener.
            </summary>
            <param name="listener">The TraceListener to add to the collection</param></member>
        <member name="M:System.Net.FtpClient.FtpTrace.RemoveListener(System.Diagnostics.TraceListener)">
            <summary>
            Remove the specified TraceListener from the collection
            </summary>
            <param name="listener">The TraceListener to remove from the collection.</param></member>
        <member name="M:System.Net.FtpClient.FtpTrace.Write(System.String,System.Object[])">
            <summary>
            Write to the TraceListeners.
            </summary>
            <param name="message">The message to write</param>
            <param name="args">Optional variables if using a format string similar to string.Format()</param></member>
        <member name="M:System.Net.FtpClient.FtpTrace.Write(System.String)">
            <summary>
            Write to the TraceListeners
            </summary>
            <param name="message">The message to write</param></member>
        <member name="M:System.Net.FtpClient.FtpTrace.WriteLine(System.String,System.Object[])">
            <summary>
            Write to the TraceListeners.
            </summary>
            <param name="message">The message to write</param>
            <param name="args">Optional variables if using a format string similar to string.Format()</param></member>
        <member name="M:System.Net.FtpClient.FtpTrace.WriteLine(System.String)">
            <summary>
            Write to the TraceListeners
            </summary>
            <param name="message">The message to write</param></member>
        <member name="T:System.Net.FtpClient.IFtpClient">
            <summary>
            FTP Control Connection. Speaks the FTP protocol with the server and
            provides facilities for performing basic transactions.
            Debugging problems with FTP transactions is much easier to do when
            you can see exactly what is sent to the server and the reply
            System.Net.FtpClient gets in return. Please review the Debug example
            below for information on how to add TraceListeners for capturing
            the convorsation between System.Net.FtpClient and the server.
            </summary>
            <example>The following example illustrates how to assist in debugging
            System.Net.FtpClient by getting a transaction log from the server.
            <code source="..\Examples\Debug.cs" lang="cs" />
            </example>
            <example>The following example demonstrates adding a custom file
            listing parser in the event that you encounter a list format
            not already supported.
            <code source="..\Examples\CustomParser.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to validate
            a SSL certificate when using SSL/TLS.
            <code source="..\Examples\ValidateCertificate.cs" lang="cs" />
            </example>
            <example>The following example demonsrates how to download a file.
            <code source="..\Examples\OpenRead.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to download a file
            using a URI object.
            <code source="..\Examples\OpenReadURI.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to upload a file.
            <code source="..\Examples\OpenWrite.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to upload a file
            using a URI object.
            <code source="..\Examples\OpenWriteURI.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to append to a file.
            <code source="..\Examples\OpenAppend.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to append to a file
            using a URI object.
            <code source="..\Examples\OpenAppendURI.cs" lang="cs" />
            </example>
            <example>The following example demonstrates how to get a file
            listing from the server.
            <code source="..\Examples\GetListing.cs" lang="cs" />
            </example></member>
        <member name="P:System.Net.FtpClient.IFtpClient.IsDisposed">
            <summary>
            Gets a value indicating if this object has already been disposed.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.InternetProtocolVersions">
            <summary>
            Flags specifying which versions of the internet protocol to
            support when making a connection. All addresses returned during
            name resolution are tried until a successful connection is made.
            You can fine tune which versions of the internet protocol to use
            by adding or removing flags here. I.e., setting this property
            to FtpIpVersion.IPv4 will cause the connection process to
            ignore IPv6 addresses. The default value is ANY version.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.SocketPollInterval">
            <summary>
            Gets or sets the length of time in miliseconds
            that must pass since the last socket activity
            before calling Poll() on the socket to test for
            connectivity. Setting this interval too low will
            have a negative impact on perfomance. Setting this
            interval to 0 disables Poll()'ing all together.
            The default value is 15 seconds.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.StaleDataCheck">
            <summary>
            Gets or sets a value indicating whether a test should be performed to
            see if there is stale (unrequested data) sitting on the socket. In some
            cases the control connection may time out but before the server closes
            the connection it might send a 4xx response that was unexpected and
            can cause synchronization errors with transactions. To avoid this
            problem the Execute() method checks to see if there is any data
            available on the socket before executing a command. On Azure hosting
            platforms this check can cause an exception to be thrown. In order
            to work around the exception you can set this property to false
            which will skip the test entirely however doing so eliminates the
            best effort attempt of detecting such scenarios. See this thread
            for more details about the Azure problem:
            https://netftp.codeplex.com/discussions/535879
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.IsConnected">
            <summary>
            Gets a value indicating if the connection is alive
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.EnableThreadSafeDataConnections">
            <summary>
            When this value is set to true (default) the control connection
            is cloned and a new connection the server is established for the
            data channel operation. This is a thread safe approach to make
            asynchronous operations on a single control connection transparent
            to the developer.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.Encoding">
            <summary>
            Gets or sets the text encoding being used when talking with the server. The default
            value is Encoding.ASCII however upon connection, the client checks
            for UTF8 support and if it's there this property is switched over to
            Encoding.UTF8. Manually setting this value overrides automatic detection
            based on the FEAT list; if you change this value it's always used
            regardless of what the server advertises, if anything.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.Host">
            <summary>
            The server to connect to
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.Port">
            <summary>
            The port to connect to. If this value is set to 0 (Default) the port used
            will be determined by the type of SSL used or if no SSL is to be used it
            will automatically connect to port 21.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.Credentials">
            <summary>
            Credentials used for authentication
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.MaximumDereferenceCount">
            <summary>
            Gets or sets a value that controls the maximum depth
            of recursion that DereferenceLink() will follow symbolic
            links before giving up. You can also specify the value
            to be used as one of the overloaded parameters to the
            DereferenceLink() method. The default value is 20. Specifying
            -1 here means inifinitly try to resolve a link. This is
            not recommended for obvious reasons (stack overflow).
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.ClientCertificates">
            <summary>
            Client certificates to be used in SSL authentication process
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.DataConnectionType">
            <summary>
            Data connection type, default is AutoPassive which tries
            a connection with EPSV first and if it fails then tries
            PASV before giving up. If you know exactly which kind of
            connection you need you can slightly increase performance
            by defining a speicific type of passive or active data
            connection here.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.UngracefullDisconnection">
            <summary>
            Disconnect from the server without sending QUIT. This helps
            work around IOExceptions caused by buggy connection resets
            when closing the control connection.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.ConnectTimeout">
            <summary>
            Gets or sets the length of time in miliseconds to wait for a connection
            attempt to succeed before giving up. Default is 15000 (15 seconds).
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.ReadTimeout">
            <summary>
            Gets or sets the length of time wait in miliseconds for data to be
            read from the underlying stream. The default value is 15000 (15 seconds).
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.DataConnectionConnectTimeout">
            <summary>
            Gets or sets the length of time in miliseconds for a data connection
            to be established before giving up. Default is 15000 (15 seconds).
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.DataConnectionReadTimeout">
            <summary>
            Gets or sets the length of time in miliseconds the data channel
            should wait for the server to send data. Default value is
            15000 (15 seconds).
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.SocketKeepAlive">
            <summary>
            Gets or sets a value indicating if SocketOption.KeepAlive should be set on
            the underlying stream's socket. If the connection is alive, the option is
            adjusted in real-time. The value is stored and the KeepAlive option is set
            accordingly upon any new connections. The value set here is also applied to
            all future data streams. It has no affect on cloned control connections or
            data connections already in progress. The default value is false.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.Capabilities">
            <summary>
            Gets the server capabilties represented by flags
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.HashAlgorithms">
            <summary>
            Get the hash types supported by the server, if any. This
            is a recent extension to the protocol that is not fully
            standardized and is not guarateed to work. See here for
            more details:
            http://tools.ietf.org/html/draft-bryan-ftpext-hash-02
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.EncryptionMode">
            <summary>
            Type of SSL to use, or none. Default is none. Explicit is TLS, Implicit is SSL.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.DataConnectionEncryption">
            <summary>
            Indicates if data channel transfers should be encrypted. Only valid if EncryptionMode
            property is not equal to FtpSslMode.None.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpClient.SystemType">
            <summary>
            Gets the type of system/server that we're
            connected to.
            </summary></member>
        <member name="E:System.Net.FtpClient.IFtpClient.ValidateCertificate">
            <summary>
            Event is fired to validate SSL certificates. If this event is
            not handled and there are errors validating the certificate
            the connection will be aborted.
            </summary>
            <example><code source="..\Examples\ValidateCertificate.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.HasFeature(System.Net.FtpClient.FtpCapability)">
            <summary>
            Performs a bitwise and to check if the specified
            flag is set on the Capabilities enum property.
            </summary>
            <param name="cap">The capability to check for</param>
            <returns>True if the feature was found</returns></member>
        <member name="M:System.Net.FtpClient.IFtpClient.Execute(System.String,System.Object[])">
            <summary>
            Executes a command
            </summary>
            <param name="command">The command to execute with optional format place holders</param>
            <param name="args">Format parameters to the command</param>
            <returns>The servers reply to the command</returns>
            <example><code source="..\Examples\Execute.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.Execute(System.String)">
            <summary>
            Executes a command
            </summary>
            <param name="command">The command to execute</param>
            <returns>The servers reply to the command</returns>
            <example><code source="..\Examples\Execute.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginExecute(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Performs an asynchronouse execution of the specified command
            </summary>
            <param name="command">The command to execute</param>
            <param name="callback">The AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginExecute.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndExecute(System.IAsyncResult)">
            <summary>
            Ends an asynchronous command
            </summary>
            <param name="ar">IAsyncResult returned from BeginExecute</param>
            <returns>FtpReply object (never null).</returns>
            <example><code source="..\Examples\BeginExecute.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.Connect">
            <summary>
            Connect to the server. Throws ObjectDisposedException if this object has been disposed.
            </summary>
            <example><code source="..\Examples\Connect.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginConnect(System.AsyncCallback,System.Object)">
            <summary>
            Initiates a connection to the server
            </summary>
            <param name="callback">AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginConnect.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndConnect(System.IAsyncResult)">
            <summary>
            Ends an asynchronous connection attempt to the server
            </summary>
            <param name="ar">IAsyncResult returned from BeginConnect()</param>
            <example><code source="..\Examples\BeginConnect.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.Disconnect">
            <summary>
            Disconnect from the server
            </summary></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginDisconnect(System.AsyncCallback,System.Object)">
            <summary>
            Initiates a disconnection on the server
            </summary>
            <param name="callback">AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDisconnect.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndDisconnect(System.IAsyncResult)">
            <summary>
            Ends a call to BeginDisconnect
            </summary>
            <param name="ar">IAsyncResult returned from BeginDisconnect</param>
            <example><code source="..\Examples\BeginConnect.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.OpenRead(System.String)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <returns>A stream for reading the file on the server</returns>
            <example><code source="..\Examples\OpenRead.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.OpenRead(System.String,System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <returns>A stream for reading the file on the server</returns>
            <example><code source="..\Examples\OpenRead.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.OpenRead(System.String,System.Int64)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="restart">Resume location</param>
            <returns>A stream for reading the file on the server</returns>
            <example><code source="..\Examples\OpenRead.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.OpenRead(System.String,System.Net.FtpClient.FtpDataType,System.Int64)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="restart">Resume location</param>
            <returns>A stream for reading the file on the server</returns>
            <example><code source="..\Examples\OpenRead.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginOpenRead(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenRead.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginOpenRead(System.String,System.Net.FtpClient.FtpDataType,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenRead.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginOpenRead(System.String,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="restart">Resume location</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenRead.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginOpenRead(System.String,System.Net.FtpClient.FtpDataType,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for reading
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="restart">Resume location</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenRead.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndOpenRead(System.IAsyncResult)">
            <summary>
            Ends a call to BeginOpenRead()
            </summary>
            <param name="ar">IAsyncResult returned from BeginOpenRead()</param>
            <returns>A readable stream</returns>
            <example><code source="..\Examples\BeginOpenRead.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.OpenWrite(System.String)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <returns>A stream for writing to the file on the server</returns>
            <example><code source="..\Examples\OpenWrite.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.OpenWrite(System.String,System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <returns>A stream for writing to the file on the server</returns>
            <example><code source="..\Examples\OpenWrite.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginOpenWrite(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenWrite.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginOpenWrite(System.String,System.Net.FtpClient.FtpDataType,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenWrite.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndOpenWrite(System.IAsyncResult)">
            <summary>
            Ends a call to BeginOpenWrite()
            </summary>
            <param name="ar">IAsyncResult returned from BeginOpenWrite()</param>
            <returns>A writable stream</returns>
            <example><code source="..\Examples\BeginOpenWrite.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.OpenAppend(System.String)">
            <summary>
            Opens the specified file to be appended to
            </summary>
            <param name="path">The full or relative path to the file to be opened</param>
            <returns>A stream for writing to the file on the server</returns>
            <example><code source="..\Examples\OpenAppend.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.OpenAppend(System.String,System.Net.FtpClient.FtpDataType)">
            <summary>
            Opens the specified file to be appended to
            </summary>
            <param name="path">The full or relative path to the file to be opened</param>
            <param name="type">ASCII/Binary</param>
            <returns>A stream for writing to the file on the server</returns>
            <example><code source="..\Examples\OpenAppend.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginOpenAppend(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenAppend.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginOpenAppend(System.String,System.Net.FtpClient.FtpDataType,System.AsyncCallback,System.Object)">
            <summary>
            Opens the specified file for writing
            </summary>
            <param name="path">Full or relative path of the file</param>
            <param name="type">ASCII/Binary</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginOpenAppend.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndOpenAppend(System.IAsyncResult)">
            <summary>
            Ends a call to BeginOpenAppend()
            </summary>
            <param name="ar">IAsyncResult returned from BeginOpenWrite()</param>
            <returns>A writable stream</returns>
            <example><code source="..\Examples\BeginOpenAppend.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.DereferenceLink(System.Net.FtpClient.FtpListItem)">
            <summary>
            Recursively dereferences a symbolic link. See the
            MaximumDereferenceCount property for controlling
            how deep this method will recurse before giving up.
            </summary>
            <param name="item">The symbolic link</param>
            <returns>FtpListItem, null if the link can't be dereferenced</returns>
            <example><code source="..\Examples\DereferenceLink.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.DereferenceLink(System.Net.FtpClient.FtpListItem,System.Int32)">
            <summary>
            Recursively dereferences a symbolic link
            </summary>
            <param name="item">The symbolic link</param>
            <param name="recMax">The maximum depth of recursion that can be performed before giving up.</param>
            <returns>FtpListItem, null if the link can't be dereferenced</returns>
            <example><code source="..\Examples\DereferenceLink.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginDereferenceLink(System.Net.FtpClient.FtpListItem,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Derefence a FtpListItem object asynchronously
            </summary>
            <param name="item">The item to derefence</param>
            <param name="recMax">Maximum recursive calls</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDereferenceLink.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginDereferenceLink(System.Net.FtpClient.FtpListItem,System.AsyncCallback,System.Object)">
            <summary>
            Derefence a FtpListItem object asynchronously. See the
            MaximumDereferenceCount property for controlling
            how deep this method will recurse before giving up.
            </summary>
            <param name="item">The item to derefence</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDereferenceLink.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndDereferenceLink(System.IAsyncResult)">
            <summary>
            Ends a call to BeginDereferenceLink
            </summary>
            <param name="ar">IAsyncResult</param>
            <returns>FtpListItem, null if the link can't be dereferenced</returns>
            <example><code source="..\Examples\BeginDereferenceLink.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetObjectInfo(System.String)">
            <summary>
            Returns information about a file system object. You should check the Capabilities
            flags for the FtpCapability.MLSD flag before calling this method. Failing to do
            so will result in an InvalidOperationException being thrown when the server
            does not support machine listings. Returns null if the server response can't
            be parsed or the server returns a failure completion code. The error for a failure
            is logged with FtpTrace. No exception is thrown on error because that would negate
            the usefullness of this method for checking for the existence of an object.
            </summary>
            <param name="path">The path of the object to retrieve information about</param>
            <returns>A FtpListItem object</returns></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetObjectInfo(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Returns information about a file system object. You should check the Capabilities
            flags for the FtpCapability.MLSD flag before calling this method. Failing to do
            so will result in an InvalidOperationException being thrown when the server
            does not support machine listings. Returns null if the server response can't
            be parsed or the server returns a failure completion code. The error for a failure
            is logged with FtpTrace. No exception is thrown on error because that would negate
            the usefullness of this method for checking for the existence of an object.
            </summary>
            <param name="path">Path of the item to retrieve information about</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndGetObjectInfo(System.IAsyncResult)">
            <summary>
            Ends a call to BeginGetObjectInfo
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetObjectInfo</param>
            <returns>FtpListItem if the command succeeded, null if there was a problem.</returns></member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetListing">
            <summary>
            Gets a file listing from the server. Each FtpListItem object returned
            contains information about the file that was able to be retrieved. If
            a DateTime property is equal to DateTime.MinValue then it means the
            date in question was not able to be retrieved. If the Size property
            is equal to 0 then it means the size of the object could also not
            be retrieved.
            </summary>
            <returns>An array of FtpListItem objects</returns>
            <example><code source="..\Examples\GetListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetListing(System.String)">
            <summary>
            Gets a file listing from the server. Each FtpListItem object returned
            contains information about the file that was able to be retrieved. If
            a DateTime property is equal to DateTime.MinValue then it means the
            date in question was not able to be retrieved. If the Size property
            is equal to 0 then it means the size of the object could also not
            be retrieved.
            </summary>
            <param name="path">The path of the directory to list</param>
            <returns>An array of FtpListItem objects</returns>
            <example><code source="..\Examples\GetListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetListing(System.String,System.Net.FtpClient.FtpListOption)">
            <summary>
            Gets a file listing from the server. Each FtpListItem object returned
            contains information about the file that was able to be retrieved. If
            a DateTime property is equal to DateTime.MinValue then it means the
            date in question was not able to be retrieved. If the Size property
            is equal to 0 then it means the size of the object could also not
            be retrieved.
            </summary>
            <param name="path">The path of the directory to list</param>
            <param name="options">Options that dictacte how a list is performed and what information is gathered.</param>
            <returns>An array of FtpListItem objects</returns>
            <example><code source="..\Examples\GetListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetListing(System.AsyncCallback,System.Object)">
            <summary>
            Gets a file listing from the server asynchronously
            </summary>
            <param name="callback">AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetListing(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Gets a file listing from the server asynchronously
            </summary>
            <param name="path">The path to list</param>
            <param name="callback">AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetListing(System.String,System.Net.FtpClient.FtpListOption,System.AsyncCallback,System.Object)">
            <summary>
            Gets a file listing from the server asynchronously
            </summary>
            <param name="path">The path to list</param>
            <param name="options">Options that dictate how the list operation is performed</param>
            <param name="callback">AsyncCallback method</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndGetListing(System.IAsyncResult)">
            <summary>
            Ends an asynchronous file listing
            </summary>
            <param name="ar">IAsyncResult return from BeginGetListing()</param>
            <returns>An array of items retrieved in the listing</returns>
            <example><code source="..\Examples\BeginGetListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetNameListing">
            <summary>
            Returns a file/directory listing using the NLST command.
            </summary>
            <returns>A string array of file and directory names if any were returned.</returns></member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetNameListing(System.String)">
            <summary>
            Returns a file/directory listing using the NLST command.
            </summary>
            <param name="path">The path of the directory to list</param>
            <returns>A string array of file and directory names if any were returned.</returns>
            <example><code source="..\Examples\GetNameListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetNameListing(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously gets a list of file and directory names for the specified path.
            </summary>
            <param name="path">The path of the directory to list</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetNameListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetNameListing(System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously gets a list of file and directory names for the specified path.
            </summary>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetNameListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndGetNameListing(System.IAsyncResult)">
            <summary>
            Ends a call to BeginGetNameListing()
            </summary>
            <param name="ar">IAsyncResult object returned from BeginGetNameListing</param>
            <returns>An array of file and directory names if any were returned.</returns>
            <example><code source="..\Examples\BeginGetNameListing.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.SetWorkingDirectory(System.String)">
            <summary>
            Sets the work directory on the server
            </summary>
            <param name="path">The path of the directory to change to</param>
            <example><code source="..\Examples\SetWorkingDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginSetWorkingDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously changes the working directory on the server
            </summary>
            <param name="path">The directory to change to</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginSetWorkingDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndSetWorkingDirectory(System.IAsyncResult)">
            <summary>
            Ends asynchronous directory change
            </summary>
            <param name="ar">IAsyncResult returned from BeginSetWorkingDirectory</param>
            <example><code source="..\Examples\BeginSetWorkingDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetWorkingDirectory">
            <summary>
            Gets the current working directory
            </summary>
            <returns>The current working directory, ./ if the response couldn't be parsed.</returns>
            <example><code source="..\Examples\GetWorkingDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetWorkingDirectory(System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously retrieves the working directory
            </summary>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetWorkingDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndGetWorkingDirectory(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to retrieve the working directory
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetWorkingDirectory</param>
            <returns>The current working directory</returns>
            <example><code source="..\Examples\BeginGetWorkingDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetFileSize(System.String)">
            <summary>
            Gets the size of the file
            </summary>
            <param name="path">The full or relative path of the file</param>
            <returns>-1 if the command fails, otherwise the file size</returns>
            <example><code source="..\Examples\GetFileSize.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetFileSize(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously retrieve the size of the specified file
            </summary>
            <param name="path">The full or relative path of the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetFileSize.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndGetFileSize(System.IAsyncResult)">
            <summary>
            Ends a call to BeginGetFileSize()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetFileSize</param>
            <returns>The size of the file, -1 if there was a problem.</returns>
            <example><code source="..\Examples\BeginGetFileSize.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetModifiedTime(System.String)">
            <summary>
            Gets the modified time of the file
            </summary>
            <param name="path">The full path to the file</param>
            <returns>The modified time, DateTime.MinValue if there was a problem</returns>
            <example><code source="..\Examples\GetModifiedTime.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetModifiedTime(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Gets the modified time of the file
            </summary>
            <param name="path">The full path to the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginGetModifiedTime.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndGetModifiedTime(System.IAsyncResult)">
            <summary>
            Ends a call to BeginGetModifiedTime()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetModifiedTime()</param>
            <returns>The modified time, DateTime.MinValue if there was a problem</returns>
            <example><code source="..\Examples\BeginGetModifiedTime.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.DeleteFile(System.String)">
            <summary>
            Deletes a file on the server
            </summary>
            <param name="path">The full or relative path to the file</param>
            <example><code source="..\Examples\DeleteFile.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously deletes a file from the server
            </summary>
            <param name="path">The full or relative path to the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDeleteFile.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndDeleteFile(System.IAsyncResult)">
            <summary>
            Ends a call to BeginDeleteFile
            </summary>
            <param name="ar">IAsyncResult returned from BeginDeleteFile</param>
            <example><code source="..\Examples\BeginDeleteFile.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.DeleteDirectory(System.String)">
            <summary>
            Deletes the specified directory on the server.
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <example><code source="..\Examples\DeleteDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Delets the specified directory on the server
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <param name="force">If the directory is not empty, remove its contents</param>
            <example><code source="..\Examples\DeleteDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.DeleteDirectory(System.String,System.Boolean,System.Net.FtpClient.FtpListOption)">
            <summary>
            Deletes the specified directory on the server
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <param name="force">If the directory is not empty, remove its contents</param>
            <param name="options">FtpListOptions for controlling how the directory
            contents are retrieved with the force option is true. If you experience problems
            the file listing can be fine tuned through this parameter.</param>
            <example><code source="..\Examples\DeleteDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginDeleteDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously removes a directory from the server
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDeleteDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginDeleteDirectory(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously removes a directory from the server
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <param name="force">If the directory is not empty, remove its contents</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDeleteDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginDeleteDirectory(System.String,System.Boolean,System.Net.FtpClient.FtpListOption,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously removes a directory from the server
            </summary>
            <param name="path">The full or relative path of the directory to delete</param>
            <param name="force">If the directory is not empty, remove its contents</param>
            <param name="options">FtpListOptions for controlling how the directory
            contents are retrieved with the force option is true. If you experience problems
            the file listing can be fine tuned through this parameter.</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginDeleteDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndDeleteDirectory(System.IAsyncResult)">
            <summary>
            Ends a call to BeginDeleteDirectory()
            </summary>
            <param name="ar">IAsyncResult returned from BeginDeleteDirectory</param>
            <example><code source="..\Examples\BeginDeleteDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.DirectoryExists(System.String)">
            <summary>
            Tests if the specified directory exists on the server. This
            method works by trying to change the working directory to
            the path specified. If it succeeds, the directory is changed
            back to the old working directory and true is returned. False
            is returned otherwise and since the CWD failed it is assumed
            the working directory is still the same.
            </summary>
            <param name="path">The path of the directory</param>
            <returns>True if it exists, false otherwise.</returns>
            <example><code source="..\Examples\DirectoryExists.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginDirectoryExists(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Checks if a directory exists on the server asynchronously.
            </summary>
            <returns>IAsyncResult</returns>
            <param name="path">The full or relative path of the directory to check for</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <example><code source="..\Examples\BeginDirectoryExists.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndDirectoryExists(System.IAsyncResult)">
            <summary>
            Ends a call to BeginDirectoryExists
            </summary>
            <param name="ar">IAsyncResult returned from BeginDirectoryExists</param>
            <returns>True if the directory exists. False otherwise.</returns>
            <example><code source="..\Examples\BeginDirectoryExists.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.FileExists(System.String)">
            <summary>
            Checks if a file exsts on the server by taking a
            file listing of the parent directory in the path
            and comparing the results the path supplied.
            </summary>
            <param name="path">The full or relative path to the file</param>
            <returns>True if the file exists</returns>
            <example><code source="..\Examples\FileExists.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.FileExists(System.String,System.Net.FtpClient.FtpListOption)">
            <summary>
            Checks if a file exsts on the server by taking a
            file listing of the parent directory in the path
            and comparing the results the path supplied.
            </summary>
            <param name="path">The full or relative path to the file</param>
            <param name="options">Options for controling the file listing used to
            determine if the file exists.</param>
            <returns>True if the file exists</returns>
            <example><code source="..\Examples\FileExists.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginFileExists(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Checks if a file exsts on the server by taking a
            file listing of the parent directory in the path
            and comparing the results the path supplied.
            </summary>
            <param name="path">The full or relative path to the file</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginFileExists.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginFileExists(System.String,System.Net.FtpClient.FtpListOption,System.AsyncCallback,System.Object)">
            <summary>
            Checks if a file exsts on the server by taking a
            file listing of the parent directory in the path
            and comparing the results the path supplied.
            </summary>
            <param name="path">The full or relative path to the file</param>
            <param name="options">Options for controling the file listing used to
            determine if the file exists.</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginFileExists.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndFileExists(System.IAsyncResult)">
            <summary>
            Ends a call to BeginFileExists
            </summary>
            <param name="ar">IAsyncResult returned from BeginFileExists</param>
            <returns>True if the file exists</returns>
            <example><code source="..\Examples\BeginFileExists.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.CreateDirectory(System.String)">
            <summary>
            Creates a directory on the server. If the preceding
            directories do not exist they are created.
            </summary>
            <param name="path">The full or relative path to the new directory</param>
            <example><code source="..\Examples\CreateDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.CreateDirectory(System.String,System.Boolean)">
            <summary>
            Creates a directory on the server
            </summary>
            <param name="path">The full or relative path to the directory to create</param>
            <param name="force">Try to force all non-existant pieces of the path to be created</param>
            <example><code source="..\Examples\CreateDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Creates a directory asynchronously
            </summary>
            <param name="path">The full or relative path to the directory to create</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginCreateDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginCreateDirectory(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Creates a directory asynchronously
            </summary>
            <param name="path">The full or relative path to the directory to create</param>
            <param name="force">Try to create the whole path if the preceding directories do not exist</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginCreateDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndCreateDirectory(System.IAsyncResult)">
            <summary>
            Ends a call to BeginCreateDirectory
            </summary>
            <param name="ar">IAsyncResult returned from BeginCreateDirectory</param>
            <example><code source="..\Examples\BeginCreateDirectory.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.Rename(System.String,System.String)">
            <summary>
            Renames an object on the remote file system.
            </summary>
            <param name="path">The full or relative path to the object</param>
            <param name="dest">The old or new full or relative path including the new name of the object</param>
            <example><code source="..\Examples\Rename.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginRename(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously renames an object on the server
            </summary>
            <param name="path">The full or relative path to the object</param>
            <param name="dest">The old or new full or relative path including the new name of the object</param>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns>
            <example><code source="..\Examples\BeginRename.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndRename(System.IAsyncResult)">
            <summary>
            Ends a call to BeginRename
            </summary>
            <param name="ar">IAsyncResult returned from BeginRename</param>
            <example><code source="..\Examples\BeginRename.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetHashAlgorithm">
            <summary>
            Gets the currently selected hash algorith for the HASH
            command. This feature is experimental. See this link
            for details:
            http://tools.ietf.org/html/draft-bryan-ftpext-hash-02
            </summary>
            <returns>The FtpHashType flag or FtpHashType.NONE if there was a problem.</returns>
            <example><code source="..\Examples\GetHashAlgorithm.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetHashAlgorithm(System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously get the hash algorithm being used by the HASH command.
            </summary>
            <param name="callback">Async callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndGetHashAlgorithm(System.IAsyncResult)">
            <summary>
            Ends a call to BeginGetHashAlgorithm
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetHashAlgorithm</param></member>
        <member name="M:System.Net.FtpClient.IFtpClient.SetHashAlgorithm(System.Net.FtpClient.FtpHashAlgorithm)">
            <summary>
            Tells the server which hash algorith to use
            for the HASH command. If you specifiy an
            algorithm not listed in FtpClient.HashTypes
            a NotImplemented() exectpion will be thrown
            so be sure to query that list of Flags before
            selecting a hash algorithm. Support for the
            HASH command is experimental. Please see
            the following link for more details:
            http://tools.ietf.org/html/draft-bryan-ftpext-hash-02
            </summary>
            <param name="type">Hash Algorithm</param>
            <example><code source="..\Examples\SetHashAlgorithm.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginSetHashAlgorithm(System.Net.FtpClient.FtpHashAlgorithm,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously sets the hash algorithm type to be used with the HASH command.
            </summary>
            <param name="type">Hash algorithm to use</param>
            <param name="callback">Async Callback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndSetHashAlgorithm(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginSetHashAlgorithm
            </summary>
            <param name="ar">IAsyncResult returned from BeginSetHashAlgorithm</param></member>
        <member name="M:System.Net.FtpClient.IFtpClient.GetHash(System.String)">
            <summary>
            Gets the hash of an object on the server using the
            currently selected hash algorithm. Supported
            algorithms, if any, are available in the HashAlgorithms
            property. You should confirm that it's not equal
            to FtpHashAlgorithm.NONE before calling this method
            otherwise the server trigger a FtpCommandException()
            due to a lack of support for the HASH command. You can
            set the algorithm using the SetHashAlgorithm() method and
            you can query the server for the current hash algorithm
            using the GetHashAlgorithm() method.
            This feature is experimental and based on the following draft:
            http://tools.ietf.org/html/draft-bryan-ftpext-hash-02
            </summary>
            <param name="path">Full or relative path of the object to compute the hash for.</param>
            <returns>The hash of the file.</returns>
            <example><code source="..\Examples\GetHash.cs" lang="cs" /></example></member>
        <member name="M:System.Net.FtpClient.IFtpClient.BeginGetHash(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously retrieves the hash for the specified file
            </summary>
            <param name="path">The file you want the server to compute the hash for</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State object</param>
            <returns>IAsyncResult</returns></member>
        <member name="M:System.Net.FtpClient.IFtpClient.EndGetHash(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginGetHash
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetHash</param></member>
        <member name="M:System.Net.FtpClient.IFtpClient.DisableUTF8">
            <summary>
            Disables UTF8 support and changes the Encoding property
            back to ASCII. If the server returns an error when trying
            to turn UTF8 off a FtpCommandException will be thrown.
            </summary></member>
        <member name="T:System.Net.FtpClient.IFtpListItem">
            <summary>
            Represents a file system object on the server
            </summary>
            <example><code source="..\Examples\CustomParser.cs" lang="cs" /></example></member>
        <member name="P:System.Net.FtpClient.IFtpListItem.Type">
            <summary>
            Gets the type of file system object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpListItem.FullName">
            <summary>
            Gets the full path name to the object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpListItem.Name">
            <summary>
            Gets the name of the object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpListItem.LinkTarget">
            <summary>
            Gets the target a symbolic link points to. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpListItem.LinkObject">
            <summary>
            Gets the object the LinkTarget points to. This property is null unless pass the
            FtpListOption.DerefLink flag in which case GetListing() will try to resolve
            the target itself.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpListItem.Modified">
            <summary>
            Gets the last write time of the object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpListItem.Created">
            <summary>
            Gets the created date of the object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpListItem.Size">
            <summary>
            Gets the size of the object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpListItem.SpecialPermissions">
            <summary>
            Gets special UNIX permissions such as Stiky, SUID and SGID. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpListItem.OwnerPermissions">
            <summary>
            Gets the owner permissions. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpListItem.GroupPermissions">
            <summary>
            Gets the group permissions. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpListItem.OthersPermissions">
            <summary>
            Gets the others permissions. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpListItem.Input">
            <summary>
            Gets the input string that was parsed to generate the
            values in this object. This property can be
            set however this functionality is intended to be done by
            custom parsers.
            </summary></member>
        <member name="M:System.Net.FtpClient.IFtpListItem.ToString">
            <summary>
            Returns a string representation of this object and its properties
            </summary>
            <returns>A string value</returns></member>
        <member name="T:System.Net.FtpClient.IFtpReply">
            <summary>
            Represents a reply to an event on the server
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpReply.Type">
            <summary>
            The type of response received from the last command executed
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpReply.Code">
            <summary>
            The status code of the response
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpReply.Message">
            <summary>
            The message, if any, that the server sent with the response
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpReply.InfoMessages">
            <summary>
            Informational messages sent from the server
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpReply.Success">
            <summary>
            General success or failure of the last command executed
            </summary></member>
        <member name="P:System.Net.FtpClient.IFtpReply.ErrorMessage">
            <summary>
            Gets the error message including any informational output
            that was sent by the server. Sometimes the final response
            line doesn't contain anything informative as to what was going
            on with the server. Instead it may send information messages so
            in an effort to give as meaningful as a response as possible
            the informational messages will be included in the error.
            </summary></member>
        <member name="T:System.Net.FtpClient.Extensions.XCRC">
            <summary>
            Implementation of the non-standard XCRC command
            </summary></member>
        <member name="M:System.Net.FtpClient.Extensions.XCRC.GetXCRC(System.Net.FtpClient.FtpClient,System.String)">
            <summary>
            Get the CRC value of the specified file. This is a non-standard extension of the protocol
            and may throw a FtpCommandException if the server does not support it.
            </summary>
            <param name="client">FtpClient object</param>
            <param name="path">The path of the file you'd like the server to compute the CRC value for.</param>
            <returns>The response from the server, typically the CRC value. FtpCommandException thrown on error</returns></member>
        <member name="M:System.Net.FtpClient.Extensions.XCRC.BeginGetXCRC(System.Net.FtpClient.FtpClient,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronusly retrieve a CRC hash. The XCRC command is non-standard
            and not guaranteed to work.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns></member>
        <member name="M:System.Net.FtpClient.Extensions.XCRC.EndGetXCRC(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginGetXCRC()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetXCRC()</param>
            <returns>The CRC hash of the specified file.</returns></member>
        <member name="T:System.Net.FtpClient.Extensions.XMD5">
            <summary>
            Implementation of non-standard XMD5 command.
            </summary></member>
        <member name="M:System.Net.FtpClient.Extensions.XMD5.GetXMD5(System.Net.FtpClient.FtpClient,System.String)">
            <summary>
            Gets the MD5 hash of the specified file using XMD5. This is a non-standard extension
            to the protocol and may or may not work. A FtpCommandException will be
            thrown if the command fails.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <returns>Server response, presumably the MD5 hash.</returns></member>
        <member name="M:System.Net.FtpClient.Extensions.XMD5.BeginGetXMD5(System.Net.FtpClient.FtpClient,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronusly retrieve a MD5 hash. The XMD5 command is non-standard
            and not guaranteed to work.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns></member>
        <member name="M:System.Net.FtpClient.Extensions.XMD5.EndGetXMD5(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginGetXMD5()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetXMD5()</param>
            <returns>The MD5 hash of the specified file.</returns></member>
        <member name="T:System.Net.FtpClient.Extensions.XSHA1">
            <summary>
            Implementation of the non-standard XSHA1 command
            </summary></member>
        <member name="M:System.Net.FtpClient.Extensions.XSHA1.GetXSHA1(System.Net.FtpClient.FtpClient,System.String)">
            <summary>
            Gets the SHA-1 hash of the specified file using XSHA1. This is a non-standard extension
            to the protocol and may or may not work. A FtpCommandException will be
            thrown if the command fails.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <returns>Server response, presumably the SHA-1 hash.</returns></member>
        <member name="M:System.Net.FtpClient.Extensions.XSHA1.BeginGetXSHA1(System.Net.FtpClient.FtpClient,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronusly retrieve a SHA1 hash. The XSHA1 command is non-standard
            and not guaranteed to work.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns></member>
        <member name="M:System.Net.FtpClient.Extensions.XSHA1.EndGetXSHA1(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginGetXSHA1()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetXSHA1()</param>
            <returns>The SHA-1 hash of the specified file.</returns></member>
        <member name="T:System.Net.FtpClient.Extensions.XSHA256">
            <summary>
            Implementation of the non-standard XSHA256 command
            </summary></member>
        <member name="M:System.Net.FtpClient.Extensions.XSHA256.GetXSHA256(System.Net.FtpClient.FtpClient,System.String)">
            <summary>
            Gets the SHA-256 hash of the specified file using XSHA256. This is a non-standard extension
            to the protocol and may or may not work. A FtpCommandException will be
            thrown if the command fails.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <returns>Server response, presumably the SHA-256 hash.</returns></member>
        <member name="M:System.Net.FtpClient.Extensions.XSHA256.BeginGetXSHA256(System.Net.FtpClient.FtpClient,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronusly retrieve a SHA256 hash. The XSHA256 command is non-standard
            and not guaranteed to work.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns></member>
        <member name="M:System.Net.FtpClient.Extensions.XSHA256.EndGetXSHA256(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginGetXSHA256()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetXSHA256()</param>
            <returns>The SHA-256 hash of the specified file.</returns></member>
        <member name="T:System.Net.FtpClient.Extensions.XSHA512">
            <summary>
            Implementation of the non-standard XSHA512 command
            </summary></member>
        <member name="M:System.Net.FtpClient.Extensions.XSHA512.GetXSHA512(System.Net.FtpClient.FtpClient,System.String)">
            <summary>
            Gets the SHA-512 hash of the specified file using XSHA512. This is a non-standard extension
            to the protocol and may or may not work. A FtpCommandException will be
            thrown if the command fails.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <returns>Server response, presumably the SHA-512 hash.</returns></member>
        <member name="M:System.Net.FtpClient.Extensions.XSHA512.BeginGetXSHA512(System.Net.FtpClient.FtpClient,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronusly retrieve a SHA512 hash. The XSHA512 command is non-standard
            and not guaranteed to work.
            </summary>
            <param name="client">FtpClient Object</param>
            <param name="path">Full or relative path to remote file</param>
            <param name="callback">AsyncCallback</param>
            <param name="state">State Object</param>
            <returns>IAsyncResult</returns></member>
        <member name="M:System.Net.FtpClient.Extensions.XSHA512.EndGetXSHA512(System.IAsyncResult)">
            <summary>
            Ends an asynchronous call to BeginGetXSHA512()
            </summary>
            <param name="ar">IAsyncResult returned from BeginGetXSHA512()</param>
            <returns>The SHA-512 hash of the specified file.</returns></member>
    </members>
</doc>
