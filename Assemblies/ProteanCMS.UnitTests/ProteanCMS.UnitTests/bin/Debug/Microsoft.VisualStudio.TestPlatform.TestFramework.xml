<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.TestPlatform.TestFramework</name>
    </assembly>
    <members>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            Indicates that a parameter captures the expression passed for another parameter as a string.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the name of the parameter whose expression should be captured as a string.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/>
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute">
            <summary>
            Disables the built-in runtime managed/unmanaged marshalling subsystem for
            P/Invokes, Delegate types, and unmanaged function pointer invocations.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata. This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
            <summary>
            Used to indicate to the compiler that a method should be called
            in its containing module's initializer.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute"/> class.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method allows a variable number of arguments in its invocation.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c>
            flag should not be set in method headers.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>Gets the names of the arguments that should be passed to the handler.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.OSPlatformAttribute">
            <summary>
            Base type for all platform-specific API attributes.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.OSPlatformAttribute.#ctor(System.String)">
            <summary>
            Base type for all platform-specific API attributes.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.ObsoletedOSPlatformAttribute">
            <summary>
            Marks APIs that were obsoleted in a given operating system version.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformAttribute">
            <summary>
            Records the operating system (and minimum version) that supports an API. Multiple attributes can be
            applied to indicate support on multiple operating systems.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.SupportedOSPlatformAttribute.#ctor(System.String)">
            <summary>
            Records the operating system (and minimum version) that supports an API. Multiple attributes can be
            applied to indicate support on multiple operating systems.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute">
            <summary>
            Annotates a custom guard field, property or method with a supported platform name and optional version.
            Multiple attributes can be applied to indicate guard for multiple supported platforms.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute.#ctor(System.String)">
            <summary>
            Annotates a custom guard field, property or method with a supported platform name and optional version.
            Multiple attributes can be applied to indicate guard for multiple supported platforms.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.TargetPlatformAttribute">
            <summary>
            Records the platform that the project targeted.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.TargetPlatformAttribute.#ctor(System.String)">
            <summary>
            Records the platform that the project targeted.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformAttribute">
            <summary>
            Marks APIs that were removed in a given operating system version.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute">
            <summary>
            Annotates the custom guard field, property or method with an unsupported platform name and optional version.
            Multiple attributes can be applied to indicate guard for multiple unsupported platforms.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute.#ctor(System.String)">
            <summary>
            Annotates the custom guard field, property or method with an unsupported platform name and optional version.
            Multiple attributes can be applied to indicate guard for multiple unsupported platforms.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.SuppressGCTransitionAttribute">
            <summary>
            An attribute used to indicate a GC transition should be skipped when making an unmanaged function call.
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute">
            <summary>
            Any method marked with <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" /> can be directly called from
            native code. The function token can be loaded to a local variable using the <see href="https://docs.microsoft.com/dotnet/csharp/language-reference/operators/pointer-related-operators#address-of-operator-">address-of</see> operator
            in C# and passed as a callback to a native method.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.CallConvs">
            <summary>
            Optional. If omitted, the runtime will use the default platform calling convention.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.EntryPoint">
            <summary>
            Optional. If omitted, no named export is emitted during compilation.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute">
            <summary>
            Indicates that the specified method parameter expects a constant.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Min">
            <summary>
            Indicates the minimum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Max">
            <summary>
            Indicates the maximum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that a parameter captures the expression passed for another parameter as a string.
            </summary>
            <summary>
             Indicates that an API is experimental and it may change in the future.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class, specifying the ID that the compiler will use
             when reporting a use of the API the attribute applies to.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
             Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
             Gets or sets the URL for corresponding documentation.
             The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.FeatureGuardAttribute">
            <summary>
            Indicates that the specified public static boolean get-only property
            guards access to the specified feature.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.FeatureGuardAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.FeatureGuardAttribute"/> class
            with the specified feature type.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.FeatureGuardAttribute.FeatureType">
            <summary>
            The type that represents the feature guarded by the property.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.FeatureSwitchDefinitionAttribute">
            <summary>
            [AttributeUsage(AttributeTargets.Property, Inherited = false)]
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.FeatureSwitchDefinitionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.FeatureSwitchDefinitionAttribute"/> class
            with the specified feature switch name.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.FeatureSwitchDefinitionAttribute.SwitchName">
            <summary>
            The name of the feature switch that provides the value for the specified property.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
              Specifies that <see langword="null"/> is allowed as an input even if the
              corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
              Specifies that <see langword="null"/> is disallowed as an input even if the
              corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
              Specifies that a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
              Specifies that the method will not return if the associated <see cref="T:System.Boolean"/>
              parameter is passed the specified value.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
              Gets the condition parameter value.
              Code after the method is considered unreachable by diagnostics if the argument
              to the associated parameter matches this value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute"/>
              class with the specified parameter value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
              Specifies that an output may be <see langword="null"/> even if the
              corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
              Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>,
              the parameter may be <see langword="null"/> even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
              Gets the return value condition.
              If the method returns this value, the associated parameter may be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
               Initializes the attribute with the specified return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
              Specifies that the method or property will ensure that the listed field and property members have
              not-<see langword="null"/> values.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
              Gets field or property member names.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
              Initializes the attribute with a field or property member.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
              Initializes the attribute with the list of field and property members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
              Specifies that the method or property will ensure that the listed field and property members have
              non-<see langword="null"/> values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
              Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
              Gets field or property member names.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
              Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
              Initializes the attribute with the specified return value condition and list
              of field and property members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
              Specifies that an output is not <see langword="null"/> even if the
              corresponding type allows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
              Gets the associated parameter name.
              The output will be non-<see langword="null"/> if the argument to the
              parameter specified is non-<see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
              Initializes the attribute with the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
              Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>,
              the parameter will not be <see langword="null"/> even if the corresponding type allows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
              Gets the return value condition.
              If the method returns this value, the associated parameter will not be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
              Initializes the attribute with the specified return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type, and callers
            do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>Specifies the syntax used in a string.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute">
            <summary>
            States a dependency that one member has on another.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on the same type as the consumer.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a type in an assembly.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a type in an assembly.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature">
            <summary>
            Gets the signature of the member depended on.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members depended on.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type">
            <summary>
            Gets the <see cref="T:System.Type"/> containing the specified member.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName">
            <summary>
            Gets the full name of the type containing the specified member.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName">
            <summary>
            Gets the assembly name of the specified type.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition">
            <summary>
            Gets or sets the condition in which the dependency is applicable, e.g. "DEBUG".
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
            <summary>
            Indicates that certain members on a specified <see cref="T:System.Type"/> are accessed dynamically,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/> class
            with the specified member types.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/> class
            with the specified message.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/> class with the specified message.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/>
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
        </member>
        <member name="T:System.Diagnostics.DebuggerDisableUserUnhandledExceptionsAttribute">
            <summary>
            If a .NET Debugger is attached that supports the <see cref="!:Debugger.BreakForUserUnhandledException(System.Exception)" /> API, the debugger won't break on user-unhandled exceptions when the exception is caught by a method with this attribute, unless <see cref="!:Debugger.BreakForUserUnhandledException(System.Exception)" /> is called.
            </summary>
        </member>
        <member name="T:System.Diagnostics.StackTraceHiddenAttribute">
            <summary>
            Types and Methods attributed with StackTraceHidden will be omitted from the stack trace text shown in StackTrace.ToString()
            and Exception.StackTrace
            </summary>
        </member>
        <member name="T:System.Diagnostics.TaskCompletionSource">
            <summary>
            Represents the producer side of a <see cref="!:Tasks.Task"/> unbound to a
            delegate, providing access to the consumer side through the <see cref="!:Tasks.Task"/> property.
            </summary>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.#ctor">
            <summary>Creates a <see cref="T:System.Diagnostics.TaskCompletionSource"/>.</summary>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.#ctor(System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a <see cref="T:System.Diagnostics.TaskCompletionSource"/> with the specified options.</summary>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.#ctor(System.Object)">
            <summary>Creates a <see cref="T:System.Diagnostics.TaskCompletionSource"/> with the specified state.</summary>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>Creates a <see cref="T:System.Diagnostics.TaskCompletionSource"/> with the specified state and options.</summary>
        </member>
        <member name="P:System.Diagnostics.TaskCompletionSource.Task">
            <summary>
            Gets the <see cref="!:Tasks.Task"/> created
            by this <see cref="T:System.Diagnostics.TaskCompletionSource"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.SetException(System.Exception)">
            <summary>Transitions the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state.</summary>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>Transitions the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state.</summary>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.TrySetException(System.Exception)">
            <summary>
            Attempts to transition the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state.
            </summary>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Attempts to transition the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted"/> state.
            </summary>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.SetResult">
            <summary>
            Transitions the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/> state.
            </summary>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.TrySetResult">
            <summary>
            Attempts to transition the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/> state.
            </summary>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.SetCanceled">
            <summary>
            Transitions the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state.
            </summary>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.SetCanceled(System.Threading.CancellationToken)">
            <summary>
            Transitions the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state
            using the specified token.
            </summary>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.TrySetCanceled">
            <summary>
            Attempts to transition the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state.
            </summary>
        </member>
        <member name="M:System.Diagnostics.TaskCompletionSource.TrySetCanceled(System.Threading.CancellationToken)">
            <summary>
            Attempts to transition the underlying <see cref="!:Tasks.Task"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state.
            </summary>
        </member>
        <member name="T:System.Diagnostics.UnreachableException">
            <summary>
            Exception thrown when the program executes an instruction that was thought to be unreachable.
            </summary>
            <seealso href="https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.unreachableexception"/>
            <seealso href="https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Diagnostics/UnreachableException.cs"/>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/> class with the default error message.
            </summary>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/>
            class with a specified error message.
            </summary>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/>
            class with a specified error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.KeyValuePair.Create``2(``0,``1)">
            <summary>
            Creates a new key/value pair instance using provided values.
            </summary>
        </member>
        <member name="T:System.Threading.Lock">
            <summary>
            Provides a way to get mutual exclusion in regions of code between different threads. A lock may be held by one thread at
            a time.
            </summary>
        </member>
        <member name="M:System.Threading.Lock.Enter">
            <summary>
            Enters the lock. Once the method returns, the calling thread would be the only thread that holds the lock.
            </summary>
        </member>
        <member name="M:System.Threading.Lock.TryEnter">
            <summary>
            Tries to enter the lock without waiting. If the lock is entered, the calling thread would be the only thread that
            holds the lock.
            </summary>
        </member>
        <member name="M:System.Threading.Lock.TryEnter(System.TimeSpan)">
            <summary>
            Tries to enter the lock, waiting for roughly the specified duration. If the lock is entered, the calling thread
            would be the only thread that holds the lock.
            </summary>
        </member>
        <member name="M:System.Threading.Lock.TryEnter(System.Int32)">
            <summary>
            Tries to enter the lock, waiting for roughly the specified duration. If the lock is entered, the calling thread
            would be the only thread that holds the lock.
            </summary>
        </member>
        <member name="M:System.Threading.Lock.Exit">
            <summary>
            Exits the lock.
            </summary>
        </member>
        <member name="M:System.Threading.Lock.EnterScope">
            <summary>
            Enters the lock and returns a <see cref="T:System.Threading.Lock.Scope"/> that may be disposed to exit the lock. Once the method returns,
            the calling thread would be the only thread that holds the lock. This method is intended to be used along with a
            language construct that would automatically dispose the <see cref="T:System.Threading.Lock.Scope"/>, such as with the C# <code>using</code>
            statement.
            </summary>
        </member>
        <member name="T:System.Threading.Lock.Scope">
            <summary>
            A disposable structure that is returned by <see cref="M:System.Threading.Lock.EnterScope"/>, which when disposed, exits the lock.
            </summary>
        </member>
        <member name="M:System.Threading.Lock.Scope.#ctor(System.Threading.Lock)">
            <summary>
            A disposable structure that is returned by <see cref="M:System.Threading.Lock.EnterScope"/>, which when disposed, exits the lock.
            </summary>
        </member>
        <member name="M:System.Threading.Lock.Scope.Dispose">
            <summary>
            Exits the lock.
            </summary>
        </member>
        <member name="T:System.IO.UnixFileMode">
             <summary>
             Represents the Unix filesystem permissions.
            
             This enumeration supports a bitwise combination of its member values.
             </summary>
        </member>
        <member name="M:Polyfills.ConvertPolyfill.&lt;&gt;E__0.ToHexString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with uppercase hex characters.
            Parameters specify the subset as an offset in the input array and the number of elements in the array to convert.
            </summary>
        </member>
        <member name="M:Polyfills.ConvertPolyfill.&lt;&gt;E__0.ToHexStringLower(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with lowercase hex characters.
            Parameters specify the subset as an offset in the input array and the number of elements in the array to convert.
            </summary>
        </member>
        <member name="M:Polyfills.ConvertPolyfill.&lt;&gt;E__0.ToHexStringLower(System.Byte[])">
            <summary>
            Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with lowercase hex characters.
            </summary>
        </member>
        <member name="M:Polyfills.ConvertPolyfill.&lt;&gt;E__0.ToHexString(System.Byte[])">
            <summary>
            Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with uppercase hex characters.
            </summary>
        </member>
        <member name="M:Polyfills.ConvertPolyfill.&lt;&gt;E__0.FromHexString(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as hex characters, to an equivalent 8-bit unsigned integer array.
            </summary>
        </member>
        <member name="M:Polyfills.ConvertPolyfill.ToHexString(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc cref="M:Polyfills.ConvertPolyfill.&lt;&gt;E__0.ToHexString(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:Polyfills.ConvertPolyfill.ToHexStringLower(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc cref="M:Polyfills.ConvertPolyfill.&lt;&gt;E__0.ToHexStringLower(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:Polyfills.ConvertPolyfill.ToHexStringLower(System.Byte[])">
            <inheritdoc cref="M:Polyfills.ConvertPolyfill.&lt;&gt;E__0.ToHexStringLower(System.Byte[])"/>
        </member>
        <member name="M:Polyfills.ConvertPolyfill.ToHexString(System.Byte[])">
            <inheritdoc cref="M:Polyfills.ConvertPolyfill.&lt;&gt;E__0.ToHexString(System.Byte[])"/>
        </member>
        <member name="M:Polyfills.ConvertPolyfill.FromHexString(System.String)">
            <inheritdoc cref="M:Polyfills.ConvertPolyfill.&lt;&gt;E__0.FromHexString(System.String)"/>
        </member>
        <member name="M:Polyfills.DateTimeOffsetPolyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.DateTimeOffset@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.DateTimeOffsetPolyfill.TryParse(System.String,System.IFormatProvider,System.DateTimeOffset@)">
            <inheritdoc cref="M:Polyfills.DateTimeOffsetPolyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.DateTimeOffset@)"/>
        </member>
        <member name="M:Polyfills.DateTimePolyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.DateTime@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.DateTimePolyfill.TryParse(System.String,System.IFormatProvider,System.DateTime@)">
            <inheritdoc cref="M:Polyfills.DateTimePolyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.DateTime@)"/>
        </member>
        <member name="T:Polyfills.DelegatePolyfill.InvocationListEnumerator`1">
            <summary>
            Provides an enumerator for the invocation list of a delegate.
            </summary>
        </member>
        <member name="M:Polyfills.DelegatePolyfill.&lt;&gt;E__0.EnumerateInvocationList``1(``0)">
            <summary>
            Gets an enumerator for the invocation targets of this delegate.
            </summary>
        </member>
        <member name="M:Polyfills.DelegatePolyfill.EnumerateInvocationList``1(``0)">
            <inheritdoc cref="M:Polyfills.DelegatePolyfill.&lt;&gt;E__0.EnumerateInvocationList``1(``0)"/>
        </member>
        <member name="P:Polyfills.DelegatePolyfill.&lt;&gt;E__1.HasSingleTarget">
            <summary>
            Gets a value that indicates whether the Delegate has a single invocation target.
            </summary>
        </member>
        <member name="M:Polyfills.DelegatePolyfill.get_HasSingleTarget(System.Delegate)">
            <inheritdoc cref="P:Polyfills.DelegatePolyfill.&lt;&gt;E__1.HasSingleTarget"/>
        </member>
        <member name="M:Polyfills.EnumPolyfill.&lt;&gt;E__0.GetValues``1">
            <summary>
            Retrieves an array of the values of the constants in a specified enumeration type.
            </summary>
        </member>
        <member name="M:Polyfills.EnumPolyfill.&lt;&gt;E__0.IsDefined``1(``0)">
            <summary>Returns a <see cref="T:System.Boolean"/> telling whether a given integral value exists in a specified enumeration.</summary>
        </member>
        <member name="M:Polyfills.EnumPolyfill.&lt;&gt;E__0.GetNames``1">
            <summary>
            Retrieves an array of the names of the constants in a specified enumeration type.
            </summary>
        </member>
        <member name="M:Polyfills.EnumPolyfill.&lt;&gt;E__0.Parse``1(System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants specified by TEnum to an equivalent enumerated object.
            </summary>
        </member>
        <member name="M:Polyfills.EnumPolyfill.&lt;&gt;E__0.Parse``1(System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants specified by TEnum to an equivalent enumerated object.
            </summary>
        </member>
        <member name="M:Polyfills.EnumPolyfill.GetValues``1">
            <inheritdoc cref="M:Polyfills.EnumPolyfill.&lt;&gt;E__0.GetValues``1"/>
        </member>
        <member name="M:Polyfills.EnumPolyfill.IsDefined``1(``0)">
            <inheritdoc cref="M:Polyfills.EnumPolyfill.&lt;&gt;E__0.IsDefined``1(``0)"/>
        </member>
        <member name="M:Polyfills.EnumPolyfill.GetNames``1">
            <inheritdoc cref="M:Polyfills.EnumPolyfill.&lt;&gt;E__0.GetNames``1"/>
        </member>
        <member name="M:Polyfills.EnumPolyfill.Parse``1(System.String)">
            <inheritdoc cref="M:Polyfills.EnumPolyfill.&lt;&gt;E__0.Parse``1(System.String)"/>
        </member>
        <member name="M:Polyfills.EnumPolyfill.Parse``1(System.String,System.Boolean)">
            <inheritdoc cref="M:Polyfills.EnumPolyfill.&lt;&gt;E__0.Parse``1(System.String,System.Boolean)"/>
        </member>
        <member name="P:Polyfills.EnvironmentPolyfill.&lt;&gt;E__0.ProcessId">
            <summary>
            Gets the unique identifier for the current process.
            </summary>
        </member>
        <member name="M:Polyfills.EnvironmentPolyfill.get_ProcessId">
            <inheritdoc cref="P:Polyfills.EnvironmentPolyfill.&lt;&gt;E__0.ProcessId"/>
        </member>
        <member name="M:Polyfills.FilePolyfill.&lt;&gt;E__0.AppendAllBytes(System.String,System.Byte[])">
            <summary>
            Appends the specified byte array to the end of the file at the given path.
            If the file doesn't exist, this method creates a new file. If the operation is canceled, the task will return in a canceled state.
            </summary>
        </member>
        <member name="M:Polyfills.FilePolyfill.&lt;&gt;E__0.AppendAllBytesAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously appends the specified byte array to the end of the file at the given path.
            If the file doesn't exist, this method creates a new file. If the operation is canceled, the task will return in a canceled state.
            </summary>
        </member>
        <member name="M:Polyfills.FilePolyfill.&lt;&gt;E__0.Move(System.String,System.String,System.Boolean)">
            <summary>
            Moves a specified file to a new location, providing the options to specify a new file name and to replace the destination file if it already exists.
            </summary>
        </member>
        <member name="M:Polyfills.FilePolyfill.&lt;&gt;E__0.WriteAllBytesAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is truncated and overwritten.
            </summary>
        </member>
        <member name="M:Polyfills.FilePolyfill.&lt;&gt;E__0.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a new file, writes the specified lines to the file, and then closes the file.
            </summary>
        </member>
        <member name="M:Polyfills.FilePolyfill.&lt;&gt;E__0.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a new file, write the specified lines to the file by using the specified encoding, and then closes the file.
            </summary>
        </member>
        <member name="M:Polyfills.FilePolyfill.&lt;&gt;E__0.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Asynchronously appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.
            </summary>
        </member>
        <member name="M:Polyfills.FilePolyfill.&lt;&gt;E__0.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Asynchronously appends lines to a file by using a specified encoding, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.
            </summary>
        </member>
        <member name="M:Polyfills.FilePolyfill.&lt;&gt;E__0.WriteAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is truncated and overwritten.
            </summary>
        </member>
        <member name="M:Polyfills.FilePolyfill.&lt;&gt;E__0.WriteAllTextAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is truncated and overwritten.
            </summary>
        </member>
        <member name="M:Polyfills.FilePolyfill.&lt;&gt;E__0.AppendAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Asynchronously opens a file or creates the file if it does not already exist, appends the specified string to the file using the specified encoding, and then closes the file.
            </summary>
        </member>
        <member name="M:Polyfills.FilePolyfill.&lt;&gt;E__0.AppendAllTextAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously opens a file or creates the file if it does not already exist, appends the specified string to the file, and then closes the file.
            </summary>
        </member>
        <member name="M:Polyfills.FilePolyfill.&lt;&gt;E__0.ReadAllBytesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
        </member>
        <member name="M:Polyfills.FilePolyfill.&lt;&gt;E__0.ReadAllLinesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously opens a text file, reads all lines of the file, and then closes the file.
            </summary>
        </member>
        <member name="M:Polyfills.FilePolyfill.&lt;&gt;E__0.ReadAllLinesAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Asynchronously opens a text file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
        </member>
        <member name="M:Polyfills.FilePolyfill.&lt;&gt;E__0.ReadAllTextAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously opens a text file, reads all the text in the file, and then closes the file.
            </summary>
        </member>
        <member name="M:Polyfills.FilePolyfill.&lt;&gt;E__0.ReadAllTextAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Asynchronously opens a text file, reads all text in the file with the specified encoding, and then closes the file.
            </summary>
        </member>
        <member name="M:Polyfills.FilePolyfill.AppendAllBytes(System.String,System.Byte[])">
            <inheritdoc cref="M:Polyfills.FilePolyfill.&lt;&gt;E__0.AppendAllBytes(System.String,System.Byte[])"/>
        </member>
        <member name="M:Polyfills.FilePolyfill.AppendAllBytesAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.FilePolyfill.&lt;&gt;E__0.AppendAllBytesAsync(System.String,System.Byte[],System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Polyfills.FilePolyfill.Move(System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:Polyfills.FilePolyfill.&lt;&gt;E__0.Move(System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:Polyfills.FilePolyfill.WriteAllBytesAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.FilePolyfill.&lt;&gt;E__0.WriteAllBytesAsync(System.String,System.Byte[],System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Polyfills.FilePolyfill.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.FilePolyfill.&lt;&gt;E__0.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Polyfills.FilePolyfill.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.FilePolyfill.&lt;&gt;E__0.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Polyfills.FilePolyfill.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.FilePolyfill.&lt;&gt;E__0.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Polyfills.FilePolyfill.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.FilePolyfill.&lt;&gt;E__0.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Polyfills.FilePolyfill.WriteAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.FilePolyfill.&lt;&gt;E__0.WriteAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Polyfills.FilePolyfill.WriteAllTextAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.FilePolyfill.&lt;&gt;E__0.WriteAllTextAsync(System.String,System.String,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Polyfills.FilePolyfill.AppendAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.FilePolyfill.&lt;&gt;E__0.AppendAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Polyfills.FilePolyfill.AppendAllTextAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.FilePolyfill.&lt;&gt;E__0.AppendAllTextAsync(System.String,System.String,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Polyfills.FilePolyfill.ReadAllBytesAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.FilePolyfill.&lt;&gt;E__0.ReadAllBytesAsync(System.String,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Polyfills.FilePolyfill.ReadAllLinesAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.FilePolyfill.&lt;&gt;E__0.ReadAllLinesAsync(System.String,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Polyfills.FilePolyfill.ReadAllLinesAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.FilePolyfill.&lt;&gt;E__0.ReadAllLinesAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Polyfills.FilePolyfill.ReadAllTextAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.FilePolyfill.&lt;&gt;E__0.ReadAllTextAsync(System.String,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Polyfills.FilePolyfill.ReadAllTextAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.FilePolyfill.&lt;&gt;E__0.ReadAllTextAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Polyfills.FilePolyfill.&lt;&gt;E__1.GetUnixFileMode(System.String)">
            <summary>
            Gets the UnixFileMode of the file on the path.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The UnixFileMode of the file handle.</returns>
        </member>
        <member name="M:Polyfills.FilePolyfill.&lt;&gt;E__1.SetUnixFileMode(System.String,System.IO.UnixFileMode)">
            <summary>
            Sets the specified UnixFileMode of the file on the specified pat
            </summary>
            <param name="path">The path to the file.</param>
            <param name="unixFileMode">The Unix file mode.</param>
        </member>
        <member name="M:Polyfills.FilePolyfill.GetUnixFileMode(System.String)">
            <inheritdoc cref="M:Polyfills.FilePolyfill.&lt;&gt;E__1.GetUnixFileMode(System.String)"/>
        </member>
        <member name="M:Polyfills.FilePolyfill.SetUnixFileMode(System.String,System.IO.UnixFileMode)">
            <inheritdoc cref="M:Polyfills.FilePolyfill.&lt;&gt;E__1.SetUnixFileMode(System.String,System.IO.UnixFileMode)"/>
        </member>
        <member name="M:Polyfills.GuidPolyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.Guid@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.GuidPolyfill.&lt;&gt;E__0.CreateVersion7">
            <summary>Creates a new <see cref="T:System.Guid" /> according to RFC 9562, following the Version 7 format.</summary>
        </member>
        <member name="M:Polyfills.GuidPolyfill.&lt;&gt;E__0.CreateVersion7(System.DateTimeOffset)">
            <summary>Creates a new <see cref="T:System.Guid" /> according to RFC 9562, following the Version 7 format.</summary>
        </member>
        <member name="M:Polyfills.GuidPolyfill.TryParse(System.String,System.IFormatProvider,System.Guid@)">
            <inheritdoc cref="M:Polyfills.GuidPolyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.Guid@)"/>
        </member>
        <member name="M:Polyfills.GuidPolyfill.CreateVersion7">
            <inheritdoc cref="M:Polyfills.GuidPolyfill.&lt;&gt;E__0.CreateVersion7"/>
        </member>
        <member name="M:Polyfills.GuidPolyfill.CreateVersion7(System.DateTimeOffset)">
            <inheritdoc cref="M:Polyfills.GuidPolyfill.&lt;&gt;E__0.CreateVersion7(System.DateTimeOffset)"/>
        </member>
        <member name="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Returns value clamped to the inclusive range of min and max.
            </summary>
        </member>
        <member name="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.UIntPtr,System.UIntPtr,System.UIntPtr)">
            <summary>
            Returns value clamped to the inclusive range of min and max.
            </summary>
        </member>
        <member name="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Returns value clamped to the inclusive range of min and max.
            </summary>
        </member>
        <member name="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Returns value clamped to the inclusive range of min and max.
            </summary>
        </member>
        <member name="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Returns value clamped to the inclusive range of min and max.
            </summary>
        </member>
        <member name="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.SByte,System.SByte,System.SByte)">
            <summary>
            Returns value clamped to the inclusive range of min and max.
            </summary>
        </member>
        <member name="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns value clamped to the inclusive range of min and max.
            </summary>
        </member>
        <member name="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns value clamped to the inclusive range of min and max.
            </summary>
        </member>
        <member name="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.Int16,System.Int16,System.Int16)">
            <summary>
            Returns value clamped to the inclusive range of min and max.
            </summary>
        </member>
        <member name="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Returns value clamped to the inclusive range of min and max.
            </summary>
        </member>
        <member name="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Returns value clamped to the inclusive range of min and max.
            </summary>
        </member>
        <member name="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>
            Returns value clamped to the inclusive range of min and max.
            </summary>
        </member>
        <member name="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Returns value clamped to the inclusive range of min and max.
            </summary>
        </member>
        <member name="M:Polyfills.MathPolyfill.Clamp(System.Single,System.Single,System.Single)">
            <inheritdoc cref="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.Single,System.Single,System.Single)"/>
        </member>
        <member name="M:Polyfills.MathPolyfill.Clamp(System.UIntPtr,System.UIntPtr,System.UIntPtr)">
            <inheritdoc cref="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.UIntPtr,System.UIntPtr,System.UIntPtr)"/>
        </member>
        <member name="M:Polyfills.MathPolyfill.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <inheritdoc cref="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.UInt64,System.UInt64,System.UInt64)"/>
        </member>
        <member name="M:Polyfills.MathPolyfill.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <inheritdoc cref="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.UInt32,System.UInt32,System.UInt32)"/>
        </member>
        <member name="M:Polyfills.MathPolyfill.Clamp(System.UInt16,System.UInt16,System.UInt16)">
            <inheritdoc cref="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.UInt16,System.UInt16,System.UInt16)"/>
        </member>
        <member name="M:Polyfills.MathPolyfill.Clamp(System.SByte,System.SByte,System.SByte)">
            <inheritdoc cref="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.SByte,System.SByte,System.SByte)"/>
        </member>
        <member name="M:Polyfills.MathPolyfill.Clamp(System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Polyfills.MathPolyfill.Clamp(System.Int64,System.Int64,System.Int64)">
            <inheritdoc cref="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.Int64,System.Int64,System.Int64)"/>
        </member>
        <member name="M:Polyfills.MathPolyfill.Clamp(System.Int16,System.Int16,System.Int16)">
            <inheritdoc cref="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.Int16,System.Int16,System.Int16)"/>
        </member>
        <member name="M:Polyfills.MathPolyfill.Clamp(System.Double,System.Double,System.Double)">
            <inheritdoc cref="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:Polyfills.MathPolyfill.Clamp(System.Decimal,System.Decimal,System.Decimal)">
            <inheritdoc cref="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.Decimal,System.Decimal,System.Decimal)"/>
        </member>
        <member name="M:Polyfills.MathPolyfill.Clamp(System.Byte,System.Byte,System.Byte)">
            <inheritdoc cref="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.Byte,System.Byte,System.Byte)"/>
        </member>
        <member name="M:Polyfills.MathPolyfill.Clamp(System.IntPtr,System.IntPtr,System.IntPtr)">
            <inheritdoc cref="M:Polyfills.MathPolyfill.&lt;&gt;E__0.Clamp(System.IntPtr,System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:Polyfills.BytePolyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.Byte@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.BytePolyfill.TryParse(System.String,System.IFormatProvider,System.Byte@)">
            <inheritdoc cref="M:Polyfills.BytePolyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.Byte@)"/>
        </member>
        <member name="M:Polyfills.DoublePolyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.Double@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.DoublePolyfill.TryParse(System.String,System.IFormatProvider,System.Double@)">
            <inheritdoc cref="M:Polyfills.DoublePolyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.Double@)"/>
        </member>
        <member name="M:Polyfills.Int16Polyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.Int16@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.Int16Polyfill.TryParse(System.String,System.IFormatProvider,System.Int16@)">
            <inheritdoc cref="M:Polyfills.Int16Polyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.Int16@)"/>
        </member>
        <member name="M:Polyfills.Int32Polyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.Int32@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.Int32Polyfill.TryParse(System.String,System.IFormatProvider,System.Int32@)">
            <inheritdoc cref="M:Polyfills.Int32Polyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.Int32@)"/>
        </member>
        <member name="M:Polyfills.Int64Polyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.Int64@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.Int64Polyfill.TryParse(System.String,System.IFormatProvider,System.Int64@)">
            <inheritdoc cref="M:Polyfills.Int64Polyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.Int64@)"/>
        </member>
        <member name="M:Polyfills.SBytePolyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.SByte@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.SBytePolyfill.TryParse(System.String,System.IFormatProvider,System.SByte@)">
            <inheritdoc cref="M:Polyfills.SBytePolyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.SByte@)"/>
        </member>
        <member name="M:Polyfills.UInt16Polyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.UInt16@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.UInt16Polyfill.TryParse(System.String,System.IFormatProvider,System.UInt16@)">
            <inheritdoc cref="M:Polyfills.UInt16Polyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.UInt16@)"/>
        </member>
        <member name="M:Polyfills.UInt32Polyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.UInt32@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.UInt32Polyfill.TryParse(System.String,System.IFormatProvider,System.UInt32@)">
            <inheritdoc cref="M:Polyfills.UInt32Polyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.UInt32@)"/>
        </member>
        <member name="M:Polyfills.UInt64Polyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.UInt64@)">
            <summary>
            Tries to parse a string into a value.
            </summary>
        </member>
        <member name="M:Polyfills.UInt64Polyfill.TryParse(System.String,System.IFormatProvider,System.UInt64@)">
            <inheritdoc cref="M:Polyfills.UInt64Polyfill.&lt;&gt;E__0.TryParse(System.String,System.IFormatProvider,System.UInt64@)"/>
        </member>
        <member name="M:Polyfills.PathPolyfill.&lt;&gt;E__0.EndsInDirectorySeparator(System.String)">
            <summary>
            Returns a value that indicates whether the specified path ends in a directory separator.
            </summary>
        </member>
        <member name="M:Polyfills.PathPolyfill.&lt;&gt;E__0.TrimEndingDirectorySeparator(System.String)">
            <summary>
            Trims one trailing directory separator beyond the root of the specified path.
            </summary>
        </member>
        <member name="M:Polyfills.PathPolyfill.&lt;&gt;E__0.Exists(System.String)">
            <summary>
            Determines whether the specified file or directory exists.
            </summary>
        </member>
        <member name="M:Polyfills.PathPolyfill.EndsInDirectorySeparator(System.String)">
            <inheritdoc cref="M:Polyfills.PathPolyfill.&lt;&gt;E__0.EndsInDirectorySeparator(System.String)"/>
        </member>
        <member name="M:Polyfills.PathPolyfill.TrimEndingDirectorySeparator(System.String)">
            <inheritdoc cref="M:Polyfills.PathPolyfill.&lt;&gt;E__0.TrimEndingDirectorySeparator(System.String)"/>
        </member>
        <member name="M:Polyfills.PathPolyfill.Exists(System.String)">
            <inheritdoc cref="M:Polyfills.PathPolyfill.&lt;&gt;E__0.Exists(System.String)"/>
        </member>
        <member name="M:Polyfills.Polyfill.CopyTo``1(System.ArraySegment{``0},System.ArraySegment{``0})">
            <summary>
            Copies the contents of this instance into the specified destination array segment of the same type T.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.CopyTo``1(System.ArraySegment{``0},``0[])">
            <summary>
            Copies the contents of this instance into the specified destination array of the same type T.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.CopyTo``1(System.ArraySegment{``0},``0[],System.Int32)">
            <summary>
            Copies the contents of this instance into the specified destination array of the same type T, starting at the specified destination index.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.GetEnumerator``1(System.ArraySegment{``0})">
            <summary>
            Copies the contents of this instance into the specified destination array of the same type T, starting at the specified destination index.
            </summary>
        </member>
        <member name="T:Polyfills.Polyfill.ArraySegmentEnumerator`1">
            <summary>
            Provides an enumerator for the elements of an <see cref="T:System.ArraySegment`1"/>.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.UnsafeRegister(System.Threading.CancellationToken,System.Action{System.Object},System.Object)">
            <summary>
            Registers a delegate that will be called when this
            <see cref="T:System.Threading.CancellationToken">CancellationToken</see> is canceled.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Register(System.Threading.CancellationToken,System.Action{System.Object,System.Threading.CancellationToken},System.Object)">
            <summary>Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken">CancellationToken</see> is canceled.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.UnsafeRegister(System.Threading.CancellationToken,System.Action{System.Object,System.Threading.CancellationToken},System.Object)">
            <summary>Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken">CancellationToken</see> is canceled.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.CancelAsync(System.Threading.CancellationTokenSource)">
            <summary>Communicates a request for cancellation asynchronously.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.Clear``1(System.Collections.Concurrent.ConcurrentBag{``0})">
            <summary>
            Removes all values from the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.GetOrAdd``3(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``0,``2,``1},``2)">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>
            if the key does not already exist.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Clear``1(System.Collections.Concurrent.ConcurrentQueue{``0})">
            <summary>
            Removes all values from the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Deconstruct(System.DateTime,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
             Deconstructs <see cref="!:DateOnly"/> by <see cref="!:Year"/>, <see cref="!:Month"/> and <see cref="!:Day"/>.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/> wrapper for the current dictionary.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Attempts to add the specified key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
            <summary>
            Removes the value with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>, and copies the element
            to the value parameter.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.EnsureCapacity``2(System.Collections.Generic.Dictionary{``0,``1},System.Int32)">
            <summary>
            Ensures that the capacity of this dictionary is at least the specified capacity. If the current capacity is less than capacity, it is increased to at least the specified capacity.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.TrimExcess``2(System.Collections.Generic.Dictionary{``0,``1},System.Int32)">
            <summary>
            Sets the capacity of this dictionary to hold up a specified number of entries without any further expansion of its backing storage.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.TrimExcess``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Sets the capacity of this dictionary to what it would be if it had been originally initialized with all its entries.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Deconstruct(System.Collections.DictionaryEntry,System.Object@,System.Object@)">
            <summary>
            Deconstructs the current <see cref="T:System.Collections.DictionaryEntry"/>.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.TryGetValue``1(System.Collections.Generic.HashSet{``0},``0,``0@)">
            <summary>
             Searches the set for a given value and returns the equal value it finds, if any.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.EnsureCapacity``1(System.Collections.Generic.HashSet{``0},System.Int32)">
            <summary>
            Ensures that the capacity of this HashSet is at least the specified capacity. If the current capacity is less than capacity, it is increased to at least the specified capacity.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.TrimExcess``1(System.Collections.Generic.HashSet{``0},System.Int32)">
            <summary>
            Sets the capacity of a HashSet object to the specified number of entries, rounded up to a nearby, implementation-specific value.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.AggregateBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``2,System.Func{``2,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/overview#linq
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.AggregateBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/overview#linq
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends a value to the end of the sequence.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Chunk``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Split the elements of a sequence into chunks of size at most <paramref name="size"/>.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.CountBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/overview#linq
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>Returns distinct elements from a sequence according to a specified key selector function.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>Returns distinct elements from a sequence according to a specified key selector function.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.Except``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Produces a set items excluding <paramref name="item"/> by using the default equality comparer to compare values.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Except``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces a set items excluding <paramref name="item"/> by using <paramref name="comparer"/> to compare values.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},``0[])">
            <summary>
            Produces the set difference of two sequences by <paramref name="comparer"/> to compare values.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1})">
            <summary>
            Produces the set difference of two sequences according to a specified key selector function.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Produces the set difference of two sequences according to a specified key selector function.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Returns the last element of a sequence, or a default value if the sequence contains no elements.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.Max``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>Returns the maximum value in a generic sequence.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the maximum value in a generic sequence according to a specified key selector function.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>Returns the maximum value in a generic sequence according to a specified key selector function.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.Min``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>Returns the minimum value in a generic sequence.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the minimum value in a generic sequence according to a specified key selector function.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>Returns the minimum value in a generic sequence according to a specified key selector function.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a new enumerable collection that contains the elements from source with the last count elements of the
            source collection omitted.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a new enumerable collection that contains the last count elements from source.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Polyfills.Polyfill.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" -->
        <member name="M:Polyfills.Polyfill.TryGetNonEnumeratedCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
            <summary>
              Attempts to determine the number of elements in a sequence without forcing an enumeration.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
            <summary>
            Tries to get the value associated with the specified key in the dictionary.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            Deconstructs the current <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.AsReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper for the current collection.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.EnsureCapacity``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Ensures that the capacity of this list is at least the specified capacity. If the current capacity is less than capacity, it is increased to at least the specified capacity.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Polyfills.Polyfill.TrimExcess``1(System.Collections.Generic.List{``0})" -->
        <member name="M:Polyfills.Polyfill.CreateDelegate``1(System.Reflection.MethodInfo)">
            <summary>
            Creates a delegate of type T with the specified target from this method.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.CreateDelegate``1(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Creates a delegate of type T with the specified target from this method.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Nanoseconds(System.TimeSpan)">
            <summary>
            Gets the nanosecond component of the time represented by the current <see cref="T:System.TimeSpan"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Nanosecond(System.DateTime)">
            <summary>
            Gets the nanosecond component of the time represented by the current <see cref="T:System.DateTime"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Nanosecond(System.DateTimeOffset)">
            <summary>
            Gets the nanosecond component of the time represented by the current <see cref="T:System.DateTimeOffset"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Microseconds(System.TimeSpan)">
            <summary>
            Gets the microsecond component of the time represented by the current <see cref="T:System.TimeSpan"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Microsecond(System.DateTime)">
            <summary>
            Gets the microsecond component of the time represented by the current <see cref="T:System.DateTime"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Microsecond(System.DateTimeOffset)">
            <summary>
            Gets the microsecond component of the time represented by the current <see cref="T:System.DateTimeOffset"/> object.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.AddMicroseconds(System.DateTime,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> object that adds a specified number of microseconds to the value of this instance..
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.AddMicroseconds(System.DateTimeOffset,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTimeOffset"/> object that adds a specified number of microseconds to the value of this instance..
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Kill(System.Diagnostics.Process,System.Boolean)">
            <summary>
            Immediately stops the associated process, and optionally its child/descendent processes.
            Maps to <see cref="M:System.Diagnostics.Process.Kill"/>.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.WaitForExitAsync(System.Diagnostics.Process,System.Threading.CancellationToken)">
            <summary>
            Instructs the Process component to wait for the associated process to exit, or
            for the <paramref name="cancellationToken"/> to be canceled.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.EnsureCapacity``1(System.Collections.Generic.Queue{``0},System.Int32)">
            <summary>
            Ensures that the capacity of this queue is at least the specified capacity. If the current capacity is less than capacity, it is increased to at least the specified capacity.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.TrimExcess``1(System.Collections.Generic.Queue{``0},System.Int32)">
            <summary>
            Sets the capacity of a Queue object to the specified number of entries.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.GetItems``1(System.Random,``0[],System.Int32)">
            <summary>
            Creates an array populated with items chosen at random from the provided set of choices.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Shuffle``1(System.Random,``0[])">
            <summary>
            Performs an in-place shuffle of an array.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.GetKeyAtIndex``2(System.Collections.Generic.SortedList{``0,``1},System.Int32)">
            <summary>
            Gets the key corresponding to the specified index.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.GetValueAtIndex``2(System.Collections.Generic.SortedList{``0,``1},System.Int32)">
            <summary>
            Gets the value corresponding to the specified index.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.EnsureCapacity``1(System.Collections.Generic.Stack{``0},System.Int32)">
            <summary>
            Ensures that the capacity of this Stack is at least the specified capacity. If the current capacity is less than capacity, it is increased to at least the specified capacity.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.TrimExcess``1(System.Collections.Generic.Stack{``0},System.Int32)">
            <summary>
            Sets the capacity of a Stack object to a specified number of entries.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.TryPeek``1(System.Collections.Generic.Stack{``0},``0@)">
            <summary>
            Returns a value that indicates whether there is an object at the top of the <see cref="T:System.Collections.Generic.Stack`1"/>, and if one is present, copies it to the result parameter. The object is not removed from the <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.TryPop``1(System.Collections.Generic.Stack{``0},``0@)">
            <summary>
            Returns a value that indicates whether there is an object at the top of the <see cref="T:System.Collections.Generic.Stack`1"/>, and if one is present, copies it to the result parameter, and removes it from the <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.CopyToAsync(System.IO.Stream,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified
            cancellation token. Both streams positions are advanced by the number of bytes copied.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.ReadExactly(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads count number of bytes from the current stream and advances the position within the stream.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.GetHashCode(System.String,System.StringComparison)">
            <summary>
            Returns the hash code for this string using the specified rules.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Contains(System.String,System.Char,System.StringComparison)">
            <summary>
            Returns a value indicating whether a specified character occurs within this string, using the specified comparison rules.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.IndexOf(System.String,System.Char,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character in this string. A parameter specifies the type of search to use for the specified character.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a value indicating whether a specified string occurs within this string, using the specified comparison rules.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.StartsWith(System.String,System.Char)">
            <summary>
            Determines whether this string instance starts with the specified character.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.EndsWith(System.String,System.Char)">
            <summary>
            Returns a value indicating whether a specified character occurs within this string.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Split(System.String,System.Char,System.StringSplitOptions)">
            <summary>
            Splits a string into substrings based on a specified delimiting character and, optionally, options.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Split(System.String,System.Char,System.Int32,System.StringSplitOptions)">
            <summary>
            Splits a string into a maximum number of substrings based on a specified delimiting character and, optionally,
            options. Splits a string into a maximum number of substrings based on the provided character separator,
            optionally omitting empty substrings from the result.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Split(System.String,System.String,System.StringSplitOptions)">
            <summary>
            Splits a string into substrings that are based on the provided string separator.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Split(System.String,System.String,System.Int32,System.StringSplitOptions)">
            <summary>
            Splits a string into a maximum number of substrings based on a specified delimiting string and, optionally, options.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Contains(System.String,System.Char)">
            <summary>
            Returns a value indicating whether a specified character occurs within this string.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.ReplaceLineEndings(System.String,System.String)">
            <summary>
            Replaces all newline sequences in the current string with <paramref name="replacementText"/>.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.ReplaceLineEndings(System.String)">
            <summary>
            Replaces all newline sequences in the current string with <see cref="P:System.Environment.NewLine"/>.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Append(System.Text.StringBuilder,System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Appends a copy of a substring within a specified string builder to this instance.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.AppendJoin``1(System.Text.StringBuilder,System.Char,System.Collections.Generic.IEnumerable{``0})">
            <summary>Concatenates and appends the members of a collection, using the specified separator between each member.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.AppendJoin``1(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>Concatenates and appends the members of a collection, using the specified char separator between each member.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.AppendJoin(System.Text.StringBuilder,System.String,System.String[])">
            <summary>Concatenates the strings of the provided array, using the specified separator between each string, then appends the result to the current instance of the string builder.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.AppendJoin(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>Concatenates the string representations of the elements in the provided array of objects, using the specified separator between each member, then appends the result to the current instance of the string builder.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.AppendJoin(System.Text.StringBuilder,System.Char,System.String[])">
            <summary>Concatenates the strings of the provided array, using the specified char separator between each string, then appends the result to the current instance of the string builder.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.AppendJoin(System.Text.StringBuilder,System.Char,System.Object[])">
            <summary>Concatenates the string representations of the elements in the provided array of objects, using the specified char separator between each member, then appends the result to the current instance of the string builder.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.AppendJoin``1(System.Text.StringBuilder,System.Char,``0[])">
            <summary>Concatenates and appends the members of a collection, using the specified char separator between each member.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.AppendJoin``1(System.Text.StringBuilder,System.String,``0[])">
            <summary>Concatenates and appends the members of a collection, using the specified char separator between each member.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.WaitAsync(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>Gets a <see cref="T:System.Threading.Tasks.Task"/> that will complete when this <see cref="T:System.Threading.Tasks.Task"/> completes or when the specified <see cref="T:System.Threading.CancellationToken"/> has cancellation requested.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.WaitAsync(System.Threading.Tasks.Task,System.TimeSpan)">
            <summary>Gets a <see cref="T:System.Threading.Tasks.Task"/> that will complete when this <see cref="T:System.Threading.Tasks.Task"/> completes or when the specified timeout expires.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.WaitAsync(System.Threading.Tasks.Task,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Gets a <see cref="T:System.Threading.Tasks.Task"/> that will complete when this <see cref="T:System.Threading.Tasks.Task"/> completes, when the specified timeout expires, or when the specified <see cref="T:System.Threading.CancellationToken"/> has cancellation requested.</summary>
        </member>
        <member name="M:Polyfills.Polyfill.WaitAsync``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task"/> that will complete when this <see cref="T:System.Threading.Tasks.Task"/> completes, or when the specified <see cref="T:System.Threading.CancellationToken"/> has cancellation requested.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.WaitAsync``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task"/> that will complete when this <see cref="T:System.Threading.Tasks.Task"/> completes, or when the specified timeout expires.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.WaitAsync``1(System.Threading.Tasks.Task{``0},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task"/> that will complete when this <see cref="T:System.Threading.Tasks.Task"/> completes, when the specified timeout expires, or when the specified <see cref="T:System.Threading.CancellationToken"/> has cancellation requested.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.SetCanceled``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.CancellationToken)">
            <summary>
            Transitions the underlying <see cref="T:System.Threading.Tasks.Task`1"/> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> state
            using the specified token.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.ReadToEndAsync(System.IO.TextReader,System.Threading.CancellationToken)">
            <summary>
            Reads all characters from the current position to the end of the stream asynchronously and returns them as one string.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.ReadLineAsync(System.IO.TextReader,System.Threading.CancellationToken)">
            <summary>
            Reads a line of characters asynchronously and returns the data as a string.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.FlushAsync(System.IO.TextWriter,System.Threading.CancellationToken)">
            <summary>
            Asynchronously clears all buffers for the current writer and causes any buffered data to
            be written to the underlying device.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.Write(System.IO.TextWriter,System.Text.StringBuilder)">
            <summary>
            Equivalent to Write(stringBuilder.ToString()) however it uses the
            StringBuilder.GetChunks() method to avoid creating the intermediate string
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.WriteAsync(System.IO.TextWriter,System.Text.StringBuilder,System.Threading.CancellationToken)">
            <summary>
            Equivalent to WriteAsync(stringBuilder.ToString()) however it uses the
            StringBuilder.GetChunks() method to avoid creating the intermediate string
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.IsGenericMethodParameter(System.Type)">
            <summary>
            Gets a value that indicates whether the current Type represents a type parameter in the definition of a generic method.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.IsAssignableTo``1(System.Type)">
            <summary>
            Generic version of Type.IsAssignableTo https://learn.microsoft.com/en-us/dotnet/api/system.type.isassignableto.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.IsAssignableFrom``1(System.Type)">
            <summary>
            Generic version of Type.IsAssignableFrom https://learn.microsoft.com/en-us/dotnet/api/system.type.isassignablefrom.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.IsAssignableTo(System.Type,System.Type)">
            <summary>
            Determines whether the current type can be assigned to a variable of the specified targetType.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.GetMemberWithSameMetadataDefinitionAs(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Searches for the MemberInfo on the current Type that matches the specified MemberInfo.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.SaveAsync(System.Xml.Linq.XDocument,System.Xml.XmlWriter,System.Threading.CancellationToken)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XDocument"/> to an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.SaveAsync(System.Xml.Linq.XDocument,System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XDocument"/> to a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.SaveAsync(System.Xml.Linq.XDocument,System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XDocument"/> to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.SaveAsync(System.Xml.Linq.XElement,System.Xml.XmlWriter,System.Threading.CancellationToken)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XElement"/> to an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.SaveAsync(System.Xml.Linq.XElement,System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:Polyfills.Polyfill.SaveAsync(System.Xml.Linq.XElement,System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:Polyfills.RandomNumberGeneratorPolyfill.&lt;&gt;E__0.GetInt32(System.Int32,System.Int32)">
             <summary>
            Generates a random integer between a specified inclusive lower bound and a specified exclusive upper bound using a cryptographically strong random number generator.
             </summary>
        </member>
        <member name="M:Polyfills.RandomNumberGeneratorPolyfill.&lt;&gt;E__0.GetInt32(System.Int32)">
            <summary>
            Generates a random integer between 0 (inclusive) and a specified exclusive upper bound using a cryptographically strong random number generator.
            </summary>
        </member>
        <member name="M:Polyfills.RandomNumberGeneratorPolyfill.&lt;&gt;E__0.GetBytes(System.Int32)">
            <summary>
            Creates an array of bytes with a cryptographically strong random sequence of values.
            </summary>
        </member>
        <member name="M:Polyfills.RandomNumberGeneratorPolyfill.&lt;&gt;E__0.GetHexString(System.Int32,System.Boolean)">
            <summary>
              Creates a string filled with cryptographically random hexadecimal characters.
            </summary>
        </member>
        <member name="M:Polyfills.RandomNumberGeneratorPolyfill.GetInt32(System.Int32,System.Int32)">
            <inheritdoc cref="M:Polyfills.RandomNumberGeneratorPolyfill.&lt;&gt;E__0.GetInt32(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Polyfills.RandomNumberGeneratorPolyfill.GetInt32(System.Int32)">
            <inheritdoc cref="M:Polyfills.RandomNumberGeneratorPolyfill.&lt;&gt;E__0.GetInt32(System.Int32)"/>
        </member>
        <member name="M:Polyfills.RandomNumberGeneratorPolyfill.GetBytes(System.Int32)">
            <inheritdoc cref="M:Polyfills.RandomNumberGeneratorPolyfill.&lt;&gt;E__0.GetBytes(System.Int32)"/>
        </member>
        <member name="M:Polyfills.RandomNumberGeneratorPolyfill.GetHexString(System.Int32,System.Boolean)">
            <inheritdoc cref="M:Polyfills.RandomNumberGeneratorPolyfill.&lt;&gt;E__0.GetHexString(System.Int32,System.Boolean)"/>
        </member>
        <member name="P:Polyfills.RandomPolyfill.&lt;&gt;E__0.Shared">
            <summary>
            Provides a thread-safe Random instance that may be used concurrently from any thread.
            </summary>
        </member>
        <member name="M:Polyfills.RandomPolyfill.get_Shared">
            <inheritdoc cref="P:Polyfills.RandomPolyfill.&lt;&gt;E__0.Shared"/>
        </member>
        <member name="M:Polyfills.SHA256Polyfill.&lt;&gt;E__0.HashData(System.Byte[])">
            <summary>
            Computes the hash of data using the SHA-256 algorithm.
            </summary>
        </member>
        <member name="M:Polyfills.SHA256Polyfill.&lt;&gt;E__0.HashData(System.IO.Stream)">
            <summary>
            Computes the hash of a stream using the SHA-256 algorithm.
            </summary>
        </member>
        <member name="M:Polyfills.SHA256Polyfill.HashData(System.Byte[])">
            <inheritdoc cref="M:Polyfills.SHA256Polyfill.&lt;&gt;E__0.HashData(System.Byte[])"/>
        </member>
        <member name="M:Polyfills.SHA256Polyfill.HashData(System.IO.Stream)">
            <inheritdoc cref="M:Polyfills.SHA256Polyfill.&lt;&gt;E__0.HashData(System.IO.Stream)"/>
        </member>
        <member name="M:Polyfills.SHA512Polyfill.&lt;&gt;E__0.HashData(System.Byte[])">
            <summary>
            Computes the hash of data using the SHA-512 algorithm.
            </summary>
        </member>
        <member name="M:Polyfills.SHA512Polyfill.&lt;&gt;E__0.HashData(System.IO.Stream)">
            <summary>
            Computes the hash of a stream using the SHA-512 algorithm.
            </summary>
        </member>
        <member name="M:Polyfills.SHA512Polyfill.HashData(System.Byte[])">
            <inheritdoc cref="M:Polyfills.SHA512Polyfill.&lt;&gt;E__0.HashData(System.Byte[])"/>
        </member>
        <member name="M:Polyfills.SHA512Polyfill.HashData(System.IO.Stream)">
            <inheritdoc cref="M:Polyfills.SHA512Polyfill.&lt;&gt;E__0.HashData(System.IO.Stream)"/>
        </member>
        <member name="M:Polyfills.StringPolyfill.&lt;&gt;E__0.Join(System.Char,System.String[])">
            <summary>
            Concatenates an array of strings, using the specified separator between each member.
            </summary>
        </member>
        <member name="M:Polyfills.StringPolyfill.&lt;&gt;E__0.Join(System.Char,System.Object[])">
            <summary>
            Concatenates the string representations of an array of objects, using the specified separator between each member.
            </summary>
        </member>
        <member name="M:Polyfills.StringPolyfill.&lt;&gt;E__0.Join(System.Char,System.String[],System.Int32,System.Int32)">
            <summary>
            Concatenates the specified elements of a string array, using the specified separator between each element.
            </summary>
        </member>
        <member name="M:Polyfills.StringPolyfill.&lt;&gt;E__0.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates the specified elements of a string array, using the specified separator between each element.
            </summary>
        </member>
        <member name="M:Polyfills.StringPolyfill.Join(System.Char,System.String[])">
            <inheritdoc cref="M:Polyfills.StringPolyfill.&lt;&gt;E__0.Join(System.Char,System.String[])"/>
        </member>
        <member name="M:Polyfills.StringPolyfill.Join(System.Char,System.Object[])">
            <inheritdoc cref="M:Polyfills.StringPolyfill.&lt;&gt;E__0.Join(System.Char,System.Object[])"/>
        </member>
        <member name="M:Polyfills.StringPolyfill.Join(System.Char,System.String[],System.Int32,System.Int32)">
            <inheritdoc cref="M:Polyfills.StringPolyfill.&lt;&gt;E__0.Join(System.Char,System.String[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:Polyfills.StringPolyfill.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:Polyfills.StringPolyfill.&lt;&gt;E__0.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Polyfills.XDocumentPolyfill.&lt;&gt;E__0.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a new XDocument and initializes its underlying XML tree using the specified stream, optionally preserving white space.
            </summary>
        </member>
        <member name="M:Polyfills.XDocumentPolyfill.&lt;&gt;E__0.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a new XDocument and initializes its underlying XML tree using the specified text reader, optionally preserving white space.
            </summary>
        </member>
        <member name="M:Polyfills.XDocumentPolyfill.&lt;&gt;E__0.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a new XDocument and initializes its underlying XML tree using the specified text reader, optionally preserving white space.
            </summary>
        </member>
        <member name="M:Polyfills.XDocumentPolyfill.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.XDocumentPolyfill.&lt;&gt;E__0.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Polyfills.XDocumentPolyfill.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.XDocumentPolyfill.&lt;&gt;E__0.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Polyfills.XDocumentPolyfill.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.XDocumentPolyfill.&lt;&gt;E__0.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Polyfills.XElementPolyfill.&lt;&gt;E__0.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a new XElement and initializes its underlying XML tree using the specified stream, optionally preserving white space.
            </summary>
        </member>
        <member name="M:Polyfills.XElementPolyfill.&lt;&gt;E__0.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a new XElement and initializes its underlying XML tree using the specified text reader, optionally preserving white space.
            </summary>
        </member>
        <member name="M:Polyfills.XElementPolyfill.&lt;&gt;E__0.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a new XElement and initializes its underlying XML tree using the specified text reader, optionally preserving white space.
            </summary>
        </member>
        <member name="M:Polyfills.XElementPolyfill.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.XElementPolyfill.&lt;&gt;E__0.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Polyfills.XElementPolyfill.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.XElementPolyfill.&lt;&gt;E__0.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Polyfills.XElementPolyfill.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Polyfills.XElementPolyfill.&lt;&gt;E__0.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)"/>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Assert">
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0)">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal.
            The equality is computed using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal.
            The equality is computed using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys,
            or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal.
            The equality is computed using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertAreEqualInterpolatedStringHandler{``0}@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(System.IEquatable{``0},System.IEquatable{``0},System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal.
            The equality is computed using the provided <paramref name="comparer"/> parameter.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys,
            or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertAreEqualInterpolatedStringHandler{``0}@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0,System.String,System.Object[])">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal.
            The equality is computed using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal.
            The equality is computed using the provided <paramref name="comparer"/> parameter.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys,
            or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(System.IEquatable{``0},System.IEquatable{``0})">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal.
            The equality is computed using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(System.IEquatable{``0},System.IEquatable{``0},System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal.
            The equality is computed using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(System.IEquatable{``0},System.IEquatable{``0},Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertAreEqualInterpolatedStringHandler{``0}@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(System.IEquatable{``0},System.IEquatable{``0},System.String)"/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(System.IEquatable{``0},System.IEquatable{``0},System.String,System.Object[])">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal.
            The equality is computed using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0)">
            <summary>
            Tests whether the specified values are unequal and throws an exception
            if the two values are equal.
            The equality is computed using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="notExpected">
            The first value to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Tests whether the specified values are unequal and throws an exception
            if the two values are equal.
            The equality is computed using the provided <paramref name="comparer"/> parameter.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="notExpected">
            The first value to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys,
            or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception
            if the two values are equal.
            The equality is computed using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="notExpected">
            The first value to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertAreNotEqualInterpolatedStringHandler{``0}@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception
            if the two values are equal.
            The equality is computed using the provided <paramref name="comparer"/> parameter.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="notExpected">
            The first value to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys,
            or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertAreNotEqualInterpolatedStringHandler{``0}@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0,System.String,System.Object[])">
            <summary>
            Tests whether the specified values are unequal and throws an exception
            if the two values are equal.
            The equality is computed using the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="notExpected">
            The first value to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
            <summary>
            Tests whether the specified values are unequal and throws an exception
            if the two values are equal.
            The equality is computed using the provided <paramref name="comparer"/> parameter.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="notExpected">
            The first value to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys,
            or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Single,System.Single,System.Single)">
            <summary>
            Tests whether the specified floats are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first float to compare. This is the float the tests expects.
            </param>
            <param name="actual">
            The second float to compare. This is the float produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Tests whether the specified floats are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first float to compare. This is the float the tests expects.
            </param>
            <param name="actual">
            The second float to compare. This is the float produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is different than <paramref name="expected"/> by more than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Single,System.Single,System.Single,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertNonGenericAreEqualInterpolatedStringHandler@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Single,System.Single,System.Single,System.String)"/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Tests whether the specified floats are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first float to compare. This is the float the tests expects.
            </param>
            <param name="actual">
            The second float to compare. This is the float produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is different than <paramref name="expected"/> by more than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Single,System.Single,System.Single)">
            <summary>
            Tests whether the specified floats are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first float to compare. This is the float the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second float to compare. This is the float produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Tests whether the specified floats are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first float to compare. This is the float the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second float to compare. This is the float produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/> or different by less than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Single,System.Single,System.Single,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertNonGenericAreNotEqualInterpolatedStringHandler@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Single,System.Single,System.Single,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Tests whether the specified floats are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first float to compare. This is the float the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second float to compare. This is the float produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/> or different by less than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Tests whether the specified decimals are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first decimal to compare. This is the decimal the tests expects.
            </param>
            <param name="actual">
            The second decimal to compare. This is the decimal produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Tests whether the specified decimals are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first decimal to compare. This is the decimal the tests expects.
            </param>
            <param name="actual">
            The second decimal to compare. This is the decimal produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is different than <paramref name="expected"/> by more than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Decimal,System.Decimal,System.Decimal,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertNonGenericAreEqualInterpolatedStringHandler@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Decimal,System.Decimal,System.Decimal,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Decimal,System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Tests whether the specified decimals are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first decimal to compare. This is the decimal the tests expects.
            </param>
            <param name="actual">
            The second decimal to compare. This is the decimal produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is different than <paramref name="expected"/> by more than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Tests whether the specified decimals are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first decimal to compare. This is the decimal the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second decimal to compare. This is the decimal produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Tests whether the specified decimals are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first decimal to compare. This is the decimal the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second decimal to compare. This is the decimal produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/> or different by less than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Decimal,System.Decimal,System.Decimal,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertNonGenericAreNotEqualInterpolatedStringHandler@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Decimal,System.Decimal,System.Decimal,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Decimal,System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Tests whether the specified decimals are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first decimal to compare. This is the decimal the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second decimal to compare. This is the decimal produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/> or different by less than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Int64,System.Int64,System.Int64)">
            <summary>
            Tests whether the specified longs are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first long to compare. This is the long the tests expects.
            </param>
            <param name="actual">
            The second long to compare. This is the long produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Tests whether the specified longs are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first long to compare. This is the long the tests expects.
            </param>
            <param name="actual">
            The second long to compare. This is the long produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is different than <paramref name="expected"/> by more than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Int64,System.Int64,System.Int64,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertNonGenericAreEqualInterpolatedStringHandler@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Int64,System.Int64,System.Int64,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Int64,System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Tests whether the specified longs are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first long to compare. This is the long the tests expects.
            </param>
            <param name="actual">
            The second long to compare. This is the long produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is different than <paramref name="expected"/> by more than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Int64,System.Int64,System.Int64)">
            <summary>
            Tests whether the specified longs are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first long to compare. This is the long the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second long to compare. This is the long produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Tests whether the specified longs are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first long to compare. This is the long the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second long to compare. This is the long produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/> or different by less than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Int64,System.Int64,System.Int64,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertNonGenericAreNotEqualInterpolatedStringHandler@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Int64,System.Int64,System.Int64,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Int64,System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Tests whether the specified longs are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first long to compare. This is the long the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second long to compare. This is the long produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/> or different by less than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Tests whether the specified doubles are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first double to compare. This is the double the tests expects.
            </param>
            <param name="actual">
            The second double to compare. This is the double produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Tests whether the specified doubles are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first double to compare. This is the double the tests expects.
            </param>
            <param name="actual">
            The second double to compare. This is the double produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is different than <paramref name="expected"/> by more than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Double,System.Double,System.Double,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertNonGenericAreEqualInterpolatedStringHandler@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Double,System.Double,System.Double,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Tests whether the specified doubles are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first double to compare. This is the double the tests expects.
            </param>
            <param name="actual">
            The second double to compare. This is the double produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is different than <paramref name="expected"/> by more than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Double,System.Double,System.Double)">
            <summary>
            Tests whether the specified doubles are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first double to compare. This is the double the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second double to compare. This is the double produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Tests whether the specified doubles are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first double to compare. This is the double the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second double to compare. This is the double produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/> or different by less than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Double,System.Double,System.Double,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertNonGenericAreNotEqualInterpolatedStringHandler@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Double,System.Double,System.Double,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Tests whether the specified doubles are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first double to compare. This is the double the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second double to compare. This is the double produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/> or different by less than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean)">
            <summary>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal. The invariant culture is used for the comparison.
            </summary>
            <param name="expected">
            The first string to compare. This is the string the tests expects.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal. The invariant culture is used for the comparison.
            </summary>
            <param name="expected">
            The first string to compare. This is the string the tests expects.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertNonGenericAreEqualInterpolatedStringHandler@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.String,System.Object[])">
            <summary>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal. The invariant culture is used for the comparison.
            </summary>
            <param name="expected">
            The first string to compare. This is the string the tests expects.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first string to compare. This is the string the tests expects.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="culture">
            A CultureInfo object that supplies culture-specific comparison information. If culture is null, the current culture is used.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String)">
            <summary>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first string to compare. This is the string the tests expects.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="culture">
            A CultureInfo object that supplies culture-specific comparison information. If culture is null, the current culture is used.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertNonGenericAreEqualInterpolatedStringHandler@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first string to compare. This is the string the tests expects.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="culture">
            A CultureInfo object that supplies culture-specific comparison information. If culture is null, the current culture is used.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean)">
            <summary>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal. The invariant culture is used for the comparison.
            </summary>
            <param name="notExpected">
            The first string to compare. This is the string the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal. The invariant culture is used for the comparison.
            </summary>
            <param name="notExpected">
            The first string to compare. This is the string the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertNonGenericAreNotEqualInterpolatedStringHandler@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.String,System.Object[])">
            <summary>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal. The invariant culture is used for the comparison.
            </summary>
            <param name="notExpected">
            The first string to compare. This is the string the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first string to compare. This is the string the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="culture">
            A CultureInfo object that supplies culture-specific comparison information. If culture is null, the current culture is used.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String)">
            <summary>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first string to compare. This is the string the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="culture">
            A CultureInfo object that supplies culture-specific comparison information. If culture is null, the current culture is used.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertNonGenericAreNotEqualInterpolatedStringHandler@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first string to compare. This is the string the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="culture">
            A CultureInfo object that supplies culture-specific comparison information. If culture is null, the current culture is used.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame``1(``0,``0)">
            <summary>
            Tests whether the specified objects both refer to the same object and
            throws an exception if the two inputs do not refer to the same object.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first object to compare. This is the value the test expects.
            </param>
            <param name="actual">
            The second object to compare. This is the value produced by the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> does not refer to the same object
            as <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame``1(``0,``0,System.String)">
            <summary>
            Tests whether the specified objects both refer to the same object and
            throws an exception if the two inputs do not refer to the same object.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first object to compare. This is the value the test expects.
            </param>
            <param name="actual">
            The second object to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not the same as <paramref name="expected"/>. The message is shown
            in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> does not refer to the same object
            as <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame``1(``0,``0,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertAreSameInterpolatedStringHandler{``0}@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame``1(``0,``0,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame``1(``0,``0,System.String,System.Object[])">
            <summary>
            Tests whether the specified objects both refer to the same object and
            throws an exception if the two inputs do not refer to the same object.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first object to compare. This is the value the test expects.
            </param>
            <param name="actual">
            The second object to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not the same as <paramref name="expected"/>. The message is shown
            in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> does not refer to the same object
            as <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame``1(``0,``0)">
            <summary>
            Tests whether the specified objects refer to different objects and
            throws an exception if the two inputs refer to the same object.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="notExpected">
            The first object to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second object to compare. This is the value produced by the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> refers to the same object
            as <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame``1(``0,``0,System.String)">
            <summary>
            Tests whether the specified objects refer to different objects and
            throws an exception if the two inputs refer to the same object.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="notExpected">
            The first object to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second object to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is the same as <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> refers to the same object
            as <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame``1(``0,``0,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertAreNotSameInterpolatedStringHandler{``0}@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame``1(``0,``0,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame``1(``0,``0,System.String,System.Object[])">
            <summary>
            Tests whether the specified objects refer to different objects and
            throws an exception if the two inputs refer to the same object.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="notExpected">
            The first object to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second object to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is the same as <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> refers to the same object
            as <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ContainsSingle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Tests whether the specified collection contains exactly one element.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="collection">The collection.</param>
            <returns>The item.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ContainsSingle``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Tests whether the specified collection contains exactly one element.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="collection">The collection.</param>
            <param name="message">The message to display when the assertion fails.</param>
            <returns>The item.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ContainsSingle``1(System.Collections.Generic.IEnumerable{``0},Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertSingleInterpolatedStringHandler{``0}@)">
            <summary>
            Tests whether the specified collection contains exactly one element.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="collection">The collection.</param>
            <param name="message">The message to display when the assertion fails.</param>
            <returns>The item.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ContainsSingle``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>
            Tests whether the specified collection contains exactly one element.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="collection">The collection.</param>
            <param name="message">The message format to display when the assertion fails.</param>
            <param name="parameters">The parameters to format the message.</param>
            <returns>The item.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ContainsSingle``1(System.Func{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Tests whether the specified collection contains exactly one element that matches the given predicate.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="collection">The collection.</param>
            <param name="message">The message format to display when the assertion fails.</param>
            <returns>The item that matches the predicate.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Contains``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Tests whether the specified collection contains the given element.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="expected">The expected item.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Contains``1(``0,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Tests whether the specified collection contains the given element.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="expected">The expected item.</param>
            <param name="collection">The collection.</param>
            <param name="message">The message to display when the assertion fails.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Contains``1(``0,System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>
            Tests whether the specified collection contains the given element.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="expected">The expected item.</param>
            <param name="collection">The collection.</param>
            <param name="message">The message format to display when the assertion fails.</param>
            <param name="parameters">The parameters to format the message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Contains``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Tests whether the specified collection contains the given element.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="expected">The expected item.</param>
            <param name="collection">The collection.</param>
            <param name="comparer">An equality comparer to compare values.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Contains``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Tests whether the specified collection contains the given element.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="expected">The expected item.</param>
            <param name="collection">The collection.</param>
            <param name="comparer">An equality comparer to compare values.</param>
            <param name="message">The message to display when the assertion fails.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Contains``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
            <summary>
            Tests whether the specified collection contains the given element.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="expected">The expected item.</param>
            <param name="collection">The collection.</param>
            <param name="comparer">An equality comparer to compare values.</param>
            <param name="message">The message to display when the assertion fails.</param>
            <param name="parameters">The parameters to format the message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Contains``1(System.Func{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Tests whether the specified collection contains the given element.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Contains``1(System.Func{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Tests whether the specified collection contains the given element.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="collection">The collection.</param>
            <param name="message">The message to display when the assertion fails.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Contains``1(System.Func{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>
            Tests whether the specified collection contains the given element.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="collection">The collection.</param>
            <param name="message">The message format to display when the assertion fails.</param>
            <param name="parameters">The parameters to format the message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Contains(System.String,System.String)">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not contain <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Contains(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="substring"/>
            is not in <paramref name="value"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not contain <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Contains(System.String,System.String,System.String,System.Object[])">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="substring"/>
            is not in <paramref name="value"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not contain <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not contain <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Contains(System.String,System.String,System.StringComparison,System.String)">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="substring"/>
            is not in <paramref name="value"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not contain <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Contains(System.String,System.String,System.StringComparison,System.String,System.Object[])">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="substring"/>
            is not in <paramref name="value"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not contain <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Tests whether the specified collection does not contain the specified item.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="expected">The expected item.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Tests whether the specified collection does not contain the specified item.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="expected">The expected item.</param>
            <param name="collection">The collection.</param>
            <param name="message">The message to display when the assertion fails.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>
            Tests whether the specified collection does not contain the specified item.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="expected">The expected item.</param>
            <param name="collection">The collection.</param>
            <param name="message">The message to display when the assertion fails.</param>
            <param name="parameters">The parameters to format the message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Tests whether the specified collection does not contain the specified item.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="expected">The expected item.</param>
            <param name="collection">The collection.</param>
            <param name="comparer">An equality comparer to compare values.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Tests whether the specified collection does not contain the specified item.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="expected">The expected item.</param>
            <param name="collection">The collection.</param>
            <param name="comparer">An equality comparer to compare values.</param>
            <param name="message">The message to display when the assertion fails.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
            <summary>
            Tests whether the specified collection does not contain the specified item.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="expected">The expected item.</param>
            <param name="collection">The collection.</param>
            <param name="comparer">An equality comparer to compare values.</param>
            <param name="message">The message to display when the assertion fails.</param>
            <param name="parameters">The parameters to format the message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotContain``1(System.Func{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Tests whether the specified collection does not contain the specified item.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotContain``1(System.Func{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Tests whether the specified collection does not contain the specified item.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="collection">The collection.</param>
            <param name="message">The message to display when the assertion fails.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotContain``1(System.Func{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>
            Tests whether the specified collection does not contain the specified item.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="collection">The collection.</param>
            <param name="message">The message to display when the assertion fails.</param>
            <param name="parameters">The parameters to format the message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotContain(System.String,System.String)">
            <summary>
            Tests whether the specified string does not contain the specified substring
            and throws an exception if the substring occurs within the
            test string.
            </summary>
            <param name="substring">
            The string expected to not occur within <paramref name="value"/>.
            </param>
            <param name="value">
            The string that is expected to not contain <paramref name="substring"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> contains <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotContain(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified string does not contain the specified substring
            and throws an exception if the substring occurs within the
            test string.
            </summary>
            <param name="substring">
            The string expected to not occur within <paramref name="value"/>.
            </param>
            <param name="value">
            The string that is expected to not contain <paramref name="substring"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="substring"/>
            is in <paramref name="value"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> contains <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotContain(System.String,System.String,System.String,System.Object[])">
            <summary>
            Tests whether the specified string does not contain the specified substring
            and throws an exception if the substring occurs within the
            test string.
            </summary>
            <param name="substring">
            The string expected to not occur within <paramref name="value"/>.
            </param>
            <param name="value">
            The string that is expected to not contain <paramref name="substring"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="substring"/>
            is in <paramref name="value"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> contains <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotContain(System.String,System.String,System.StringComparison)">
            <summary>
            Tests whether the specified string does not contain the specified substring
            and throws an exception if the substring occurs within the
            test string.
            </summary>
            <param name="substring">
            The string expected to not occur within <paramref name="value"/>.
            </param>
            <param name="value">
            The string that is expected to not contain <paramref name="substring"/>.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> contains <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotContain(System.String,System.String,System.StringComparison,System.String)">
            <summary>
            Tests whether the specified string does not contain the specified substring
            and throws an exception if the substring occurs within the
            test string.
            </summary>
            <param name="substring">
            The string expected to not occur within <paramref name="value"/>.
            </param>
            <param name="value">
            The string that is expected to not contain <paramref name="substring"/>.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="substring"/>
            is in <paramref name="value"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> contains <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotContain(System.String,System.String,System.StringComparison,System.String,System.Object[])">
            <summary>
            Tests whether the specified string does not contain the specified substring
            and throws an exception if the substring occurs within the
            test string.
            </summary>
            <param name="substring">
            The string expected to not occur within <paramref name="value"/>.
            </param>
            <param name="value">
            The string that is expected to not contain <paramref name="substring"/>.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="substring"/>
            is in <paramref name="value"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> contains <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInRange``1(``0,``0,``0,System.String)">
            <summary>
            Tests whether the specified value is within the expected range (inclusive).
            The range includes both the minimum and maximum values.
            </summary>
            <typeparam name="T">The type of the values to compare.</typeparam>
            <param name="minValue">The minimum value of the expected range (inclusive).</param>
            <param name="maxValue">The maximum value of the expected range (inclusive).</param>
            <param name="value">The value to test.</param>
            <param name="message">The message format to display when the assertion fails.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Tests that the collection is not empty.
            </summary>
            <typeparam name="T">The type of the items of the collection.</typeparam>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Tests whether the collection is not empty.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="collection">The collection.</param>
            <param name="message">The message to display when the assertion fails.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0},Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertIsNotEmptyInterpolatedStringHandler{``0}@)">
            <summary>
            Tests that the collection is not empty.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="collection">The collection.</param>
            <param name="message">The message to display when the assertion fails.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>
            Tests that the collection is not empty.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="collection">The collection.</param>
            <param name="message">The message format to display when the assertion fails.</param>
            <param name="parameters">The parameters to format the message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HasCount``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Tests whether the collection has the expected count/length.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="expected">The expected count.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HasCount``1(System.Int32,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Tests whether the collection has the expected count/length.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="expected">The expected count.</param>
            <param name="collection">The collection.</param>
            <param name="message">The message to display when the assertion fails.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HasCount``1(System.Int32,System.Collections.Generic.IEnumerable{``0},Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertCountInterpolatedStringHandler{``0}@)">
            <summary>
            Tests whether the collection has the expected count/length.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="expected">The expected count.</param>
            <param name="collection">The collection.</param>
            <param name="message">The message to display when the assertion fails.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HasCount``1(System.Int32,System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>
            Tests whether the collection has the expected count/length.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="expected">The expected count.</param>
            <param name="collection">The collection.</param>
            <param name="message">The message format to display when the assertion fails.</param>
            <param name="parameters">The parameters to format the message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Tests that the collection is empty.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Tests that the collection is empty.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="collection">The collection.</param>
            <param name="message">The message to display when the assertion fails.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsEmpty``1(System.Collections.Generic.IEnumerable{``0},Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertCountInterpolatedStringHandler{``0}@)">
            <summary>
            Tests that the collection is empty.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="collection">The collection.</param>
            <param name="message">The message to display when the assertion fails.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>
            Tests that the collection is empty.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="collection">The collection.</param>
            <param name="message">The message format to display when the assertion fails.</param>
            <param name="parameters">The parameters to format the message.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.That">
            <summary>
            Gets the singleton instance of the Assert functionality.
            </summary>
            <remarks>
            Users can use this to plug-in custom assertions through C# extension methods.
            For instance, the signature of a custom assertion provider could be "public static void IsOfType&lt;T&gt;(this Assert assert, object obj)"
            Users could then use a syntax similar to the default assertions which in this case is "Assert.That.IsOfType&lt;Dog&gt;(animal);"
            More documentation is at "https://github.com/Microsoft/testfx/docs/README.md".
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNullChars(System.String)">
            <summary>
            Replaces null characters ('\0') with "\\0".
            </summary>
            <param name="input">
            The string to search.
            </param>
            <returns>
            The converted string with null characters replaced by "\\0".
            </returns>
            <remarks>
            This is only public and still present to preserve compatibility with the V1 framework.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowAssertFailed(System.String,System.String)">
            <summary>
            Helper function that creates and throws an AssertionFailedException.
            </summary>
            <param name="assertionName">
            name of the assertion throwing an exception.
            </param>
            <param name="message">
            The assertion failure message.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.BuildUserMessage(System.String,System.Object[])">
            <summary>
            Builds the formatted message using the given user format message and parameters.
            </summary>
            <param name="format">
            A composite format string.
            </param>
            <param name="parameters">
            An object array that contains zero or more objects to format.
            </param>
            <returns>
            The formatted string based on format and parameters.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.CheckParameterNotNull(System.Object,System.String,System.String,System.String,System.Object[])">
            <summary>
            Checks the parameter for valid conditions.
            </summary>
            <param name="param">
            The parameter.
            </param>
            <param name="assertionName">
            The assertion Name.
            </param>
            <param name="parameterName">
            parameter name.
            </param>
            <param name="message">
            message for the invalid parameter exception.
            </param>
            <param name="parameters">
            The parameters.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(System.Object)">
            <summary>
            Safely converts an object to a string, handling null values and null characters.
            Null values are converted to "(null)". Null characters are converted to "\\0".
            </summary>
            <param name="input">
            The object to convert to a string.
            </param>
            <returns>
            The converted string.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Equals(System.Object,System.Object)">
            <summary>
            Static equals overloads are used for comparing instances of two types for reference
            equality. This method should <b>not</b> be used for comparison of two instances for
            equality. Please use Assert.AreEqual and associated overloads in your unit tests.
            </summary>
            <param name="objA"> Object A. </param>
            <param name="objB"> Object B. </param>
            <returns> Never returns. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            Static ReferenceEquals overloads are used for comparing instances of two types for reference
            equality. This method should <b>not</b> be used for comparison of two instances for
            reference equality. Please use Assert.AreSame and associated overloads in your unit tests.
            </summary>
            <param name="objA"> Object A. </param>
            <param name="objB"> Object B. </param>
            <returns> Never returns. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.EndsWith(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified string ends with the specified substring
            and throws an exception if the test string does not end with the
            substring.
            </summary>
            <param name="substring">
            The string expected to be a suffix of <paramref name="value"/>.
            </param>
            <param name="value">
            The string that is expected to end with <paramref name="substring"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not end with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not end with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.EndsWith(System.String,System.String,System.StringComparison,System.String)">
            <summary>
            Tests whether the specified string ends with the specified substring
            and throws an exception if the test string does not end with the
            substring.
            </summary>
            <param name="substring">
            The string expected to be a suffix of <paramref name="value"/>.
            </param>
            <param name="value">
            The string that is expected to end with <paramref name="substring"/>.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not end with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not start with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotEndWith(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified string does not end with the specified substring
            and throws an exception if the test string does not end with the
            substring.
            </summary>
            <param name="substring">
            The string expected not to be a suffix of <paramref name="value"/>.
            </param>
            <param name="value">
            The string that is expected not to end with <paramref name="substring"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            ends with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> ends with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotEndWith(System.String,System.String,System.StringComparison,System.String)">
            <summary>
            Tests whether the specified string does not end with the specified substring
            and throws an exception if the test string does not end with the
            substring.
            </summary>
            <param name="substring">
            The string expected not to be a suffix of <paramref name="value"/>.
            </param>
            <param name="value">
            The string that is expected not to end with <paramref name="substring"/>.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            ends with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> ends with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail">
            <summary>
            Throws an AssertFailedException.
            </summary>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Always thrown.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail(System.String)">
            <summary>
            Throws an AssertFailedException.
            </summary>
            <param name="message">
            The message to include in the exception. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Always thrown.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail(System.String,System.Object[])">
            <summary>
            Throws an AssertFailedException.
            </summary>
            <param name="message">
            The message to include in the exception. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Always thrown.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsGreaterThan``1(``0,``0,System.String)">
            <summary>
            Tests whether the value is greater than the lower bound and throws an exception
            if it is not.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="lowerBound">
            The lower bound value that the value should exceed.
            </param>
            <param name="value">
            The value to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is not greater than <paramref name="lowerBound"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not greater than <paramref name="lowerBound"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsGreaterThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Tests whether the value is greater than or equal to the lower bound and throws an exception
            if it is not.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="lowerBound">
            The lower bound value that the value should meet or exceed.
            </param>
            <param name="value">
            The value to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is not greater than or equal to <paramref name="lowerBound"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not greater than or equal to <paramref name="lowerBound"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsLessThan``1(``0,``0,System.String)">
            <summary>
            Tests whether the value is less than the upper bound and throws an exception
            if it is not.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="upperBound">
            The upper bound value that the value should be less than.
            </param>
            <param name="value">
            The value to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is not less than <paramref name="upperBound"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not less than <paramref name="upperBound"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsLessThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Tests whether the value is less than or equal to the upper bound and throws an exception
            if it is not.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="upperBound">
            The upper bound value that the value should not exceed.
            </param>
            <param name="value">
            The value to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is not less than or equal to <paramref name="upperBound"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not less than or equal to <paramref name="upperBound"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsPositive``1(``0,System.String)">
            <summary>
            Tests whether the specified value is positive and throws an exception
            if it is not.
            </summary>
            <typeparam name="T">
            The type of value to test.
            </typeparam>
            <param name="value">
            The value to test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is not positive. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not positive.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNegative``1(``0,System.String)">
            <summary>
            Tests whether the specified value is negative and throws an exception
            if it is not.
            </summary>
            <typeparam name="T">
            The type of value to test.
            </typeparam>
            <param name="value">
            The value to test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is not negative. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not negative.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive">
            <summary>
            Throws an AssertInconclusiveException.
            </summary>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">
            Always thrown.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive(System.String)">
            <summary>
            Throws an AssertInconclusiveException.
            </summary>
            <param name="message">
            The message to include in the exception. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">
            Always thrown.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive(System.String,System.Object[])">
            <summary>
            Throws an AssertInconclusiveException.
            </summary>
            <param name="message">
            The message to include in the exception. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">
            Always thrown.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType(System.Object,System.Type)">
            <summary>
            Tests whether the specified object is an instance of the expected
            type and throws an exception if the expected type is not in the
            inheritance hierarchy of the object.
            </summary>
            <param name="value">
            The object the test expects to be of the specified type.
            </param>
            <param name="expectedType">
            The expected type of <paramref name="value"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is null or
            <paramref name="expectedType"/> is not in the inheritance hierarchy
            of <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType``1(System.Object)">
            <summary>
            Tests whether the specified object is an instance of the generic
            type and throws an exception if the generic type is not in the
            inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType``1(System.Object,``0@)">
            <summary>
            Tests whether the specified object is an instance of the generic
            type and throws an exception if the generic type is not in the
            inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType(System.Object,System.Type,System.String)">
            <summary>
            Tests whether the specified object is an instance of the expected
            type and throws an exception if the expected type is not in the
            inheritance hierarchy of the object.
            </summary>
            <param name="value">
            The object the test expects to be of the specified type.
            </param>
            <param name="expectedType">
            The expected type of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is not an instance of <paramref name="expectedType"/>. The message is
            shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is null or
            <paramref name="expectedType"/> is not in the inheritance hierarchy
            of <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType(System.Object,System.Type,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertIsInstanceOfTypeInterpolatedStringHandler@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType(System.Object,System.Type,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType``1(System.Object,System.String)">
            <summary>
            Tests whether the specified object is an instance of the generic
            type and throws an exception if the generic type is not in the
            inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType``1(System.Object,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertGenericIsInstanceOfTypeInterpolatedStringHandler{``0}@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType``1(System.Object,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType``1(System.Object,``0@,System.String)">
            <summary>
            Tests whether the specified object is an instance of the generic
            type and throws an exception if the generic type is not in the
            inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType``1(System.Object,``0@,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertGenericIsInstanceOfTypeInterpolatedStringHandler{``0}@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType``1(System.Object,``0@,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType(System.Object,System.Type,System.String,System.Object[])">
            <summary>
            Tests whether the specified object is an instance of the expected
            type and throws an exception if the expected type is not in the
            inheritance hierarchy of the object.
            </summary>
            <param name="value">
            The object the test expects to be of the specified type.
            </param>
            <param name="expectedType">
            The expected type of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is not an instance of <paramref name="expectedType"/>. The message is
            shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is null or
            <paramref name="expectedType"/> is not in the inheritance hierarchy
            of <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType``1(System.Object,System.String,System.Object[])">
            <summary>
            Tests whether the specified object is an instance of the generic
            type and throws an exception if the generic type is not in the
            inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType``1(System.Object,``0@,System.String,System.Object[])">
            <summary>
            Tests whether the specified object is an instance of the generic
            type and throws an exception if the generic type is not in the
            inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The expected type of <paramref name="value"/>.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType(System.Object,System.Type)">
            <summary>
            Tests whether the specified object is not an instance of the wrong
            type and throws an exception if the specified type is in the
            inheritance hierarchy of the object.
            </summary>
            <param name="value">
            The object the test expects not to be of the specified type.
            </param>
            <param name="wrongType">
            The type that <paramref name="value"/> should not be.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not null and
            <paramref name="wrongType"/> is in the inheritance hierarchy
            of <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType``1(System.Object)">
            <summary>
            Tests whether the specified object is not an instance of the wrong generic
            type and throws an exception if the specified type is in the
            inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The type that <paramref name="value"/> should not be.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType(System.Object,System.Type,System.String)">
            <summary>
            Tests whether the specified object is not an instance of the wrong
            type and throws an exception if the specified type is in the
            inheritance hierarchy of the object.
            </summary>
            <param name="value">
            The object the test expects not to be of the specified type.
            </param>
            <param name="wrongType">
            The type that <paramref name="value"/> should not be.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is an instance of <paramref name="wrongType"/>. The message is shown
            in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not null and
            <paramref name="wrongType"/> is in the inheritance hierarchy
            of <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType(System.Object,System.Type,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertIsNotInstanceOfTypeInterpolatedStringHandler@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType(System.Object,System.Type,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType``1(System.Object,System.String)">
            <summary>
            Tests whether the specified object is not an instance of the wrong generic
            type and throws an exception if the specified type is in the
            inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The type that <paramref name="value"/> should not be.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType``1(System.Object,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertGenericIsNotInstanceOfTypeInterpolatedStringHandler{``0})">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType``1(System.Object,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType(System.Object,System.Type,System.String,System.Object[])">
            <summary>
            Tests whether the specified object is not an instance of the wrong
            type and throws an exception if the specified type is in the
            inheritance hierarchy of the object.
            </summary>
            <param name="value">
            The object the test expects not to be of the specified type.
            </param>
            <param name="wrongType">
            The type that <paramref name="value"/> should not be.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is an instance of <paramref name="wrongType"/>. The message is shown
            in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not null and
            <paramref name="wrongType"/> is in the inheritance hierarchy
            of <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType``1(System.Object,System.String,System.Object[])">
            <summary>
            Tests whether the specified object is not an instance of the wrong generic
            type and throws an exception if the specified type is in the
            inheritance hierarchy of the object.
            </summary>
            <typeparam name="T">The type that <paramref name="value"/> should not be.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object)">
            <summary>
            Tests whether the specified object is null and throws an exception
            if it is not.
            </summary>
            <param name="value">
            The object the test expects to be null.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not null.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object,System.String)">
            <summary>
            Tests whether the specified object is null and throws an exception
            if it is not.
            </summary>
            <param name="value">
            The object the test expects to be null.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is not null. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not null.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertIsNullInterpolatedStringHandler@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object,System.String,System.Object[])">
            <summary>
            Tests whether the specified object is null and throws an exception
            if it is not.
            </summary>
            <param name="value">
            The object the test expects to be null.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is not null. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not null.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull(System.Object)">
            <summary>
            Tests whether the specified object is non-null and throws an exception
            if it is null.
            </summary>
            <param name="value">
            The object the test expects not to be null.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull(System.Object,System.String)">
            <summary>
            Tests whether the specified object is non-null and throws an exception
            if it is null.
            </summary>
            <param name="value">
            The object the test expects not to be null.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is null. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull(System.Object,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertIsNotNullInterpolatedStringHandler@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull(System.Object,System.String,System.Object[])">
            <summary>
            Tests whether the specified object is non-null and throws an exception
            if it is null.
            </summary>
            <param name="value">
            The object the test expects not to be null.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is null. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Boolean)">
            <summary>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </summary>
            <param name="condition">
            The condition the test expects to be true.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is false.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Nullable{System.Boolean})">
            <summary>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </summary>
            <param name="condition">
            The condition the test expects to be true.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is false.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </summary>
            <param name="condition">
            The condition the test expects to be true.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="condition"/>
            is false. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is false.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Boolean,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertIsTrueInterpolatedStringHandler@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Boolean,System.String)"/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Nullable{System.Boolean},System.String)">
            <summary>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </summary>
            <param name="condition">
            The condition the test expects to be true.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="condition"/>
            is false. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is false.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Nullable{System.Boolean},Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertIsTrueInterpolatedStringHandler@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Nullable{System.Boolean},System.String)"/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </summary>
            <param name="condition">
            The condition the test expects to be true.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="condition"/>
            is false. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is false.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Nullable{System.Boolean},System.String,System.Object[])">
            <summary>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </summary>
            <param name="condition">
            The condition the test expects to be true.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="condition"/>
            is false. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is false.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean)">
            <summary>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </summary>
            <param name="condition">
            The condition the test expects to be false.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is true.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Nullable{System.Boolean})">
            <summary>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </summary>
            <param name="condition">
            The condition the test expects to be false.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is true.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </summary>
            <param name="condition">
            The condition the test expects to be false.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="condition"/>
            is true. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is true.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertIsFalseInterpolatedStringHandler@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Nullable{System.Boolean},System.String)">
            <summary>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </summary>
            <param name="condition">
            The condition the test expects to be false.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="condition"/>
            is true. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is true.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Nullable{System.Boolean},Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertIsFalseInterpolatedStringHandler@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </summary>
            <param name="condition">
            The condition the test expects to be false.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="condition"/>
            is true. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is true.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Nullable{System.Boolean},System.String,System.Object[])">
            <summary>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </summary>
            <param name="condition">
            The condition the test expects to be false.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="condition"/>
            is true. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is true.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.MatchesRegex(System.Text.RegularExpressions.Regex,System.String,System.String)">
            <summary>
            Tests whether the specified string MatchesRegex a regular expression and
            throws an exception if the string does not match the expression.
            </summary>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to match.
            </param>
            <param name="value">
            The string that is expected to match <paramref name="pattern"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not match <paramref name="pattern"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="pattern"/> is null,
            or <paramref name="value"/> does not match <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.MatchesRegex(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified string MatchesRegex a regular expression and
            throws an exception if the string does not match the expression.
            </summary>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to match.
            </param>
            <param name="value">
            The string that is expected to match <paramref name="pattern"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not match <paramref name="pattern"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="pattern"/> is null,
            or <paramref name="value"/> does not match <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotMatchRegex(System.Text.RegularExpressions.Regex,System.String,System.String)">
            <summary>
            Tests whether the specified string does not match a regular expression
            and throws an exception if the string MatchesRegex the expression.
            </summary>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to not match.
            </param>
            <param name="value">
            The string that is expected not to match <paramref name="pattern"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            MatchesRegex <paramref name="pattern"/>. The message is shown in test
            results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="pattern"/> is null,
            or <paramref name="value"/> MatchesRegex <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotMatchRegex(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified string does not match a regular expression
            and throws an exception if the string MatchesRegex the expression.
            </summary>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to not match.
            </param>
            <param name="value">
            The string that is expected not to match <paramref name="pattern"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            MatchesRegex <paramref name="pattern"/>. The message is shown in test
            results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="pattern"/> is null,
            or <paramref name="value"/> MatchesRegex <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.StartsWith(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified string begins with the specified substring
            and throws an exception if the test string does not start with the
            substring.
            </summary>
            <param name="substring">
            The string expected to be a prefix of <paramref name="value"/>.
            </param>
            <param name="value">
            The string that is expected to begin with <paramref name="substring"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not begin with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not start with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.StartsWith(System.String,System.String,System.StringComparison,System.String)">
            <summary>
            Tests whether the specified string begins with the specified substring
            and throws an exception if the test string does not start with the
            substring.
            </summary>
            <param name="substring">
            The string expected to be a prefix of <paramref name="value"/>.
            </param>
            <param name="value">
            The string that is expected to begin with <paramref name="substring"/>.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not begin with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not start with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotStartWith(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified string does not begin with the specified substring
            and throws an exception if the test string does start with the substring.
            </summary>
            <param name="substring">
            The string expected to be a prefix of <paramref name="value"/>.
            </param>
            <param name="value">
            The string that is expected to begin with <paramref name="substring"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not begin with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not start with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.DoesNotStartWith(System.String,System.String,System.StringComparison,System.String)">
            <summary>
            Tests whether the specified string does not begin with the specified substring
            and throws an exception if the test string does start with the substring.
            </summary>
            <param name="substring">
            The string expected to be a prefix of <paramref name="value"/>.
            </param>
            <param name="value">
            The string that is expected to begin with <paramref name="substring"/>.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not begin with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not start with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Throws``1(System.Action,System.String,System.Object[])">
            <summary>
            Asserts that the delegate <paramref name="action"/> throws an exception of type <typeparamref name="TException"/>
            (or derived type) and throws <c>AssertFailedException</c> if code does not throws exception or throws
            exception of type other than <typeparamref name="TException"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="action"/> does not throws exception of type <typeparamref name="TException"/>.
            </param>
            <param name="messageArgs">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <typeparam name="TException">
            The type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="TException"/>.
            </exception>
            <returns>
            The exception that was thrown.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Throws``1(System.Func{System.Object},System.String,System.Object[])">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Throws``1(System.Action,System.String,System.Object[])"/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Throws``1(System.Action,System.Func{System.Exception,System.String})">
            <summary>
            Asserts that the delegate <paramref name="action"/> throws an exception of type <typeparamref name="TException"/>
            (or derived type) and throws <c>AssertFailedException</c> if code does not throws exception or throws
            exception of type other than <typeparamref name="TException"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <param name="messageBuilder">
            A func that takes the thrown Exception (or null if the action didn't throw any exception) to construct the message to include in the exception when <paramref name="action"/> does not throws exception of type <typeparamref name="TException"/>.
            </param>
            <typeparam name="TException">
            The type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="TException"/>.
            </exception>
            <returns>
            The exception that was thrown.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Throws``1(System.Func{System.Object},System.Func{System.Exception,System.String})">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Throws``1(System.Action,System.Func{System.Exception,System.String})"/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Throws``1(System.Action,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertNonStrictThrowsInterpolatedStringHandler{``0}@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Throws``1(System.Action,System.String,System.Object[])" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Throws``1(System.Func{System.Object},Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertNonStrictThrowsInterpolatedStringHandler{``0}@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Throws``1(System.Action,System.String,System.Object[])" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExactly``1(System.Action,System.String,System.Object[])">
            <summary>
            Asserts that the delegate <paramref name="action"/> throws an exception of type <typeparamref name="TException"/>
            (and not of derived type) and throws <c>AssertFailedException</c> if code does not throws exception or throws
            exception of type other than <typeparamref name="TException"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="action"/> does not throws exception of type <typeparamref name="TException"/>.
            </param>
            <param name="messageArgs">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <typeparam name="TException">
            The type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="TException"/>.
            </exception>
            <returns>
            The exception that was thrown.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExactly``1(System.Func{System.Object},System.String,System.Object[])">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExactly``1(System.Action,System.String,System.Object[])" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExactly``1(System.Action,System.Func{System.Exception,System.String})">
            <summary>
            Asserts that the delegate <paramref name="action"/> throws an exception of type <typeparamref name="TException"/>
            (and not of derived type) and throws <c>AssertFailedException</c> if code does not throws exception or throws
            exception of type other than <typeparamref name="TException"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <param name="messageBuilder">
            A func that takes the thrown Exception (or null if the action didn't throw any exception) to construct the message to include in the exception when <paramref name="action"/> does not throws exception of type <typeparamref name="TException"/>.
            </param>
            <typeparam name="TException">
            The type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="TException"/>.
            </exception>
            <returns>
            The exception that was thrown.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExactly``1(System.Func{System.Object},System.Func{System.Exception,System.String})">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExactly``1(System.Action,System.Func{System.Exception,System.String})" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExactly``1(System.Action,Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertThrowsExactlyInterpolatedStringHandler{``0}@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExactly``1(System.Action,System.String,System.Object[])" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExactly``1(System.Func{System.Object},Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AssertThrowsExactlyInterpolatedStringHandler{``0}@)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExactly``1(System.Action,System.String,System.Object[])" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsException``1(System.Action)">
            <summary>
            Tests whether the code specified by delegate <paramref name="action"/> throws exact given exception
            of type <typeparamref name="T"/> (and not of derived type) and throws <c>AssertFailedException</c>
            if code does not throws exception or throws exception of type other than <typeparamref name="T"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <typeparam name="T">
            The exact type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="T"/>.
            </exception>
            <returns>
            The exception that was thrown.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsException``1(System.Action,System.String)">
            <summary>
            Tests whether the code specified by delegate <paramref name="action"/> throws exact given exception
            of type <typeparamref name="T"/> (and not of derived type) and throws <c>AssertFailedException</c>
            if code does not throws exception or throws exception of type other than <typeparamref name="T"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="action"/>
            does not throws exception of type <typeparamref name="T"/>.
            </param>
            <typeparam name="T">
            Type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="T"/>.
            </exception>
            <returns>
            The exception that was thrown.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsException``1(System.Func{System.Object})">
            <summary>
            Tests whether the code specified by delegate <paramref name="action"/> throws exact given exception
            of type <typeparamref name="T"/> (and not of derived type) and throws <c>AssertFailedException</c>
            if code does not throws exception or throws exception of type other than <typeparamref name="T"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <typeparam name="T">
            Type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="T"/>.
            </exception>
            <returns>
            The exception that was thrown.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsException``1(System.Func{System.Object},System.String)">
            <summary>
            Tests whether the code specified by delegate <paramref name="action"/> throws exact given exception
            of type <typeparamref name="T"/> (and not of derived type) and throws <c>AssertFailedException</c>
            if code does not throws exception or throws exception of type other than <typeparamref name="T"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="action"/>
            does not throws exception of type <typeparamref name="T"/>.
            </param>
            <typeparam name="T">
            Type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="T"/>.
            </exception>
            <returns>
            The exception that was thrown.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsException``1(System.Func{System.Object},System.String,System.Object[])">
            <summary>
            Tests whether the code specified by delegate <paramref name="action"/> throws exact given exception
            of type <typeparamref name="T"/> (and not of derived type) and throws <c>AssertFailedException</c>
            if code does not throws exception or throws exception of type other than <typeparamref name="T"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="action"/>
            does not throws exception of type <typeparamref name="T"/>.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <typeparam name="T">
            Type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throw exception of type <typeparamref name="T"/>.
            </exception>
            <returns>
            The exception that was thrown.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsException``1(System.Action,System.String,System.Object[])">
            <summary>
            Tests whether the code specified by delegate <paramref name="action"/> throws exact given exception
            of type <typeparamref name="T"/> (and not of derived type) and throws <c>AssertFailedException</c>
            if code does not throws exception or throws exception of type other than <typeparamref name="T"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="action"/>
            does not throws exception of type <typeparamref name="T"/>.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <typeparam name="T">
            Type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="T"/>.
            </exception>
            <returns>
            The exception that was thrown.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsAsync``1(System.Func{System.Threading.Tasks.Task},System.String,System.Object[])">
            <summary>
            Asserts that the delegate <paramref name="action"/> throws an exception of type <typeparamref name="TException"/>
            (or derived type) and throws <c>AssertFailedException</c> if code does not throws exception or throws
            exception of type other than <typeparamref name="TException"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="action"/> does not throws exception of type <typeparamref name="TException"/>.
            </param>
            <param name="messageArgs">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <typeparam name="TException">
            The type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="TException"/>.
            </exception>
            <returns>
            The exception that was thrown.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExactlyAsync``1(System.Func{System.Threading.Tasks.Task},System.String,System.Object[])">
            <summary>
            Asserts that the delegate <paramref name="action"/> throws an exception of type <typeparamref name="TException"/>
            (and not of derived type) and throws <c>AssertFailedException</c> if code does not throws exception or throws
            exception of type other than <typeparamref name="TException"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="action"/> does not throws exception of type <typeparamref name="TException"/>.
            </param>
            <param name="messageArgs">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <typeparam name="TException">
            The type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="TException"/>.
            </exception>
            <returns>
            The exception that was thrown.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsAsync``1(System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.String})">
            <summary>
            Asserts that the delegate <paramref name="action"/> throws an exception of type <typeparamref name="TException"/>
            (or derived type) and throws <c>AssertFailedException</c> if code does not throws exception or throws
            exception of type other than <typeparamref name="TException"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <param name="messageBuilder">
            A func that takes the thrown Exception (or null if the action didn't throw any exception) to construct the message to include in the exception when <paramref name="action"/> does not throws exception of type <typeparamref name="TException"/>.
            </param>
            <typeparam name="TException">
            The type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="TException"/>.
            </exception>
            <returns>
            The exception that was thrown.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExactlyAsync``1(System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.String})">
            <summary>
            Asserts that the delegate <paramref name="action"/> throws an exception of type <typeparamref name="TException"/>
            (and not of derived type) and throws <c>AssertFailedException</c> if code does not throws exception or throws
            exception of type other than <typeparamref name="TException"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <param name="messageBuilder">
            A func that takes the thrown Exception (or null if the action didn't throw any exception) to construct the message to include in the exception when <paramref name="action"/> does not throws exception of type <typeparamref name="TException"/>.
            </param>
            <typeparam name="TException">
            The type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="TException"/>.
            </exception>
            <returns>
            The exception that was thrown.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExceptionAsync``1(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Tests whether the code specified by delegate <paramref name="action"/> throws exact given exception
            of type <typeparamref name="T"/> (and not of derived type) and throws <c>AssertFailedException</c>
            if code does not throws exception or throws exception of type other than <typeparamref name="T"/>.
            </summary>
            <param name="action">
            Delegate to code to be tested and which is expected to throw exception.
            </param>
            <typeparam name="T">
            Type of exception expected to be thrown.
            </typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="T"/>.
            </exception>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> executing the delegate.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExceptionAsync``1(System.Func{System.Threading.Tasks.Task},System.String)">
            <summary>
            Tests whether the code specified by delegate <paramref name="action"/> throws exact given exception
            of type <typeparamref name="T"/> (and not of derived type) and throws <c>AssertFailedException</c>
            if code does not throws exception or throws exception of type other than <typeparamref name="T"/>.
            </summary>
            <param name="action">Delegate to code to be tested and which is expected to throw exception.</param>
            <param name="message">
            The message to include in the exception when <paramref name="action"/>
            does not throws exception of type <typeparamref name="T"/>.
            </param>
            <typeparam name="T">Type of exception expected to be thrown.</typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="T"/>.
            </exception>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> executing the delegate.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ThrowsExceptionAsync``1(System.Func{System.Threading.Tasks.Task},System.String,System.Object[])">
            <summary>
            Tests whether the code specified by delegate <paramref name="action"/> throws exact given exception
            of type <typeparamref name="T"/> (and not of derived type) and throws <c>AssertFailedException</c>
            if code does not throws exception or throws exception of type other than <typeparamref name="T"/>.
            </summary>
            <param name="action">Delegate to code to be tested and which is expected to throw exception.</param>
            <param name="message">
            The message to include in the exception when <paramref name="action"/>
            does not throws exception of type <typeparamref name="T"/>.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <typeparam name="T">Type of exception expected to be thrown.</typeparam>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="action"/> does not throws exception of type <typeparamref name="T"/>.
            </exception>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> executing the delegate.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert">
            <summary>
            A collection of helper classes to test various conditions associated
            with collections within unit tests. If the condition being tested is not
            met, an exception is thrown.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.That">
            <summary>
            Gets the singleton instance of the CollectionAssert functionality.
            </summary>
            <remarks>
            Users can use this to plug-in custom assertions through C# extension methods.
            For instance, the signature of a custom assertion provider could be "public static void AreEqualUnordered(this CollectionAssert customAssert, ICollection expected, ICollection actual)"
            Users could then use a syntax similar to the default assertions which in this case is "CollectionAssert.That.AreEqualUnordered(list1, list2);"
            More documentation is at "https://github.com/Microsoft/testfx/docs/README.md".
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.Contains(System.Collections.ICollection,System.Object)">
            <summary>
            Tests whether the specified collection contains the specified element
            and throws an exception if the element is not in the collection.
            </summary>
            <param name="collection">
            The collection in which to search for the element.
            </param>
            <param name="element">
            The element that is expected to be in the collection.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> does not contain
            element <paramref name="element"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.Contains(System.Collections.ICollection,System.Object,System.String)">
            <summary>
            Tests whether the specified collection contains the specified element
            and throws an exception if the element is not in the collection.
            </summary>
            <param name="collection">
            The collection in which to search for the element.
            </param>
            <param name="element">
            The element that is expected to be in the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="element"/>
            is not in <paramref name="collection"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> does not contain
            element <paramref name="element"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.Contains(System.Collections.ICollection,System.Object,System.String,System.Object[])">
            <summary>
            Tests whether the specified collection contains the specified element
            and throws an exception if the element is not in the collection.
            </summary>
            <param name="collection">
            The collection in which to search for the element.
            </param>
            <param name="element">
            The element that is expected to be in the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="element"/>
            is not in <paramref name="collection"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> does not contain
            element <paramref name="element"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object)">
            <summary>
            Tests whether the specified collection does not contain the specified
            element and throws an exception if the element is in the collection.
            </summary>
            <param name="collection">
            The collection in which to search for the element.
            </param>
            <param name="element">
            The element that is expected not to be in the collection.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> contains
            element <paramref name="element"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object,System.String)">
            <summary>
            Tests whether the specified collection does not contain the specified
            element and throws an exception if the element is in the collection.
            </summary>
            <param name="collection">
            The collection in which to search for the element.
            </param>
            <param name="element">
            The element that is expected not to be in the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="element"/>
            is in <paramref name="collection"/>. The message is shown in test
            results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> contains
            element <paramref name="element"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object,System.String,System.Object[])">
            <summary>
            Tests whether the specified collection does not contain the specified
            element and throws an exception if the element is in the collection.
            </summary>
            <param name="collection">
            The collection in which to search for the element.
            </param>
            <param name="element">
            The element that is expected not to be in the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="element"/>
            is in <paramref name="collection"/>. The message is shown in test
            results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> contains
            element <paramref name="element"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection)">
            <summary>
            Tests whether all items in the specified collection are non-null and throws
            an exception if any element is null.
            </summary>
            <param name="collection">
            The collection in which to search for null elements.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> contains a null element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection,System.String)">
            <summary>
            Tests whether all items in the specified collection are non-null and throws
            an exception if any element is null.
            </summary>
            <param name="collection">
            The collection in which to search for null elements.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="collection"/>
            contains a null element. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> contains a null element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether all items in the specified collection are non-null and throws
            an exception if any element is null.
            </summary>
            <param name="collection">
            The collection in which to search for null elements.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="collection"/>
            contains a null element. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> contains a null element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection)">
            <summary>
            Tests whether all items in the specified collection are unique or not and
            throws if any two elements in the collection are equal.
            </summary>
            <param name="collection">
            The collection in which to search for duplicate elements.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> contains at least one duplicate
            element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection,System.String)">
            <summary>
            Tests whether all items in the specified collection are unique or not and
            throws if any two elements in the collection are equal.
            </summary>
            <param name="collection">
            The collection in which to search for duplicate elements.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="collection"/>
            contains at least one duplicate element. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> contains at least one duplicate
            element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether all items in the specified collection are unique or not and
            throws if any two elements in the collection are equal.
            </summary>
            <param name="collection">
            The collection in which to search for duplicate elements.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="collection"/>
            contains at least one duplicate element. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null, or <paramref name="collection"/> contains at least one duplicate
            element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Tests whether one collection is a subset of another collection and
            throws an exception if any element in the subset is not also in the
            superset.
            </summary>
            <param name="subset">
            The collection expected to be a subset of <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection expected to be a superset of <paramref name="subset"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="subset"/> is null, or <paramref name="superset"/> is null,
            or <paramref name="subset"/> contains at least one element not contained in
            <paramref name="superset"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Tests whether one collection is a subset of another collection and
            throws an exception if any element in the subset is not also in the
            superset.
            </summary>
            <param name="subset">
            The collection expected to be a subset of <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection expected to be a superset of <paramref name="subset"/>.
            </param>
            <param name="message">
            The message to include in the exception when an element in
            <paramref name="subset"/> is not found in <paramref name="superset"/>.
            The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="subset"/> is null, or <paramref name="superset"/> is null,
            or <paramref name="subset"/> contains at least one element not contained in
            <paramref name="superset"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether one collection is a subset of another collection and
            throws an exception if any element in the subset is not also in the
            superset.
            </summary>
            <param name="subset">
            The collection expected to be a subset of <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection expected to be a superset of <paramref name="subset"/>.
            </param>
            <param name="message">
            The message to include in the exception when an element in
            <paramref name="subset"/> is not found in <paramref name="superset"/>.
            The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="subset"/> is null, or <paramref name="superset"/> is null,
            or <paramref name="subset"/> contains at least one element not contained in
            <paramref name="superset"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Tests whether one collection is not a subset of another collection and
            throws an exception if all elements in the subset are also in the
            superset.
            </summary>
            <param name="subset">
            The collection expected not to be a subset of <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection expected not to be a superset of <paramref name="subset"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="subset"/> is null, or <paramref name="superset"/> is null,
            or all elements of <paramref name="subset"/> are contained in <paramref name="superset"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Tests whether one collection is not a subset of another collection and
            throws an exception if all elements in the subset are also in the
            superset.
            </summary>
            <param name="subset">
            The collection expected not to be a subset of <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection expected not to be a superset of <paramref name="subset"/>.
            </param>
            <param name="message">
            The message to include in the exception when every element in
            <paramref name="subset"/> is also found in <paramref name="superset"/>.
            The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="subset"/> is null, or <paramref name="superset"/> is null,
            or all elements of <paramref name="subset"/> are contained in <paramref name="superset"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether one collection is not a subset of another collection and
            throws an exception if all elements in the subset are also in the
            superset.
            </summary>
            <param name="subset">
            The collection expected not to be a subset of <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection expected not to be a superset of <paramref name="subset"/>.
            </param>
            <param name="message">
            The message to include in the exception when every element in
            <paramref name="subset"/> is also found in <paramref name="superset"/>.
            The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="subset"/> is null, or <paramref name="superset"/> is null,
            or all elements of <paramref name="subset"/> are contained in <paramref name="superset"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Tests whether two collections contain the same elements and throws an
            exception if either collection contains an element not in the other
            collection.
            </summary>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if any element was found in one of the collections but not the other.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Tests whether two collections contain the same elements and throws an
            exception if either collection contains an element not in the other
            collection.
            </summary>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="message">
            The message to include in the exception when an element was found
            in one of the collections but not the other. The message is shown
            in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if any element was found in one of the collections but not the other.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether two collections contain the same elements and throws an
            exception if either collection contains an element not in the other
            collection.
            </summary>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="message">
            The message to include in the exception when an element was found
            in one of the collections but not the other. The message is shown
            in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if any element was found in one of the collections but not the other.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Tests whether two collections contain the same elements and throws an
            exception if either collection contains an element not in the other
            collection.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if any element was found in one of the collections but not the other.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Tests whether two collections contain the same elements and throws an
            exception if either collection contains an element not in the other
            collection.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <param name="message">
            The message to include in the exception when an element was found
            in one of the collections but not the other. The message is shown
            in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if any element was found in one of the collections but not the other.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEquivalent``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
            <summary>
            Tests whether two collections contain the same elements and throws an
            exception if either collection contains an element not in the other
            collection.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <param name="message">
            The message to include in the exception when an element was found
            in one of the collections but not the other. The message is shown
            in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if any element was found in one of the collections but not the other.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Tests whether two collections contain the different elements and throws an
            exception if the two collections contain identical elements without regard
            to order.
            </summary>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects to be different than the actual collection.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if collections contain the same elements, including the same number of duplicate
            occurrences of each element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Tests whether two collections contain the different elements and throws an
            exception if the two collections contain identical elements without regard
            to order.
            </summary>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects to be different than the actual collection.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            contains the same elements as <paramref name="expected"/>. The message
            is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if collections contain the same elements, including the same number of duplicate
            occurrences of each element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether two collections contain the different elements and throws an
            exception if the two collections contain identical elements without regard
            to order.
            </summary>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects to be different than the actual collection.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            contains the same elements as <paramref name="expected"/>. The message
            is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if collections contain the same elements, including the same number of duplicate
            occurrences of each element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Tests whether two collections contain the different elements and throws an
            exception if the two collections contain identical elements without regard
            to order.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects to be different than the actual collection.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if collections contain the same elements, including the same number of duplicate
            occurrences of each element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String)">
            <summary>
            Tests whether two collections contain the different elements and throws an
            exception if the two collections contain identical elements without regard
            to order.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects to be different than the actual collection.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            contains the same elements as <paramref name="expected"/>. The message
            is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if collections contain the same elements, including the same number of duplicate
            occurrences of each element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEquivalent``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
            <summary>
            Tests whether two collections contain the different elements and throws an
            exception if the two collections contain identical elements without regard
            to order.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="expected">
            The first collection to compare. This contains the elements the test
            expects to be different than the actual collection.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by
            the code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            contains the same elements as <paramref name="expected"/>. The message
            is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="expected"/> and <paramref name="actual"/> nullabilities don't match,
            or if collections contain the same elements, including the same number of duplicate
            occurrences of each element.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type)">
            <summary>
            Tests whether all elements in the specified collection are instances
            of the expected type and throws an exception if the expected type is
            not in the inheritance hierarchy of one or more of the elements.
            </summary>
            <param name="collection">
            The collection containing elements the test expects to be of the
            specified type.
            </param>
            <param name="expectedType">
            The expected type of each element of <paramref name="collection"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null or, <paramref name="expectedType"/> is null,
            or some elements of <paramref name="collection"/> do not inherit/implement
            <paramref name="expectedType"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String)">
            <summary>
            Tests whether all elements in the specified collection are instances
            of the expected type and throws an exception if the expected type is
            not in the inheritance hierarchy of one or more of the elements.
            </summary>
            <param name="collection">
            The collection containing elements the test expects to be of the
            specified type.
            </param>
            <param name="expectedType">
            The expected type of each element of <paramref name="collection"/>.
            </param>
            <param name="message">
            The message to include in the exception when an element in
            <paramref name="collection"/> is not an instance of
            <paramref name="expectedType"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null or, <paramref name="expectedType"/> is null,
            or some elements of <paramref name="collection"/> do not inherit/implement
            <paramref name="expectedType"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String,System.Object[])">
            <summary>
            Tests whether all elements in the specified collection are instances
            of the expected type and throws an exception if the expected type is
            not in the inheritance hierarchy of one or more of the elements.
            </summary>
            <param name="collection">
            The collection containing elements the test expects to be of the
            specified type.
            </param>
            <param name="expectedType">
            The expected type of each element of <paramref name="collection"/>.
            </param>
            <param name="message">
            The message to include in the exception when an element in
            <paramref name="collection"/> is not an instance of
            <paramref name="expectedType"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="collection"/> is null or, <paramref name="expectedType"/> is null,
            or some elements of <paramref name="collection"/> do not inherit/implement
            <paramref name="expectedType"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Tests whether the specified collections are equal and throws an exception
            if the two collections are not equal. Equality is defined as having the same
            elements in the same order and quantity. Whether two elements are the same
            is checked using <see cref="M:System.Object.Equals(System.Object,System.Object)" /> method.
            Different references to the same value are considered equal.
            </summary>
            <param name="expected">
            The first collection to compare. This is the collection the tests expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Tests whether the specified collections are equal and throws an exception
            if the two collections are not equal. Equality is defined as having the same
            elements in the same order and quantity. Whether two elements are the same
            is checked using <see cref="M:System.Object.Equals(System.Object,System.Object)" /> method.
            Different references to the same value are considered equal.
            </summary>
            <param name="expected">
            The first collection to compare. This is the collection the tests expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether the specified collections are equal and throws an exception
            if the two collections are not equal. Equality is defined as having the same
            elements in the same order and quantity. Whether two elements are the same
            is checked using <see cref="M:System.Object.Equals(System.Object,System.Object)" /> method.
            Different references to the same value are considered equal.
            </summary>
            <param name="expected">
            The first collection to compare. This is the collection the tests expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Tests whether the specified collections are unequal and throws an exception
            if the two collections are equal. Equality is defined as having the same
            elements in the same order and quantity. Whether two elements are the same
            is checked using <see cref="M:System.Object.Equals(System.Object,System.Object)" /> method.
            Different references to the same value are considered equal.
            </summary>
            <param name="notExpected">
            The first collection to compare. This is the collection the tests expects
            not to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Tests whether the specified collections are unequal and throws an exception
            if the two collections are equal. Equality is defined as having the same
            elements in the same order and quantity. Whether two elements are the same
            is checked using <see cref="M:System.Object.Equals(System.Object,System.Object)" /> method.
            Different references to the same value are considered equal.
            </summary>
            <param name="notExpected">
            The first collection to compare. This is the collection the tests expects
            not to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Tests whether the specified collections are unequal and throws an exception
            if the two collections are equal. Equality is defined as having the same
            elements in the same order and quantity. Whether two elements are the same
            is checked using <see cref="M:System.Object.Equals(System.Object,System.Object)" /> method.
            Different references to the same value are considered equal.
            </summary>
            <param name="notExpected">
            The first collection to compare. This is the collection the tests expects
            not to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer)">
            <summary>
            Tests whether the specified collections are equal and throws an exception
            if the two collections are not equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="expected">
            The first collection to compare. This is the collection the tests expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String)">
            <summary>
            Tests whether the specified collections are equal and throws an exception
            if the two collections are not equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="expected">
            The first collection to compare. This is the collection the tests expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Tests whether the specified collections are equal and throws an exception
            if the two collections are not equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="expected">
            The first collection to compare. This is the collection the tests expects.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer)">
            <summary>
            Tests whether the specified collections are unequal and throws an exception
            if the two collections are equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="notExpected">
            The first collection to compare. This is the collection the tests expects
            not to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String)">
            <summary>
            Tests whether the specified collections are unequal and throws an exception
            if the two collections are equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="notExpected">
            The first collection to compare. This is the collection the tests expects
            not to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Tests whether the specified collections are unequal and throws an exception
            if the two collections are equal. Equality is defined as having the same
            elements in the same order and quantity. Different references to the same
            value are considered equal.
            </summary>
            <param name="notExpected">
            The first collection to compare. This is the collection the tests expects
            not to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second collection to compare. This is the collection produced by the
            code under test.
            </param>
            <param name="comparer">
            The compare implementation to use when comparing elements of the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.IsSubsetOfHelper(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Determines whether the first collection is a subset of the second
            collection. If either set contains duplicate elements, the number
            of occurrences of the element in the subset must be less than or
            equal to the number of occurrences in the superset.
            </summary>
            <param name="subset">
            The collection the test expects to be contained in <paramref name="superset"/>.
            </param>
            <param name="superset">
            The collection the test expects to contain <paramref name="subset"/>.
            </param>
            <returns>
            True if <paramref name="subset"/> is a subset of
            <paramref name="superset"/>, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.GetElementCounts``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Int32@)">
            <summary>
            Constructs a dictionary containing the number of occurrences of each
            element in the specified collection.
            </summary>
            <param name="collection">
            The collection to process.
            </param>
            <param name="comparer">The equality comparer to use when comparing items.</param>
            <param name="nullCount">
            The number of null elements in the collection.
            </param>
            <returns>
            A dictionary containing the number of occurrences of each element
            in the specified collection.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.FindMismatchedElement``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Int32@,System.Int32@,System.Object@)">
            <summary>
            Finds a mismatched element between the two collections. A mismatched
            element is one that appears a different number of times in the
            expected collection than it does in the actual collection. The
            collections are assumed to be different non-null references with the
            same number of elements. The caller is responsible for this level of
            verification. If there is no mismatched element, the function returns
            false and the out parameters should not be used.
            </summary>
            <param name="expected">
            The first collection to compare.
            </param>
            <param name="actual">
            The second collection to compare.
            </param>
            <param name="comparer">The equality comparer to use when comparing items.</param>
            <param name="expectedCount">
            The expected number of occurrences of
            <paramref name="mismatchedElement"/> or 0 if there is no mismatched
            element.
            </param>
            <param name="actualCount">
            The actual number of occurrences of
            <paramref name="mismatchedElement"/> or 0 if there is no mismatched
            element.
            </param>
            <param name="mismatchedElement">
            The mismatched element (may be null) or null if there is no
            mismatched element.
            </param>
            <returns>
            true if a mismatched element was found; false otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.ObjectComparer">
            <summary>
            compares the objects using object.Equals.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.Equals(System.Object,System.Object)">
            <summary>
            Static equals overloads are used for comparing instances of two types for equality.
            This method should <b>not</b> be used for comparison of two instances for equality.
            Please use CollectionAssert.AreEqual and associated overloads in your unit tests.
            </summary>
            <param name="objA"> Object A. </param>
            <param name="objB"> Object B. </param>
            <returns> Never returns. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            Static ReferenceEquals overloads are used for comparing instances of two types for reference
            equality. This method should <b>not</b> be used for comparison of two instances for
            reference equality. Please use CollectionAssert methods or Assert.AreSame and associated overloads in your unit tests.
            </summary>
            <param name="objA"> Object A. </param>
            <param name="objB"> Object B. </param>
            <returns> Never returns. </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert">
            <summary>
            The string assert.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.That">
            <summary>
            Gets the singleton instance of the StringAssert functionality.
            </summary>
            <remarks>
            Users can use this to plug-in custom assertions through C# extension methods.
            For instance, the signature of a custom assertion provider could be "public static void ContainsWords(this StringAssert customAssert, string value, ICollection substrings)"
            Users could then use a syntax similar to the default assertions which in this case is "StringAssert.That.ContainsWords(value, substrings);"
            More documentation is at "https://github.com/Microsoft/testfx/docs/README.md".
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String)">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not contain <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not contain <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="substring"/>
            is not in <paramref name="value"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not contain <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="substring"/>
            is not in <paramref name="value"/>. The message is shown in
            test results.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not contain <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.String,System.Object[])">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="substring"/>
            is not in <paramref name="value"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not contain <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Contains(System.String,System.String,System.String,System.StringComparison,System.Object[])">
            <summary>
            Tests whether the specified string contains the specified substring
            and throws an exception if the substring does not occur within the
            test string.
            </summary>
            <param name="value">
            The string that is expected to contain <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to occur within <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="substring"/>
            is not in <paramref name="value"/>. The message is shown in
            test results.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not contain <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String)">
            <summary>
            Tests whether the specified string begins with the specified substring
            and throws an exception if the test string does not start with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to begin with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a prefix of <paramref name="value"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not start with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.StringComparison)">
            <summary>
            Tests whether the specified string begins with the specified substring
            and throws an exception if the test string does not start with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to begin with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a prefix of <paramref name="value"/>.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not start with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified string begins with the specified substring
            and throws an exception if the test string does not start with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to begin with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a prefix of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not begin with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not start with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Tests whether the specified string begins with the specified substring
            and throws an exception if the test string does not start with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to begin with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a prefix of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not begin with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not start with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Tests whether the specified string begins with the specified substring
            and throws an exception if the test string does not start with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to begin with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a prefix of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not begin with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not start with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.StartsWith(System.String,System.String,System.String,System.StringComparison,System.Object[])">
            <summary>
            Tests whether the specified string begins with the specified substring
            and throws an exception if the test string does not start with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to begin with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a prefix of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not begin with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not start with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String)">
            <summary>
            Tests whether the specified string ends with the specified substring
            and throws an exception if the test string does not end with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to end with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a suffix of <paramref name="value"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not end with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.StringComparison)">
            <summary>
            Tests whether the specified string ends with the specified substring
            and throws an exception if the test string does not end with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to end with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a suffix of <paramref name="value"/>.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not end with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified string ends with the specified substring
            and throws an exception if the test string does not end with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to end with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a suffix of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not end with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not end with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Tests whether the specified string ends with the specified substring
            and throws an exception if the test string does not end with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to end with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a suffix of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not end with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not end with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Tests whether the specified string ends with the specified substring
            and throws an exception if the test string does not end with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to end with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a suffix of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not end with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not end with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.EndsWith(System.String,System.String,System.String,System.StringComparison,System.Object[])">
            <summary>
            Tests whether the specified string ends with the specified substring
            and throws an exception if the test string does not end with the
            substring.
            </summary>
            <param name="value">
            The string that is expected to end with <paramref name="substring"/>.
            </param>
            <param name="substring">
            The string expected to be a suffix of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not end with <paramref name="substring"/>. The message is
            shown in test results.
            </param>
            <param name="comparisonType">
            The comparison method to compare strings <paramref name="comparisonType"/>.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="substring"/> is null,
            or <paramref name="value"/> does not end with <paramref name="substring"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Matches(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Tests whether the specified string matches a regular expression and
            throws an exception if the string does not match the expression.
            </summary>
            <param name="value">
            The string that is expected to match <paramref name="pattern"/>.
            </param>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to match.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="pattern"/> is null,
            or <paramref name="value"/> does not match <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Matches(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Tests whether the specified string matches a regular expression and
            throws an exception if the string does not match the expression.
            </summary>
            <param name="value">
            The string that is expected to match <paramref name="pattern"/>.
            </param>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to match.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not match <paramref name="pattern"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="pattern"/> is null,
            or <paramref name="value"/> does not match <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Matches(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
            <summary>
            Tests whether the specified string matches a regular expression and
            throws an exception if the string does not match the expression.
            </summary>
            <param name="value">
            The string that is expected to match <paramref name="pattern"/>.
            </param>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to match.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            does not match <paramref name="pattern"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="pattern"/> is null,
            or <paramref name="value"/> does not match <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Tests whether the specified string does not match a regular expression
            and throws an exception if the string matches the expression.
            </summary>
            <param name="value">
            The string that is expected not to match <paramref name="pattern"/>.
            </param>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to not match.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="pattern"/> is null,
            or <paramref name="value"/> matches <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Tests whether the specified string does not match a regular expression
            and throws an exception if the string matches the expression.
            </summary>
            <param name="value">
            The string that is expected not to match <paramref name="pattern"/>.
            </param>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to not match.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            matches <paramref name="pattern"/>. The message is shown in test
            results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="pattern"/> is null,
            or <paramref name="value"/> matches <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.DoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
            <summary>
            Tests whether the specified string does not match a regular expression
            and throws an exception if the string matches the expression.
            </summary>
            <param name="value">
            The string that is expected not to match <paramref name="pattern"/>.
            </param>
            <param name="pattern">
            The regular expression that <paramref name="value"/> is
            expected to not match.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            matches <paramref name="pattern"/>. The message is shown in test
            results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <paramref name="value"/> is null, or <paramref name="pattern"/> is null,
            or <paramref name="value"/> matches <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.Equals(System.Object,System.Object)">
            <summary>
            Static equals overloads are used for comparing instances of two types for equality.
            This method should <b>not</b> be used for comparison of two instances for equality.
            Please use StringAssert methods or Assert.AreEqual and associated overloads in your unit tests.
            </summary>
            <param name="objA"> Object A. </param>
            <param name="objB"> Object B. </param>
            <returns> Never returns. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            Static ReferenceEquals overloads are used for comparing instances of two types for reference
            equality. This method should <b>not</b> be used for comparison of two instances for
            reference equality. Please use StringAssert methods or Assert.AreSame and associated overloads in your unit tests.
            </summary>
            <param name="objA"> Object A. </param>
            <param name="objB"> Object B. </param>
            <returns> Never returns. </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute">
            <summary>
            Attribute to define in-line data for a test method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute"/> class with an array of object arguments.
            </summary>
            <param name="data"> The data. </param>
            <remarks>This constructor is only kept for CLS compliant tests.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute"/> class with an array of string arguments.
            </summary>
            <param name="stringArrayData"> The string array data. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute"/> class with an array of object arguments.
            </summary>
            <param name="data"> The data. </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.TestIdGenerationStrategy">
            <summary>
            Gets the test id generation strategy.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.Data">
            <summary>
            Gets data for calling test method.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.DisplayName">
            <summary>
            Gets or sets display name in test results for customization.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.IgnoreMessage">
            <summary>
            Gets or sets a reason to ignore the specific test case. Setting the property to non-null value will ignore the test case.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.UnfoldingStrategy">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.GetData(System.Reflection.MethodInfo)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute.GetDisplayName(System.Reflection.MethodInfo,System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute">
            <summary>
            Specifies connection string, table name and row access method for data driven testing.
            </summary>
            <remarks>
            <list type="bullet">
            <item><description>This works only on .NET Framework and is not supported on .NET Core or later.</description></item>
            <item>
            <description>
            The following shows example usages for this attribute:
            <code>
            [DataSource("Provider=SQLOLEDB.1;Data Source=source;Integrated Security=SSPI;Initial Catalog=EqtCoverage;Persist Security Info=False", "MyTable")]
            [DataSource("dataSourceNameFromConfigFile")].
            </code>
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.DefaultProviderName">
            <summary>
            The default provider name for DataSource.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.DefaultDataAccessMethod">
            <summary>
            The default data access method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.#ctor(System.String,System.String,System.String,Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute"/> class. This instance will be initialized with a data provider, connection string, data table and data access method to access the data source.
            </summary>
            <param name="providerInvariantName">Invariant data provider name, such as System.Data.SqlClient.</param>
            <param name="connectionString">
            Data provider specific connection string.
            WARNING: The connection string can contain sensitive data (for example, a password).
            The connection string is stored in plain text in source code and in the compiled assembly.
            Restrict access to the source code and assembly to protect this sensitive information.
            </param>
            <param name="tableName">The name of the data table.</param>
            <param name="dataAccessMethod">Specifies the order to access data.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute"/> class.This instance will be initialized with a connection string and table name.
            Specify connection string and data table to access OLEDB data source.
            </summary>
            <param name="connectionString">
            Data provider specific connection string.
            WARNING: The connection string can contain sensitive data (for example, a password).
            The connection string is stored in plain text in source code and in the compiled assembly.
            Restrict access to the source code and assembly to protect this sensitive information.
            </param>
            <param name="tableName">The name of the data table.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute"/> class.  This instance will be initialized with a data provider and connection string associated with the setting name.
            </summary>
            <param name="dataSourceSettingName">The name of a data source found in the &lt;microsoft.visualstudio.qualitytools&gt; section in the app.config file.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.ProviderInvariantName">
            <summary>
            Gets a value representing the data provider of the data source.
            </summary>
            <returns>
            The data provider name. If a data provider was not designated at object initialization, the default provider of System.Data.OleDb will be returned.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.ConnectionString">
            <summary>
            Gets a value representing the connection string for the data source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.TableName">
            <summary>
            Gets a value indicating the table name providing data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.DataAccessMethod">
             <summary>
             Gets the method used to access the data source.
             </summary>
            
             <returns>
             One of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod"/> values. If the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute"/> is not initialized, this will return the default value <see cref="F:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod.Random"/>.
             </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute.DataSourceSettingName">
            <summary>
            Gets the name of a data source found in the &lt;microsoft.visualstudio.qualitytools&gt; section in the app.config file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataTestMethodAttribute">
            <summary>
            This attribute doesn't currently provide any different functionality compared to <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute"/>. It's only
            present for backward compatibility. Using <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute"/> is recommended, even for parameterized tests.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataTestMethodAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataTestMethodAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DataTestMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataTestMethodAttribute"/> class.
            </summary>
            <param name="displayName">
            Display name for the test.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataSourceType">
            <summary>
            Enum to specify whether the data is stored as property or in method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataSourceType.Property">
            <summary>
            Data is declared as property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataSourceType.Method">
            <summary>
            Data is declared in method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataSourceType.AutoDetect">
            <summary>
            The data source type is auto-detected.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute">
            <summary>
            Attribute to define dynamic data for a test method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.#ctor(System.String,Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataSourceType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute"/> class.
            </summary>
            <param name="dynamicDataSourceName">
            The name of method or property having test data.
            </param>
            <param name="dynamicDataSourceType">
            Specifies whether the data is stored as property or in method.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute"/> class.
            </summary>
            <param name="dynamicDataSourceName">
            The name of method or property having test data.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute"/> class.
            </summary>
            <param name="dynamicDataSourceName">
            The name of method or property having test data.
            </param>
            <param name="dynamicDataSourceArguments">
            Arguments to be passed to method referred to by <paramref name="dynamicDataSourceName"/>.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.#ctor(System.String,System.Type,Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataSourceType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute"/> class when the test data is present in a class different
            from test method's class.
            </summary>
            <param name="dynamicDataSourceName">
            The name of method or property having test data.
            </param>
            <param name="dynamicDataDeclaringType">
            The declaring type of property or method having data. Useful in cases when declaring type is present in a class different from
            test method's class. If null, declaring type defaults to test method's class type.
            </param>
            <param name="dynamicDataSourceType">
            Specifies whether the data is stored as property or in method.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute"/> class when the test data is present in a class different
            from test method's class.
            </summary>
            <param name="dynamicDataSourceName">
            The name of method or property having test data.
            </param>
            <param name="dynamicDataDeclaringType">
            The declaring type of property or method having data. Useful in cases when declaring type is present in a class different from
            test method's class. If null, declaring type defaults to test method's class type.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.#ctor(System.String,System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute"/> class when the test data is present in a class different
            from test method's class.
            </summary>
            <param name="dynamicDataSourceName">
            The name of method or property having test data.
            </param>
            <param name="dynamicDataDeclaringType">
            The declaring type of property or method having data. Useful in cases when declaring type is present in a class different from
            test method's class. If null, declaring type defaults to test method's class type.
            </param>
            <param name="dynamicDataSourceArguments">
            Arguments to be passed to method referred to by <paramref name="dynamicDataSourceName"/>.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.DynamicDataDisplayName">
            <summary>
            Gets or sets the name of method used to customize the display name in test results.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.DynamicDataDisplayNameDeclaringType">
            <summary>
            Gets or sets the declaring type used to customize the display name in test results.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.UnfoldingStrategy">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.IgnoreMessage">
            <summary>
            Gets or sets a reason to ignore this dynamic data source. Setting the property to non-null value will ignore the dynamic data source.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.GetData(System.Reflection.MethodInfo)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.GetDisplayName(System.Reflection.MethodInfo,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.Microsoft#VisualStudio#TestTools#UnitTesting#ITestDataSourceEmptyDataSourceExceptionInfo#GetPropertyOrMethodNameForEmptyDataSourceException">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute.Microsoft#VisualStudio#TestTools#UnitTesting#ITestDataSourceEmptyDataSourceExceptionInfo#GetPropertyOrMethodContainerTypeNameForEmptyDataSourceException(System.Reflection.MethodInfo)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryAttribute">
            <summary>
            Specifies how to discover <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource"/> tests.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryAttribute"/> class.
            </summary>
            <param name="discoveryOption">
            The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryOption"/> to use when discovering <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource"/> tests.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryAttribute.DiscoveryOption">
            <summary>
            Gets the discovery option.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryOption">
            <summary>
            The supported discovery modes for <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource"/> tests.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryOption.DuringExecution">
            <summary>
            Discover tests during execution.
            </summary>
            <remarks>
            This was the default option until version 2.2.3.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryOption.DuringDiscovery">
            <summary>
            Discover and expand ITestDataSource based tests.
            </summary>
            <remarks>
            This is the default behavior after version 2.2.3.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceOptionsAttribute">
            <summary>
            Specifies options for all <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource"/> of the current assembly.
            </summary>
            <remarks>
            These options can be override by individual <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource"/> attribute.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceOptionsAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceUnfoldingStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceOptionsAttribute"/> class.
            </summary>
            <param name="unfoldingStrategy">
            The <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceOptionsAttribute.UnfoldingStrategy"/> to use when executing parameterized tests.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceOptionsAttribute.UnfoldingStrategy">
            <summary>
            Gets the test unfolding strategy.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy">
            <summary>
            The supported test ID generation strategies.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy.Legacy">
            <summary>
            Uses legacy test ID generation. <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource"/> tests will not be discovered and instead they will be collapsed into one parent test.
            </summary>
            <remarks>
            This option is incompatible with <see cref="F:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryOption.DuringDiscovery"/> option of <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceDiscoveryAttribute"/> and will be ignored.
            This was the default option until version 2.2.3.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy.DisplayName">
            <summary>
            Uses a combination of executor ID, file name, fully qualified name and display name to generate the test ID.
            </summary>
            <remarks>
            This is the default behavior between versions 2.2.4 and 3.0.0.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy.FullyQualified">
            <summary>
            Uses a combination of executor ID, file path, assembly name, method fully qualified name and serialized data (values and their fully qualified type) to generate the test ID.
            </summary>
            <remarks>
            This is the default behavior starting with version 3.0.0.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategyAttribute">
            <summary>
            Specifies how to generate test ID.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategyAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategyAttribute"/> class.
            </summary>
            <param name="strategy">
            The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy"/> to use when generating the test ID.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategyAttribute.Strategy">
            <summary>
            Gets the test ID generation strategy.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyCleanupAttribute">
            <summary>
            The assembly cleanup attribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute">
            <summary>
            The class cleanup attribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute"/> class.
            </summary>
            <param name="inheritanceBehavior">
            Specifies the ClassCleanup Inheritance Behavior.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute"/> class.
            </summary>
            <param name="cleanupBehavior">
            Specifies the class clean-up behavior.
            To capture output of class clean-up method in logs
            <paramref name="cleanupBehavior"/> must be set to <see cref="F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass"/>.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior,Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute"/> class.
            </summary>
            <param name="inheritanceBehavior">
            Specifies the ClassCleanup Inheritance Behavior.
            </param>
            <param name="cleanupBehavior">
            Specifies the class clean-up behavior.
            To capture output of class clean-up method in logs
            <paramref name="cleanupBehavior"/> must be set to <see cref="F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass"/>.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior,System.Nullable{Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute"/> class.
            </summary>
            <param name="inheritanceBehavior">
            Specifies the ClassCleanup Inheritance Behavior.
            </param>
            <param name="cleanupBehavior">
            Specifies the class clean-up behavior.
            To capture output of class clean-up method in logs
            <paramref name="cleanupBehavior"/> must be set to <see cref="F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass"/>.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.InheritanceBehavior">
            <summary>
            Gets the Inheritance Behavior.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute.CleanupBehavior">
            <summary>
            Gets when to run class cleanup methods.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior">
            <summary>
            When to run ClassCleanup during test execution.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfAssembly">
            <summary>
            Run at end of assembly.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass">
            <summary>
            Run at end of class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute">
            <summary>
            Specification for when to run class cleanup methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute.DefaultClassCleanupLifecycle">
            <summary>
            Default class cleanup execution.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute"/> class.
            </summary>
            <param name="cleanupBehavior">
            Specifies the class clean-up behavior.
            To capture output of class clean-up method in logs
            <paramref name="cleanupBehavior"/> must be set to <see cref="F:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass"/>.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupExecutionAttribute.CleanupBehavior">
            <summary>
            Gets when to run class cleanup methods.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.GlobalTestCleanupAttribute">
            <summary>
            A global test cleanup attribute that applies to every test method in the assembly.
            The method to which this attribute is applied must be public, static, non-generic, has a single parameter of type TestContext, and either returns void or a Task.
            </summary>
            <remarks>
            Multiple methods with this attribute in the assembly is allowed, but there is no guarantee of the order in which they will be executed.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute">
            <summary>
            The test cleanup attribute marks methods that are executed after every test marked with a <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DoNotParallelizeAttribute">
            <summary>
            Specification to disable parallelization.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExecutionScope">
            <summary>
            Parallel execution mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.ExecutionScope.ClassLevel">
            <summary>
            Each thread of execution will be handed a TestClass worth of tests to execute.
            Within the TestClass, the test methods will execute serially.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.ExecutionScope.MethodLevel">
            <summary>
            Each thread of execution will be handed TestMethods to execute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior">
            <summary>
            Enumeration for inheritance behavior, that can be used with both the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute"/> class
            and <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute"/> class.
            Defines the behavior of the ClassInitialize and ClassCleanup methods of base classes.
            The type of the enumeration must match.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior.BeforeEachDerivedClass">
            <summary>
            Before each derived class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyInitializeAttribute">
            <summary>
            The assembly initialize attribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute">
            <summary>
            The class initialize attribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute"/> class.
            ClassInitializeAttribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute"/> class.
            ClassInitializeAttribute.
            </summary>
            <param name="inheritanceBehavior">
            Specifies the ClassInitialize Inheritance Behavior.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute.InheritanceBehavior">
            <summary>
            Gets the Inheritance Behavior.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DiscoverInternalsAttribute">
            <summary>
            The presence of this attribute in a test assembly causes MSTest to discover test classes (i.e. classes having
            the "TestClass" attribute) and test methods (i.e. methods having the "TestMethod" attribute) which are declared
            internal in addition to test classes and test methods which are declared public. When this attribute is not
            present in a test assembly the tests in such classes will not be discovered.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.GlobalTestInitializeAttribute">
            <summary>
            A global test initialize attribute that applies to every test method in the assembly.
            The method to which this attribute is applied must be public, static, non-generic, has a single parameter of type TestContext, and either returns void or a Task.
            </summary>
            <remarks>
            Multiple methods with this attribute in the assembly is allowed, but there is no guarantee of the order in which they will be executed. In addition, TimeoutAttribute isn't supported on methods with this attribute.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute">
            <summary>
            The test initialize attribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute">
            <summary>
            Specification for parallelization level for a test run.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute.DefaultExecutionScope">
            <summary>
            The default scope for the parallel run. Although method level gives maximum parallelization, the default is set to
            class level to enable maximum number of customers to easily convert their tests to run in parallel. In most cases within
            a class tests aren't thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute.Workers">
            <summary>
            Gets or sets the number of workers to be used for the parallel run.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute.Scope">
            <summary>
            Gets or sets the scope of the parallel run.
            </summary>
            <remarks>
            To enable all classes to run in parallel set this to <see cref="F:Microsoft.VisualStudio.TestTools.UnitTesting.ExecutionScope.ClassLevel"/>.
            To get the maximum parallelization level set this to <see cref="F:Microsoft.VisualStudio.TestTools.UnitTesting.ExecutionScope.MethodLevel"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CIConditionAttribute">
            <summary>
            This attribute is used to conditionally control whether a test class or a test method will run or be ignored based on whether the test is running in a CI environment.
            </summary>
            <remarks>
            This attribute isn't inherited. Applying it to a base class will not affect derived classes.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CIConditionAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.ConditionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.CIConditionAttribute"/> class.
            </summary>
            <param name="mode">Decides whether the test should be included or excluded in CI environments.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.CIConditionAttribute.ShouldRun">
            <summary>
            Gets a value indicating whether the test method or test class should run.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.CIConditionAttribute.IgnoreMessage">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.CIConditionAttribute.GroupName">
            <summary>
            Gets the group name for this attribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ConditionBaseAttribute">
            <summary>
            This attribute is used to conditionally control whether a test class or a test method will run or be ignored, based on a condition and using an optional message.
            </summary>
            <remarks>
            This attribute isn't inherited. Applying it to a base class will not affect derived classes.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ConditionBaseAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.ConditionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ConditionBaseAttribute"/> class.
            </summary>
            <param name="mode">The condition mode.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ConditionBaseAttribute.Mode">
            <summary>
            Gets the condition mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ConditionBaseAttribute.IgnoreMessage">
            <summary>
            Gets or sets the ignore message (in case <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.ConditionBaseAttribute.ShouldRun"/> returns <see langword="false"/>) indicating
            the reason for ignoring the test method or test class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ConditionBaseAttribute.GroupName">
            <summary>
            Gets the group name for this attribute. This is relevant when multiple
            attributes that inherit <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ConditionBaseAttribute"/> are present.
            The ShouldRun values of attributes in the same group are "OR"ed together.
            While the value from different groups is "AND"ed together.
            In other words, a test will be ignored if any group has all its <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.ConditionBaseAttribute.ShouldRun"/> values as false.
            </summary>
            <remarks>
            Usually, you can use <see langword="nameof"/> to return the group name.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ConditionBaseAttribute.ShouldRun">
            <summary>
            Gets a value indicating whether the test method or test class should be ignored.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ConditionMode">
            <summary>
            An enumeration used with <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ConditionBaseAttribute"/> to control whether the condition is reversed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.ConditionMode.Include">
            <summary>
            Runs only when the condition is met (the default).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.ConditionMode.Exclude">
            <summary>
            Ignores the test when the condition is met (i.e, reverse the condition).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute">
            <summary>
            CSS Iteration URI.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute"/> class for CSS Iteration URI.
            </summary>
            <param name="cssIteration">The CSS Iteration URI.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute.CssIteration">
            <summary>
            Gets the CSS Iteration URI.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute">
            <summary>
            CSS Project Structure URI.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute"/> class for CSS Project Structure URI.
            </summary>
            <param name="cssProjectStructure">The CSS Project Structure URI.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute.CssProjectStructure">
            <summary>
            Gets the CSS Project Structure URI.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DelayBackoffType">
            <summary>
            Specifies a backoff type for the delay between retries.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DelayBackoffType.Constant">
            <summary>
            Specifies a constant backoff type. Meaning the delay between retries is constant.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DelayBackoffType.Exponential">
            <summary>
            Specifies an exponential backoff type.
            The delay is calculated as the base delay * 2^(n-1) where n is the retry attempt.
            For example, if the base delay is 1000ms, the delays will be 1000ms, 2000ms, 4000ms, 8000ms, etc.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute">
            <summary>
            Description of the test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute"/> class to describe a test.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute.Description">
            <summary>
            Gets the description of a test.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute">
            <summary>
            Attribute that specifies to expect an exception of the specified type.
            </summary>
            <remarks>
            We recommend using one of the Assert.ThrowsException or Assert.ThrowsExceptionAsync overload instead of using this attribute.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute"/> class with the expected type.
            </summary>
            <param name="exceptionType">Type of the expected exception.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute"/> class with
            the expected type and the message to include when no exception is thrown by the test.
            </summary>
            <param name="exceptionType">Type of the expected exception.</param>
            <param name="noExceptionMessage">
            Message to include in the test result if the test fails due to not throwing an exception.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.ExceptionType">
            <summary>
            Gets a value indicating the Type of the expected exception.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.AllowDerivedTypes">
            <summary>
            Gets or sets a value indicating whether to allow types derived from the type of the expected exception to
            qualify as expected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.NoExceptionMessage">
            <summary>
            Gets the message to include in the test result if the test fails due to not throwing an exception.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.Verify(System.Exception)">
            <summary>
            Verifies that the type of the exception thrown by the unit test is expected.
            </summary>
            <param name="exception">The exception thrown by the unit test.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute">
            <summary>
            Base class for attributes that specify to expect an exception from a unit test.
            </summary>
            <remarks>
            We recommend using one of the Assert.ThrowsException or Assert.ThrowsExceptionAsync overload instead of using this attribute.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute"/> class with a default no-exception message.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute"/> class with a no-exception message.
            </summary>
            <param name="noExceptionMessage">
            Message to include in the test result if the test fails due to not throwing an
            exception.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.NoExceptionMessage">
            <summary>
            Gets the message to include in the test result if the test fails due to not throwing an exception.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.SpecifiedNoExceptionMessage">
            <summary>
            Gets the message to include in the test result if the test fails due to not throwing an exception.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.GetDefaultNoExceptionMessage(System.String)">
            <summary>
            Gets the default no-exception message.
            </summary>
            <param name="expectedExceptionAttributeTypeName">The ExpectedException attribute type name.</param>
            <returns>The default no-exception message.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.Verify(System.Exception)">
            <summary>
            Determines whether the exception is expected. If the method returns, then it is
            understood that the exception was expected. If the method throws an exception, then it
            is understood that the exception was not expected, and the thrown exception's message
            is included in the test result. The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.Assert"/> class can be used for
            convenience. If <see cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive"/> is used and the assertion fails,
            then the test outcome is set to Inconclusive.
            </summary>
            <param name="exception">The exception thrown by the unit test.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute.RethrowIfAssertException(System.Exception)">
            <summary>
            Rethrow the exception if it is an AssertFailedException or an AssertInconclusiveException.
            </summary>
            <param name="exception">The exception to rethrow if it is an assertion exception.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.GitHubWorkItemAttribute">
            <summary>
            GitHubWorkItem attribute; used to specify a GitHub issue associated with this test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GitHubWorkItemAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GitHubWorkItemAttribute"/> class for the GitHub WorkItem Attribute.
            </summary>
            <param name="url">The URL to a GitHub issue, pull request, or discussion.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.GitHubWorkItemAttribute.Url">
            <summary>
            Gets the URL to the GitHub issue associated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GitHubWorkItemAttribute.ExtractId(System.String)">
            <summary>
            Extracts the ID from the GitHub issue/pull/discussion URL.
            </summary>
            <param name="url">The URL to a GitHub ticket.</param>
            <returns>The ticket ID.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute">
            <summary>
            This attribute is used to ignore a test class or a test method, with an optional message.
            </summary>
            <remarks>
            This attribute isn't inherited. Applying it to a base class will not cause derived classes to be ignored.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute"/> class with an empty message.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute"/> class.
            </summary>
            <param name="message">
            Message specifies reason for ignoring.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute.IgnoreMessage">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute.ShouldRun">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute.GroupName">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.OperatingSystems">
            <summary>
            An enum that is used with <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.OSConditionAttribute"/> to control which operating systems a test method or test class supports or doesn't support.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.OperatingSystems.Linux">
            <summary>
            Represents the Linux operating system.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.OperatingSystems.OSX">
            <summary>
            Representing the MacOS operating system.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.OperatingSystems.Windows">
            <summary>
            Represents the Windows operating system.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.OperatingSystems.FreeBSD">
            <summary>
            Represents the FreeBSD operating system.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.OSConditionAttribute">
            <summary>
            This attribute is used to ignore a test class or a test method, with an optional message.
            </summary>
            <remarks>
            This attribute isn't inherited. Applying it to a base class will not cause derived classes to be ignored.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.OSConditionAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.ConditionMode,Microsoft.VisualStudio.TestTools.UnitTesting.OperatingSystems)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.OSConditionAttribute"/> class.
            </summary>
            <param name="mode">Decides whether the OSes will be included or excluded.</param>
            <param name="operatingSystems">The operating systems that this test includes/excludes.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.OSConditionAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.OperatingSystems)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.OSConditionAttribute"/> class.
            </summary>
            <param name="operatingSystems">The operating systems that this test supports.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.OSConditionAttribute.ShouldRun">
            <summary>
            Gets a value indicating whether the test method or test class should be ignored.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.OSConditionAttribute.IgnoreMessage">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.OSConditionAttribute.GroupName">
            <summary>
            Gets the group name for this attribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute">
            <summary>
            Test Owner.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute"/> class.
            </summary>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute.Owner">
            <summary>
            Gets the owner.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute">
            <summary>
            Priority attribute; used to specify the priority of a unit test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute"/> class.
            </summary>
            <param name="priority">
            The priority.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute.Priority">
            <summary>
            Gets the priority.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.RetryAttribute">
            <summary>
            This attribute is used to set a retry count on a test method in case of failure.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.RetryAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.RetryAttribute"/> class with the given number of max retries.
            </summary>
            <param name="maxRetryAttempts">The maximum number of retry attempts. This must be greater than or equal to 1.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.RetryAttribute.MaxRetryAttempts">
            <summary>
            Gets the number of retries that the test should make in case of failures.
            Note that before RetryAttribute is considered, the test was already executed once.
            This property determines the max number of retries after the first normal run.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.RetryAttribute.MillisecondsDelayBetweenRetries">
            <summary>
            Gets or sets the delay, in milliseconds, between retries.
            This delay is also applied after the first run and before the first retry attempt.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.RetryAttribute.BackoffType">
            <summary>
            Gets or sets the delay backoff type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.RetryAttribute.ExecuteAsync(Microsoft.VisualStudio.TestTools.UnitTesting.RetryContext)">
            <summary>
            Retries the test method <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.RetryAttribute.MaxRetryAttempts"/> times in case of failure.
            Note that a first run of the method was already executed and failed before this method is called.
            </summary>
            <param name="retryContext">An object to encapsulate the state needed for retry execution.</param>
            <returns>
            Returns a <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.RetryResult"/> object that contains the results of all attempts. Only
            the last added element is used to determine the test outcome.
            The other results are currently not used, but may be used in the future for tooling to show the
            state of the failed attempts.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.RetryBaseAttribute">
            <summary>
            An abstract attribute that controls retrying a test method if it failed. It's up to the derived classes to
            define how the retry is done.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.RetryBaseAttribute.ExecuteAsync(Microsoft.VisualStudio.TestTools.UnitTesting.RetryContext)">
            <summary>
            Retries the test method. The details of how retry is done is left to the derived classes.
            Note that a first run of the method was already executed and failed before this method is called.
            </summary>
            <param name="retryContext">An object to encapsulate the state needed for retry execution.</param>
            <returns>
            Returns a <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.RetryResult"/> object that contains the results of all attempts. Only
            the last added element is used to determine the test outcome.
            The other results are currently not used, but may be used in the future for tooling to show the
            state of the failed attempts.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.RetryContext">
            <summary>
            Represents the context for a test retry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.RetryContext.ExecuteTaskGetter">
            <summary>
            Gets the function that will execute the test asynchronously.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.RetryContext.FirstRunResults">
            <summary>
            Gets the test results of the initial run that failed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.RetryResult">
            <summary>
            The result of a test retry.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.RetryResult.AddResult(Microsoft.VisualStudio.TestTools.UnitTesting.TestResult[])">
            <summary>
            Adds a set of test results to the retry result.
            </summary>
            <param name="testResults">The test results for the current attempt.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.STATestClassAttribute">
            <summary>
            The test class attribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.STATestMethodAttribute">
            <summary>
            The test class attribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.STATestMethodAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.STATestMethodAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.STATestMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.STATestMethodAttribute"/> class.
            </summary>
            <param name="displayName">
            Display name for the test.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute">
            <summary>
            TestCategory attribute; used to specify the category of a unit test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute"/> class and applies the category to the test.
            </summary>
            <param name="testCategory">
            The test Category.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute.TestCategories">
            <summary>
            Gets the test categories that has been applied to the test.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute">
            <summary>
            Base class for the "Category" attribute.
            </summary>
            <remarks>
            The reason for this attribute is to let the users create their own implementation of test categories.
            - test framework (discovery, etc) deals with TestCategoryBaseAttribute.
            - The reason that TestCategories property is a collection rather than a string,
              is to give more flexibility to the user. For instance the implementation may be based on enums for which the values can be OR'ed
              in which case it makes sense to have single attribute rather than multiple ones on the same test.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute"/> class.
            Applies the category to the test. The strings returned by TestCategories
            are used with the /category command to filter tests.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute.TestCategories">
            <summary>
            Gets the test category that has been applied to the test.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute">
            <summary>
            This attribute is used to mark test classes.
            </summary>
            <remarks>
            Test classes must be:
            <list type="bullet">
            <item><description>public, or if <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DiscoverInternalsAttribute"/> is used then it can be internal.</description></item>
            <item><description>not static</description></item>
            <item><description>not generic</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute.GetTestMethodAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute)">
            <summary>
            Gets a test method attribute that enables running this test.
            </summary>
            <param name="testMethodAttribute">The test method attribute instance defined on this method.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute"/> to be used to run this test.</returns>
            <remarks>Extensions can override this method to customize how all methods in a class are run.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute">
            <summary>
            This attribute is used to mark test methods.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            <description>
            When using other attributes like <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute" /> or <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute" />,
            the use of <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute" /> is still required.
            </description>
            </item>
            <item>
            <description>
            Test methods must be:
            <list type="bullet">
            <item><description>public, or if <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DiscoverInternalsAttribute"/> is used then it can be internal.</description></item>
            <item><description>not static</description></item>
            <item><description>not generic</description></item>
            <item><description>not abstract</description></item>
            <item><description>return type is either <see langword="void"/>, <see cref="T:System.Threading.Tasks.Task"/>, or <see cref="!:ValueTask"/>. If <see langword="void"/>, then it shouldn't be <see langword="async"/>.</description></item>
            </list>
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute"/> class.
            </summary>
            <param name="displayName">Display name for the test.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.DisplayName">
            <summary>
            Gets display name for the test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.Execute(Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod)">
            <inheritdoc cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.ExecuteAsync(Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.ExecuteAsync(Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod)">
            <summary>
            Executes a test method.
            </summary>
            <param name="testMethod">The test method to execute.</param>
            <returns>An array of TestResult objects that represent the outcome(s) of the test.</returns>
            <remarks>Extensions can override this method to customize running a TestMethod.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute">
            <summary>
            The test property attribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult">
            <summary>
            TestResult object to be returned to adapter.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.DisplayName">
            <summary>
            Gets or sets the display name of the result. Useful when returning multiple results.
            If null then Method name is used as DisplayName.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.Outcome">
            <summary>
            Gets or sets the outcome of the test execution.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.TestFailureException">
            <summary>
            Gets or sets the exception thrown when test is failed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.LogOutput">
            <summary>
            Gets or sets the output of the message logged by test code.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.LogError">
            <summary>
            Gets or sets the output of the message logged by test code.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.DebugTrace">
            <summary>
            Gets or sets the debug traces by test code.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.TestContextMessages">
            <summary>
            Gets or sets the debug traces by test code.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.ExecutionId">
            <summary>
            Gets or sets the execution id of the result.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.ParentExecId">
            <summary>
            Gets or sets the parent execution id of the result.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.InnerResultsCount">
            <summary>
            Gets or sets the inner results count of the result.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.Duration">
            <summary>
            Gets or sets the duration of test execution.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.DatarowIndex">
            <summary>
            Gets or sets the data row index in data source. Set only for results of individual
            run of data row of a data driven test.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.ReturnValue">
            <summary>
            Gets or sets the return value of the test method. (Currently null always).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestResult.ResultFiles">
            <summary>
            Gets or sets the result files attached by the test.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestTimeout">
            <summary>
            Enumeration for timeouts, that can be used with the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute"/> class.
            The type of the enumeration must match.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.TestTimeout.Infinite">
            <summary>
            The infinite.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute">
            <summary>
            Timeout attribute; used to specify the timeout of a unit test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute"/> class.
            </summary>
            <param name="timeout">
            The timeout in milliseconds.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute.#ctor(Microsoft.VisualStudio.TestTools.UnitTesting.TestTimeout)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute"/> class with a preset timeout.
            </summary>
            <param name="timeout">
            The timeout.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute.Timeout">
            <summary>
            Gets the timeout in milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute.CooperativeCancellation">
            <summary>
            Gets or sets a value indicating whether the test method should be cooperatively canceled on timeout.
            When set to <see langword="true"/>, the cancellation token is canceled on timeout, and the method completion is awaited.
            The test method and all the code it calls, must be designed in a way that it observes the cancellation and cancels
            cooperatively. If the test method does not complete, the timeout does not force it to complete.
            When set to <see langword="false"/>, the cancellation token is canceled on timeout, timeout result is reported and the
            method task will continue running on background. This may lead to conflicts in file access on test cleanup, unobserved
            exceptions, and memory leaks.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute.HasCorrectTimeout">
            <summary>
            Gets a value indicating whether the instance has the correct test timeout signature.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute">
            <summary>
            WorkItem attribute; used to specify a work item associated with this test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute"/> class for the WorkItem Attribute.
            </summary>
            <param name="id">The Id to a work item.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute.Id">
            <summary>
            Gets the Id to a work item associated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod">
            <summary>
            Enumeration for how we access data rows in data driven testing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod.Sequential">
            <summary>
            Rows are returned in sequential order.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod.Random">
            <summary>
            Rows are returned in random order.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <summary>
            AssertFailedException class. Used to indicate failure for a test case.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"/> class.
            </summary>
            <param name="msg"> The message. </param>
            <param name="ex"> The exception. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"/> class.
            </summary>
            <param name="msg"> The message. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException"/> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">
            <summary>
            The assert inconclusive exception.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException"/> class.
            </summary>
            <param name="msg"> The message. </param>
            <param name="ex"> The exception. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException"/> class.
            </summary>
            <param name="msg"> The message. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException"/> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException">
            <summary>
            InternalTestFailureException class. Used to indicate internal failure for a test case.
            </summary>
            <remarks>
            This class is only added to preserve source compatibility with the V1 framework.
            For all practical purposes either use AssertFailedException/AssertInconclusiveException.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException"/> class.
            </summary>
            <param name="msg"> The exception message. </param>
            <param name="ex"> The exception. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException"/> class.
            </summary>
            <param name="msg"> The exception message. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException"/> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException">
            <summary>
            Base class for Framework Exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException"/> class.
            </summary>
            <param name="msg"> The message. </param>
            <param name="ex"> The exception. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException"/> class.
            </summary>
            <param name="msg"> The message. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException"/> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkConstants">
            <summary>
            Constants used throughout.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper">
            <summary>
            This class is designed to help user doing unit testing for types which uses generic types.
            GenericParameterHelper satisfies some common generic type constraints
            such as:
            1. public default constructor
            2. implements common interface: IComparable, IEnumerable.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper"/> class that
            satisfies the 'newable' constraint in C# generics.
            </summary>
            <remarks>
            This constructor initializes the Data property to a random value.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper"/> class that
            initializes the Data property to a user-supplied value.
            </summary>
            <param name="data">Any integer value.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Data">
            <summary>
            Gets or sets the Data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Equals(System.Object)">
            <summary>
            Do the value comparison for two GenericParameterHelper object.
            </summary>
            <param name="obj">object to do comparison with.</param>
            <returns>true if obj has the same value as 'this' GenericParameterHelper object.
            false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.GetHashCode">
            <summary>
            Returns a hashcode for this object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.CompareTo(System.Object)">
            <summary>
            Compares the data of the two <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper"/> objects.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when the object passed in is not an instance of <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.GetEnumerator">
            <summary>
            Returns an IEnumerator object whose length is derived from
            the Data property.
            </summary>
            <returns>The IEnumerator object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper.Clone">
            <summary>
            Returns a GenericParameterHelper object that is equal to
            the current object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource">
            <summary>
            Test data source for data driven tests.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource.GetData(System.Reflection.MethodInfo)">
            <summary>
            Gets the test data from custom test data source.
            </summary>
            <param name="methodInfo">
            The method info of test method.
            </param>
            <returns>
            Test data for calling test method.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource.GetDisplayName(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Gets the display name corresponding to test data row for displaying in TestResults.
            </summary>
            <param name="methodInfo">
            The method info of test method.
            </param>
            <param name="data">
            The test data which is passed to test method.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSourceEmptyDataSourceExceptionInfo.GetPropertyOrMethodNameForEmptyDataSourceException">
            <summary>
            Returns the method/property name accessed by this data source.
            For example, for DynamicDataAttribute, that will be attribute argument.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSourceEmptyDataSourceExceptionInfo.GetPropertyOrMethodContainerTypeNameForEmptyDataSourceException(System.Reflection.MethodInfo)">
            <summary>
            Returns the type name on which the method/property accessed by this data source exists.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSourceIgnoreCapability">
            <summary>
            Specifies the capability of a test data source to be ignored and define the ignore reason.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSourceIgnoreCapability.IgnoreMessage">
            <summary>
            Gets or sets a reason to ignore the test data source. Setting the property to non-null value will ignore the test data source.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSourceUnfoldingCapability">
            <summary>
            Specifies the capability of a test data source to define how parameterized tests should be executed, either as
            individual test cases for each data row or as a single test case. This affects the test results and the UI
            representation of the tests.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSourceUnfoldingCapability.UnfoldingStrategy">
            <summary>
            Gets the strategy for unfolding parameterized tests.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceUnfoldingStrategy">
            <summary>
            Specifies how parameterized tests should be executed, either as individual test cases for each data row or as a
            single test case. This affects the test results and the UI representation of the tests.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceUnfoldingStrategy.Auto">
            <summary>
            MSTest will decide whether to unfold the parameterized test based on value from the assembly level attribute
            <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceOptionsAttribute" />. If no assembly level attribute is specified, then the default
            configuration is to unfold.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceUnfoldingStrategy.Unfold">
            <summary>
            Each data row is treated as a separate test case.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataSourceUnfoldingStrategy.Fold">
            <summary>
            The parameterized test is not unfolded; all data rows are treated as a single test case.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod">
            <summary>
            TestMethod for execution.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.TestMethodName">
            <summary>
            Gets the name of test method.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.TestClassName">
            <summary>
            Gets the name of test class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.ReturnType">
            <summary>
            Gets the return type of test method.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.Arguments">
            <summary>
            Gets the arguments with which test method is invoked.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.ParameterTypes">
            <summary>
            Gets the parameters of test method.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.MethodInfo">
            <summary>
            Gets the methodInfo for test method.
            </summary>
            <remarks>
            This is just to retrieve additional information about the method.
            Do not directly invoke the method using MethodInfo. Use ITestMethod.Invoke instead.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.Invoke(System.Object[])">
            <summary>
            Invokes the test method.
            </summary>
            <param name="arguments">
            Arguments to pass to test method. (E.g. For data driven).
            </param>
            <returns>
            Result of test method invocation.
            </returns>
            <remarks>
            This call handles asynchronous test methods in a blocking way.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.InvokeAsync(System.Object[])">
            <summary>
            Invokes the test method.
            </summary>
            <param name="arguments">
            Arguments to pass to test method. (E.g. For data driven).
            </param>
            <returns>
            Result of test method invocation.
            </returns>
            <remarks>
            This call handles asynchronous test methods as well.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.GetAllAttributes(System.Boolean)">
            <summary>
            Get all attributes of the test method.
            </summary>
            <param name="inherit">
            Whether attribute defined in parent class is valid.
            </param>
            <returns>
            All attributes.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod.GetAttributes``1(System.Boolean)">
            <summary>
            Get attribute of specific type.
            </summary>
            <typeparam name="TAttributeType"> System.Attribute type. </typeparam>
            <param name="inherit">
            Whether attribute defined in parent class is valid.
            </param>
            <returns>
            The attributes of the specified type.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DebugEx.Assert(System.Boolean,System.String)">
            <inheritdoc cref="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)"/>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.IEnvironment">
            <summary>
            Interface to abstract environment related information.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.IEnvironment.MachineName">
            <summary>
            Gets the machine name.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnvironment.SetEnvironmentVariable(System.String,System.String)">
            <inheritdoc cref="M:System.Environment.SetEnvironmentVariable(System.String,System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.IEnvironment.GetEnvironmentVariable(System.String)">
            <inheritdoc cref="M:System.Environment.GetEnvironmentVariable(System.String)" />
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Internal.TestDataSourceUtilities.GetHumanizedArguments(System.Object,Microsoft.VisualStudio.TestTools.UnitTesting.TestIdGenerationStrategy)">
            <summary>
            Recursively resolve collections of objects to a proper string representation.
            </summary>
            <param name="data">The method arguments.</param>
            <param name="testIdGenerationStrategy">The strategy for creating the test ID.</param>
            <returns>The humanized representation of the data.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringEx.IsNullOrEmpty(System.String)">
            <inheritdoc cref="M:System.String.IsNullOrEmpty(System.String)"/>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.StringEx.IsNullOrWhiteSpace(System.String)">
            <inheritdoc cref="M:System.String.IsNullOrWhiteSpace(System.String)"/>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.UtfHelper">
            <summary>
            Provides helper functionality for the unit test framework.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UtfHelper.GetExceptionMsg(System.Exception)">
            <summary>
            Gets the exception messages, including the messages for all inner exceptions
            recursively.
            </summary>
            <param name="ex">Exception to get messages for.</param>
            <returns>string with error message information.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Logging.Logger">
            <summary>
            Enables users to log/write traces from unit tests for diagnostics.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Logging.Logger.LogMessageHandler">
            <summary>
            Handler for LogMessage.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="E:Microsoft.VisualStudio.TestTools.UnitTesting.Logging.Logger.OnLogMessage">
            <summary>
            Event to listen. Raised when unit test writer writes some message.
            Mainly to consume by adapter.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Logging.Logger.LogMessage(System.String,System.Object[])">
            <summary>
            API for test writer to call to Log messages.
            </summary>
            <param name="format">String format with placeholders.</param>
            <param name="args">Parameters for placeholders.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AccessStringInvalidSyntax">
            <summary>
              Looks up a localized string similar to Access string has invalid syntax..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ActualHasMismatchedElements">
            <summary>
              Looks up a localized string similar to The expected collection contains {1} occurrence(s) of &lt;{2}&gt;. The actual collection contains {3} occurrence(s). {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AllItemsAreUniqueFailMsg">
            <summary>
              Looks up a localized string similar to Duplicate item found:&lt;{1}&gt;. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreEqualCaseFailMsg">
            <summary>
              Looks up a localized string similar to Expected:&lt;{1}&gt;. Case is different for actual value:&lt;{2}&gt;. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreEqualDeltaFailMsg">
            <summary>
              Looks up a localized string similar to Expected a difference no greater than &lt;{3}&gt; between expected value &lt;{1}&gt; and actual value &lt;{2}&gt;. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreEqualDifferentTypesFailMsg">
            <summary>
              Looks up a localized string similar to Expected:&lt;{1} ({2})&gt;. Actual:&lt;{3} ({4})&gt;. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreEqualFailMsg">
            <summary>
              Looks up a localized string similar to Expected:&lt;{1}&gt;. Actual:&lt;{2}&gt;. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreNotEqualDeltaFailMsg">
            <summary>
              Looks up a localized string similar to Expected a difference greater than &lt;{3}&gt; between expected value &lt;{1}&gt; and actual value &lt;{2}&gt;. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreNotEqualFailMsg">
            <summary>
              Looks up a localized string similar to Expected any value except:&lt;{1}&gt;. Actual:&lt;{2}&gt;. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AreSameGivenValues">
            <summary>
              Looks up a localized string similar to Do not pass value types to AreSame(). Values converted to Object will never be the same. Consider using AreEqual(). {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.AssertionFailed">
            <summary>
              Looks up a localized string similar to {0} failed. {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.BothCollectionsEmpty">
            <summary>
              Looks up a localized string similar to Both collections are empty. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.BothCollectionsSameElements">
            <summary>
              Looks up a localized string similar to Both collection contain same elements..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.BothCollectionsSameReference">
            <summary>
              Looks up a localized string similar to Both collection references point to the same collection object. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.BothSameElements">
            <summary>
              Looks up a localized string similar to Both collections contain the same elements. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.CollectionEqualReason">
            <summary>
              Looks up a localized string similar to {0}. {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.Common_NullInMessages">
            <summary>
              Looks up a localized string similar to (null).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.Common_ObjectString">
            <summary>
              Looks up a localized string similar to (object).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ContainsFail">
            <summary>
              Looks up a localized string similar to String &apos;{0}&apos; does not contain string &apos;{1}&apos;. {2}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ContainsItemFailMsg">
            <summary>
              Looks up a localized string similar to Expected collection to contain the specified item. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ContainsPredicateFailMsg">
            <summary>
              Looks up a localized string similar to Expected at least one item to match the predicate. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ContainsSingleFailMsg">
            <summary>
              Looks up a localized string similar to Expected collection to contain exactly one element but found {1} element(s). {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ContainsSingleMatchFailMsg">
            <summary>
              Looks up a localized string similar to Expected exactly one item to match the predicate but found {1} item(s). {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DataDrivenResultDisplayName">
            <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DoesNotContainFail">
            <summary>
              Looks up a localized string similar to String &apos;{0}&apos; does contain string &apos;{1}&apos;. {2}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DoesNotContainItemFailMsg">
            <summary>
              Looks up a localized string similar to Expected collection to not contain the specified item. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DoesNotContainPredicateFailMsg">
            <summary>
              Looks up a localized string similar to Expected no items to match the predicate. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DoesNotEndWithFail">
            <summary>
              Looks up a localized string similar to String &apos;{0}&apos; ends with string &apos;{1}&apos;. {2}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DoesNotStartWithFail">
            <summary>
              Looks up a localized string similar to String &apos;{0}&apos; starts with string &apos;{1}&apos;. {2}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DoNotUseAssertEquals">
            <summary>
              Looks up a localized string similar to Assert.Equals should not be used for Assertions. Please use Assert.AreEqual &amp; overloads instead..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DoNotUseAssertReferenceEquals">
            <summary>
              Looks up a localized string similar to Assert.ReferenceEquals should not be used for Assertions. Please use Assert.AreSame &amp; overloads instead..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DoNotUseCollectionAssertEquals">
            <summary>
              Looks up a localized string similar to CollectionAssert.Equals should not be used for Assertions. Please use CollectionAssert.AreEqual &amp; overloads instead..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DoNotUseCollectionAssertReferenceEquals">
            <summary>
              Looks up a localized string similar to CollectionAssert.ReferenceEquals should not be used for Assertions. Please use CollectionAssert methods or Assert.AreSame &amp; overloads instead..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DoNotUseStringAssertEquals">
            <summary>
              Looks up a localized string similar to StringAssert.Equals should not be used for Assertions. Please use StringAssert methods or Assert.AreEqual &amp; overloads instead..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DoNotUseStringAssertReferenceEquals">
            <summary>
              Looks up a localized string similar to StringAssert.ReferenceEquals should not be used for Assertions. Please use StringAssert methods or Assert.AreSame &amp; overloads instead..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DynamicDataDisplayName">
            <summary>
              Looks up a localized string similar to Method {0} must match the expected signature: public static {1} {0}({2})..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DynamicDataIEnumerableEmpty">
            <summary>
              Looks up a localized string similar to Property or method {0} on {1} returns empty IEnumerable&lt;object[]&gt;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DynamicDataIEnumerableNull">
            <summary>
              Looks up a localized string similar to Property or method {0} on {1} return type is not assignable to &apos;IEnumerable&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DynamicDataInvalidMethodLayout">
            <summary>
              Looks up a localized string similar to Dynamic data method &apos;{0}&apos; should be static, non-generic, and cannot have &apos;params&apos; parameter..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DynamicDataInvalidPropertyLayout">
            <summary>
              Looks up a localized string similar to Dynamic data property &apos;{0}&apos; should be static and have a getter..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DynamicDataSourceShouldExistAndBeValid">
            <summary>
              Looks up a localized string similar to The dynamic data source &apos;{0}&apos; in type &apos;{1}&apos; should exist and be a property or a method..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.DynamicDataValueNull">
            <summary>
              Looks up a localized string similar to Value returned by property or method {0} shouldn&apos;t be null..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ElementNumbersDontMatch">
            <summary>
              Looks up a localized string similar to The number of elements in the collections do not match. Expected:&lt;{1}&gt;. Actual:&lt;{2}&gt;.{0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ElementsAtIndexDontMatch">
             <summary>
               Looks up a localized string similar to Element at index {0} do not match.
            Expected: {1}
            Actual: {2}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.ElementTypesAtIndexDontMatch">
            <summary>
              Looks up a localized string similar to Element at index {1} is not of expected type. Expected type:&lt;{2}&gt;. Actual type:&lt;{3}&gt;.{0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.EndsWithFail">
            <summary>
              Looks up a localized string similar to String &apos;{0}&apos; does not end with string &apos;{1}&apos;. {2}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.HasCountFailMsg">
            <summary>
              Looks up a localized string similar to Expected collection of size {1}. Actual: {2}. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.InvalidGitHubUrl">
            <summary>
              Looks up a localized string similar to Invalid GitHub ticket URL.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.InvalidPropertyType">
            <summary>
              Looks up a localized string similar to The property {0} has type {1}; expected type {2}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.IsGreaterThanFailMsg">
            <summary>
              Looks up a localized string similar to Actual value &lt;{2}&gt; is not greater than expected value &lt;{1}&gt;. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.IsGreaterThanOrEqualToFailMsg">
            <summary>
              Looks up a localized string similar to Actual value &lt;{2}&gt; is not greater than or equal to expected value &lt;{1}&gt;. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.IsInRangeFail">
            <summary>
              Looks up a localized string similar to Value &apos;{0}&apos; is not within the expected range [{1}, {2}]. {3}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.IsInstanceOfFailMsg">
            <summary>
              Looks up a localized string similar to {0} Expected type:&lt;{1}&gt;. Actual type:&lt;{2}&gt;..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.IsLessThanFailMsg">
            <summary>
              Looks up a localized string similar to Actual value &lt;{2}&gt; is not less than expected value &lt;{1}&gt;. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.IsLessThanOrEqualToFailMsg">
            <summary>
              Looks up a localized string similar to Actual value &lt;{2}&gt; is not less than or equal to expected value &lt;{1}&gt;. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.IsMatchFail">
            <summary>
              Looks up a localized string similar to String &apos;{0}&apos; does not match pattern &apos;{1}&apos;. {2}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.IsNegativeFailMsg">
            <summary>
              Looks up a localized string similar to Expected value &lt;{1}&gt; to be negative. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.IsNotEmptyFailMsg">
            <summary>
              Looks up a localized string similar to Expected collection to contain any item but it is empty. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.IsNotInstanceOfFailMsg">
            <summary>
              Looks up a localized string similar to Wrong Type:&lt;{1}&gt;. Actual type:&lt;{2}&gt;. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.IsNotMatchFail">
            <summary>
              Looks up a localized string similar to String &apos;{0}&apos; matches pattern &apos;{1}&apos;. {2}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.IsPositiveFailMsg">
            <summary>
              Looks up a localized string similar to Expected value &lt;{1}&gt; to be positive. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.NoExceptionThrown">
            <summary>
              Looks up a localized string similar to Expected exception type:&lt;{1}&gt; but no exception was thrown. {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.NullParameterToAssert">
            <summary>
              Looks up a localized string similar to The parameter &apos;{0}&apos; is invalid. The value cannot be null. {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.NumberOfElementsDiff">
            <summary>
              Looks up a localized string similar to Different number of elements..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.PrivateAccessorConstructorNotFound">
            <summary>
              Looks up a localized string similar to 
                 The constructor with the specified signature could not be found. You might need to regenerate your private accessor,
                 or the member may be private and defined on a base class. If the latter is true, you need to pass the type
                 that defines the member into PrivateObject&apos;s constructor.
               .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.PrivateAccessorMemberNotFound">
            <summary>
              Looks up a localized string similar to 
                 The member specified ({0}) could not be found. You might need to regenerate your private accessor,
                 or the member may be private and defined on a base class. If the latter is true, you need to pass the type
                 that defines the member into PrivateObject&apos;s constructor.
               .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.StartsWithFail">
            <summary>
              Looks up a localized string similar to String &apos;{0}&apos; does not start with string &apos;{1}&apos;. {2}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.UTF_ExpectedExceptionTypeMustDeriveFromException">
            <summary>
              Looks up a localized string similar to The expected exception type must be System.Exception or a type derived from System.Exception..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.UTF_FailedToGetExceptionMessage">
            <summary>
              Looks up a localized string similar to (Failed to get the message for an exception of type {0} due to an exception.).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.UTF_TestMethodNoException">
            <summary>
              Looks up a localized string similar to Test method did not throw expected exception {0}. {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.UTF_TestMethodNoExceptionDefault">
            <summary>
              Looks up a localized string similar to Test method did not throw an exception. An exception was expected by attribute {0} defined on the test method..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.UTF_TestMethodWrongException">
            <summary>
              Looks up a localized string similar to Test method threw exception {0}, but exception {1} was expected. Exception message: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.UTF_TestMethodWrongExceptionDerivedAllowed">
            <summary>
              Looks up a localized string similar to Test method threw exception {0}, but exception {1} or a type derived from it was expected. Exception message: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages.WrongExceptionThrown">
            <summary>
              Looks up a localized string similar to Expected exception type:&lt;{1}&gt;. Actual exception type:&lt;{2}&gt;. {0}.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataRow`1">
            <summary>
            When this type is returned from <see cref="M:Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource.GetData(System.Reflection.MethodInfo)" /> (for example, through <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute" />), it
            determines information related to the specific test case.
            </summary>
            <typeparam name="T">The type parameter corresponding to the type of the value held by this type. It can be a tuple for test methods with more than one parameter.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataRow`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataRow`1"/> class.
            </summary>
            <param name="value">The value to be held by this instance, which could be a <see cref="T:System.Tuple"/> or <see cref="!:ValueTuple"/> if the test method has more than one parameter.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataRow`1.Value">
            <summary>
            Gets the value held by this instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataRow`1.IgnoreMessage">
            <summary>
            Gets or sets the ignore message. A non-null value means the test case is ignored with the message provided.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataRow`1.DisplayName">
            <summary>
            Gets or sets the display name for the test case.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataRow`1.TestCategories">
            <summary>
            Gets or sets the test categories for the test case.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataRow`1.Microsoft#VisualStudio#TestTools#UnitTesting#ITestDataRow#Value">
            <inheritdoc cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.TestDataRow`1.Value"/>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome">
            <summary>
            unit test outcomes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Failed">
            <summary>
            Test was executed, but there were issues.
            Issues may involve exceptions or failed assertions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Inconclusive">
            <summary>
            Test has completed, but we can't say if it passed or failed.
            May be used for aborted tests.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Passed">
            <summary>
            Test was executed without any issues.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.InProgress">
            <summary>
            Test is currently executing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Error">
            <summary>
            There was a system error while we were trying to execute a test.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Timeout">
            <summary>
            The test timed out.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Aborted">
            <summary>
            Test was aborted by the user.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Unknown">
            <summary>
            Test is in an unknown state.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.NotRunnable">
            <summary>
            Test cannot be executed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.NotFound">
            <summary>
            The specific test cannot be found.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Ignored">
            <summary>
            Test is marked as ignored.
            </summary>
        </member>
    </members>
</doc>
