<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fonet</name>
    </assembly>
    <members>
        <member name="T:Fonet.FonetDriver">
            <summary>
                FonetDriver provides the client with a single interface to invoking FO.NET.
            </summary>
            <remarks>
                The examples belows demonstrate several ways of invoking FO.NET.  The 
                methodology is the same regardless of how FO.NET is embedded in your 
                system (ASP.NET, WinForm, Web Service, etc).
            </remarks>
            <example>
            <code lang="csharp">
            // This example demonstrates rendering an XSL-FO file to a PDF file.
            FonetDriver driver = FonetDriver.Make();
            driver.Render(
                new FileStream("readme.fo", FileMode.Open), 
                new FileStream("readme.pdf", FileMode.Create));
            </code>
            <code lang="vb">
            // This example demonstrates rendering an XSL-FO file to a PDF file.
            Dim driver As FonetDriver = FonetDriver.Make
            driver.Render( _
                New FileStream("readme.fo", FileMode.Open), _
                New FileStream("readme.pdf", FileMode.Create))
            </code>
            <code lang="csharp">
            // This example demonstrates using an XmlDocument as the source of the 
            // XSL-FO tree.  The XmlDocument could easily be dynamically generated.
            XmlDocument doc = new XmlDocument()
            doc.Load("reader.fo");
                
            FonetDriver driver = FonetDriver.Make();
            driver.Render(doc, new FileStream("readme.pdf", FileMode.Create));
            </code>
            <code lang="vb">
            // This example demonstrates using an XmlDocument as the source of the 
            // XSL-FO tree.  The XmlDocument could easily be dynamically generated.
            Dim doc As XmlDocument = New XmlDocument()
            doc.Load("reader.fo")
                
            Dim driver As FonetDriver = FonetDriver.Make
            driver.Render(doc, New FileStream("readme.pdf", FileMode.Create))
            </code>
            </example>
        </member>
        <member name="F:Fonet.FonetDriver.closeOnExit">
            <summary>
                Determines if the output stream passed to Render() should
                be closed upon completion or if a fatal exception occurs.
            </summary>
        </member>
        <member name="F:Fonet.FonetDriver.renderOptions">
            <summary>
                Options to supply to the renderer.
            </summary>
        </member>
        <member name="F:Fonet.FonetDriver.credentials">
            <summary>
                Maps a set of credentials to an internet resource
            </summary>
        </member>
        <member name="F:Fonet.FonetDriver.baseDirectory">
            <summary>
                The directory that external resources such as images are loaded 
                from when using relative path references.
            </summary>
        </member>
        <member name="F:Fonet.FonetDriver.timeout">
            <summary>
                The timeout used when accessing external resources via a URL.
            </summary>
        </member>
        <member name="F:Fonet.FonetDriver.activeDriver">
            <summary>
                The active driver.
            </summary>
        </member>
        <member name="F:Fonet.FonetDriver.imageHandler">
            <summary>
                An optional image handler that can be registered to load image
                data for external graphic formatting objects.
            </summary>
        </member>
        <member name="M:Fonet.FonetDriver.Make">
            <summary>
                Constructs a new FonetDriver and registers the newly created 
                driver as the active driver.
            </summary>
            <returns>An instance of FonetDriver</returns>
        </member>
        <member name="M:Fonet.FonetDriver.#ctor">
            <summary>
                Sets the the 'baseDir' property in the Configuration class using 
                the value returned by Directory.GetCurrentDirectory().  Sets the 
                default timeout to 100 seconds.
            </summary>
        </member>
        <member name="M:Fonet.FonetDriver.Render(System.Xml.XmlDocument,System.IO.Stream)">
            <summary>
                Executes the conversion reading the source tree from the supplied 
                XmlDocument, converting it to a format dictated by the renderer 
                and writing it to the supplied output stream.
            </summary>
            <param name="doc">
                An in-memory representation of an XML document (DOM).
            </param>
            <param name="outputStream">
                Any subclass of the Stream class.
            </param>
            <remarks>
                Any exceptions that occur during the render process are arranged 
                into three categories: information, warning and error.  You may 
                intercept any or all of theses exceptional states by registering 
                an event listener.  See <see cref="E:Fonet.FonetDriver.OnError"/> for an 
                example of registering an event listener.  If there are no 
                registered listeners, the exceptions are dumped to standard out - 
                except for the error event which is wrapped in a 
                <see cref="T:System.SystemException"/>.
            </remarks>
        </member>
        <member name="M:Fonet.FonetDriver.Render(System.IO.TextReader,System.IO.Stream)">
            <summary>
                Executes the conversion reading the source tree from the input 
                reader, converting it to a format dictated by the renderer and 
                writing it to the supplied output stream.
            </summary>
            <param name="inputReader">A character orientated stream</param>
            <param name="outputStream">Any subclass of the Stream class</param>
        </member>
        <member name="M:Fonet.FonetDriver.Render(System.String,System.String)">
            <summary>
                Executes the conversion reading the source tree from the file 
                <i>inputFile</i>, converting it to a format dictated by the 
                renderer and writing it to the file identified by <i>outputFile</i>.
            </summary>
            <remarks>
                If the file <i>outputFile</i> does not exist, it will created 
                otherwise it will be overwritten.  Creating a file may 
                generate a variety of exceptions.  See <see cref="T:System.IO.FileStream"/>
                for a complete list.<br/>
            </remarks>
            <param name="inputFile">Path to an XSL-FO file</param>
            <param name="outputFile">Path to a file</param>
        </member>
        <member name="M:Fonet.FonetDriver.Render(System.String,System.IO.Stream)">
            <summary>
                Executes the conversion reading the source tree from the file 
                <i>inputFile</i>, converting it to a format dictated by the 
                renderer and writing it to the supplied output stream.
            </summary>
            <param name="inputFile">Path to an XSL-FO file</param>
            <param name="outputStream">
                Any subclass of the Stream class, e.g. FileStream
            </param>
        </member>
        <member name="M:Fonet.FonetDriver.Render(System.IO.Stream,System.IO.Stream)">
            <summary>
                Executes the conversion reading the source tree from the input 
                stream, converting it to a format dictated by the render and 
                writing it to the supplied output stream.
            </summary>
            <param name="inputStream">Any subclass of the Stream class, e.g. FileStream</param>
            <param name="outputStream">Any subclass of the Stream class, e.g. FileStream</param>
        </member>
        <member name="M:Fonet.FonetDriver.Render(System.Xml.XmlReader,System.IO.Stream)">
            <summary>
                Executes the conversion reading the source tree from the input 
                reader, converting it to a format dictated by the render and 
                writing it to the supplied output stream.
            </summary>
            <remarks>
                The evaluation copy of this class will output an evaluation
                banner to standard out
            </remarks>
            <param name="inputReader">
                Reader that provides fast, non-cached, forward-only access 
                to XML data
            </param>
            <param name="outputStream">
                Any subclass of the Stream class, e.g. FileStream
            </param>
        </member>
        <member name="M:Fonet.FonetDriver.FireFonetError(System.String)">
            <summary>
                Sends an 'error' event to all registered listeners.
            </summary>
            <remarks>
                If there are no listeners, a <see cref="T:System.SystemException"/> is 
                thrown immediately halting execution
            </remarks>
            <param name="message">Any error message, which may be null</param>
            <exception cref="T:System.SystemException">
                If no listener is registered for this event, a SystemException
                will be thrown
            </exception>
        </member>
        <member name="M:Fonet.FonetDriver.FireFonetWarning(System.String)">
            <summary>
                Sends a 'warning' event to all registered listeners
            </summary>
            <remarks>
                If there are no listeners, <i>message</i> is written out 
                to the console instead
            </remarks>
            <param name="message">Any warning message, which may be null</param>
        </member>
        <member name="M:Fonet.FonetDriver.FireFonetInfo(System.String)">
            <summary>
                Sends an 'info' event to all registered lisetners
            </summary>
            <remarks>
                If there are no listeners, <i>message</i> is written out 
                to the console instead
            </remarks>
            <param name="message">An info message, which may be null</param>
        </member>
        <member name="M:Fonet.FonetDriver.CreateXmlTextReader(System.String)">
            <summary>
                Utility method that creates an <see cref="T:System.Xml.XmlTextReader"/>
                for the supplied file
            </summary>
            <remarks>
                The returned <see cref="T:System.Xml.XmlReader"/> interprets all whitespace
            </remarks>
        </member>
        <member name="M:Fonet.FonetDriver.CreateXmlTextReader(System.IO.Stream)">
            <summary>
                Utility method that creates an <see cref="T:System.Xml.XmlTextReader"/>
                for the supplied file
            </summary>
            <remarks>
                The returned <see cref="T:System.Xml.XmlReader"/> interprets all whitespace
            </remarks>
        </member>
        <member name="M:Fonet.FonetDriver.CreateXmlTextReader(System.IO.TextReader)">
            <summary>
                Utility method that creates an <see cref="T:System.Xml.XmlTextReader"/>
                for the supplied file
            </summary>
            <remarks>
                The returned <see cref="T:System.Xml.XmlReader"/> interprets all whitespace
            </remarks>
        </member>
        <member name="E:Fonet.FonetDriver.OnError">
            <summary>
                A multicast delegate.  The error event FO.NET publishes.
            </summary>
            <remarks>
                The method signature for this event handler should match 
                the following:
                <pre class="code"><span class="lang">
                void FonetError(object driver, FonetEventArgs e);
                </span></pre>
                The first parameter <i>driver</i> will be a reference to the 
                active FonetDriver instance.
            </remarks>
            <example>Subscribing to the 'error' event
                <pre class="code"><span class="lang">[C#]</span><br/>
                {
                FonetDriver driver = FonetDriver.Make();
                driver.OnError += new FonetDriver.FonetEventHandler(FonetError);
                ...
                }
                </pre>
            </example>
        </member>
        <member name="E:Fonet.FonetDriver.OnWarning">
            <summary>
                A multicast delegate.  The warning event FO.NET publishes.
            </summary>
            <remarks>
                The method signature for this event handler should match 
                the following:
                <pre class="code"><span class="lang">
                void FonetWarning(object driver, FonetEventArgs e);
                </span></pre>
                The first parameter <i>driver</i> will be a reference to the 
                active FonetDriver instance.
            </remarks>
        </member>
        <member name="E:Fonet.FonetDriver.OnInfo">
            <summary>
                A multicast delegate.  The info event FO.NET publishes.
            </summary>
            <remarks>
                The method signature for this event handler should match 
                the following:
                <pre class="code"><span class="lang">
                void FonetInfo(object driver, FonetEventArgs e);
                </span></pre>
                The first parameter <i>driver</i> will be a reference to the 
                active FonetDriver instance.
            </remarks>
        </member>
        <member name="P:Fonet.FonetDriver.CloseOnExit">
            <summary>
                Determines if the output stream should be automatically closed 
                upon completion of the render process.
            </summary>
        </member>
        <member name="P:Fonet.FonetDriver.ActiveDriver">
            <summary>
                Gets or sets the active <see cref="T:Fonet.FonetDriver"/>.
            </summary>
            <value>
                An instance of <see cref="T:Fonet.FonetDriver"/> created via the factory method 
                <see cref="M:Fonet.FonetDriver.Make"/>.
            </value>
        </member>
        <member name="P:Fonet.FonetDriver.BaseDirectory">
            <summary>
                Gets or sets the base directory used to locate external 
                resourcs such as images.
            </summary>
            <value>
                Defaults to the current working directory.
            </value>
        </member>
        <member name="P:Fonet.FonetDriver.ImageHandler">
            <summary>
                Gets or sets the handler that is responsible for loading the image
                data for external graphics.
            </summary>
            <remarks>
                If null is returned from the image handler, then FO.NET will perform 
                normal processing.
            </remarks>
        </member>
        <member name="P:Fonet.FonetDriver.Timeout">
            <summary>
                Gets or sets the time in milliseconds until an HTTP image request 
                times out.
            </summary>
            <remarks>
                The default value is 100000 milliseconds.
            </remarks>
            <value>
                The timeout value in milliseconds
            </value>
        </member>
        <member name="P:Fonet.FonetDriver.Credentials">
            <summary>
                Gets a reference to a <see cref="T:System.Net.CredentialCache"/> object 
                that manages credentials for multiple Internet resources.
                <seealso cref="T:System.Net.CredentialCache"/>
            </summary>
            <remarks>
                The purpose of this property is to associate a set of credentials against 
                an Internet resource.  These credentials are then used by FO.NET when 
                fetching images from one of the listed resources.
            </remarks>
            <example>
                FonetDriver driver = FonetDriver.Make();
                
                NetworkCredential nc1 = new NetworkCredential("foo", "password");
                driver.Credentials.Add(new Uri("http://www.chive.com"), "Basic", nc1);
                
                NetworkCredential nc2 = new NetworkCredential("john", "password", "UK");
                driver.Credentials.Add(new Uri("http://www.xyz.com"), "Digest", nc2);
            </example>
        </member>
        <member name="P:Fonet.FonetDriver.Options">
            <summary>
                Options that are passed to the rendering engine.
            </summary>
        </member>
        <member name="T:Fonet.FonetDriver.FonetEventHandler">
            <summary>
                The delegate subscribers must implement to receive FO.NET events.
            </summary>
            <remarks>
                The <paramref name="driver"/> parameter will be a reference to 
                the  active FonetDriver.  The <paramref name="e"/> parameter will 
                contain a human-readable error message.
            </remarks>
            <param name="driver">A reference to the active FonetDriver</param>
            <param name="e">Encapsulates a human readable error message</param>
        </member>
        <member name="T:Fonet.FonetDriver.FonetImageHandler">
            <summary>
                The delegate subscribers must implement to handle the loading 
                of image data in response to external-graphic formatting objects.
            </summary>
        </member>
        <member name="T:Fonet.FonetEventArgs">
            <summary>
                A class containing event data for the Error, Warning and Info 
                events defined in <see cref="T:Fonet.FonetDriver"/>.
            </summary>
        </member>
        <member name="M:Fonet.FonetEventArgs.#ctor(System.String)">
            <summary>
                Initialises a new instance of the <i>FonetEventArgs</i> class.
            </summary>
            <param name="message">The text of the event message.</param>
        </member>
        <member name="M:Fonet.FonetEventArgs.GetMessage">
            <summary>
                Retrieves the event message.
            </summary>
            <returns>A string which may be null.</returns>
        </member>
        <member name="M:Fonet.FonetEventArgs.ToString">
            <summary>
                Converts this <i>FonetEventArgs</i> to a string.
            </summary>
            <returns>
                A string representation of this class which is identical 
                to <see cref="M:Fonet.FonetEventArgs.GetMessage"/>.
            </returns>
        </member>
        <member name="T:Fonet.FonetException">
            <summary>
                This exception is thrown by FO.NET when an error occurs.
            </summary>
        </member>
        <member name="M:Fonet.FonetException.#ctor(System.Exception)">
            <summary>
                Initialises a new instance of the FonetException class.
            </summary>
            <remarks>
                The <see cref="P:System.Exception.Message"/> property will be initialised 
                to <i>innerException.Message</i>
            </remarks>
            <param name="innerException">
                The exception that is the cause of the current exception
            </param>
        </member>
        <member name="M:Fonet.FonetException.#ctor(System.String)">
            <summary>
                Initialises a new instance of the FonetException class.
            </summary>
            <param name="message">
                The error message that explains the reason for this exception
            </param>
        </member>
        <member name="M:Fonet.FonetException.#ctor(System.String,System.Exception)">
            <summary>
                Initialises a new instance of the FonetException class.
            </summary>
            <param name="message">
                The error message that explains the reason for this exception
            </param>
            <param name="innerException">
                The exception that is the cause of the current exception
            </param>
        </member>
        <member name="M:Fonet.Fo.PropertyMaker.#ctor">
            <summary>
                Construct an instance of a PropertyMaker.
            </summary>
            <remarks>
                The property name is set to "UNKNOWN".
            </remarks>
        </member>
        <member name="M:Fonet.Fo.PropertyMaker.#ctor(System.String)">
            <summary>
                Construct an instance of a PropertyMaker for the given property.
            </summary>
            <param name="propName">The name of the property to be made.</param>
        </member>
        <member name="M:Fonet.Fo.PropertyMaker.IsInherited">
            <summary>
                Default implementation of isInherited.
            </summary>
            <returns>A boolean indicating whether this property is inherited.</returns>
        </member>
        <member name="M:Fonet.Fo.PropertyMaker.InheritsSpecified">
            <summary>
                Return a boolean indicating whether this property inherits the
                "specified" value rather than the "computed" value. The default is 
                to inherit the "computed" value.
            </summary>
            <returns>If true, property inherits the value specified.</returns>
        </member>
        <member name="M:Fonet.Fo.PropertyMaker.GetPercentBase(Fonet.Fo.FObj,Fonet.Fo.PropertyList)">
            <summary>
                Return an object implementing the PercentBase interface.  This is 
                used to handle properties specified as a percentage of some "base 
                length", such as the content width of their containing box.  
                Overridden by subclasses which allow percent specifications. See
                the documentation on properties.xsl for details.
            </summary>
            <param name="fo"></param>
            <param name="pl"></param>
            <returns></returns>
        </member>
        <member name="M:Fonet.Fo.PropertyMaker.GetSubpropMaker(System.String)">
            <summary>
                Return a Maker object which is used to set the values on components 
                of compound property types, such as "space".  Overridden by property 
                maker subclasses which handle compound properties.
            </summary>
            <param name="subprop">
                The name of the component for which a Maker is to returned, for 
                example "optimum", if the FO attribute is space.optimum='10pt'.
            </param>
            <returns></returns>
        </member>
        <member name="M:Fonet.Fo.PropertyMaker.GetSubpropValue(Fonet.Fo.Property,System.String)">
            <summary>
                Return a property value for the given component of a compound 
                property.
            </summary>
            <remarks>
                NOTE: this is only to ease porting when calls are made to 
                PropertyList.get() using a component name of a compound property,
                such as get("space.optimum"). 
                The recommended technique is: get("space").getOptimum().
                Overridden by property maker subclasses which handle compound properties.
            </remarks>
            <param name="p">A property value for a compound property type such as SpaceProperty.</param>
            <param name="subprop">The name of the component whose value is to be returned.</param>
            <returns></returns>
        </member>
        <member name="M:Fonet.Fo.PropertyMaker.Make(Fonet.Fo.Property,System.String,Fonet.Fo.PropertyList,System.String,Fonet.Fo.FObj)">
            <summary>
                Return a property value for a compound property. If the property
                value is already partially initialized, this method will modify it.
            </summary>
            <param name="baseProp">
                The Property object representing the compound property, such as 
                SpaceProperty.
            </param>
            <param name="partName">The name of the component whose value is specified.</param>
            <param name="propertyList">The propertyList being built.</param>
            <param name="value"></param>
            <param name="fo">The FO whose properties are being set.</param>
            <returns>A compound property object.</returns>
        </member>
        <member name="M:Fonet.Fo.PropertyMaker.SetSubprop(Fonet.Fo.Property,System.String,Fonet.Fo.Property)">
            <summary>
                Set a component in a compound property and return the modified
                compound property object.  This default implementation returns 
                the original base property without modifying it.  It is overridden 
                by property maker subclasses which handle compound properties.
            </summary>
            <param name="baseProp">
                The Property object representing the compound property, such as SpaceProperty.
            </param>
            <param name="partName">The name of the component whose value is specified.</param>
            <param name="subProp">
                A Property object holding the specified value of the component to be set.
            </param>
            <returns>The modified compound property object.</returns>
        </member>
        <member name="M:Fonet.Fo.PropertyMaker.Make(Fonet.Fo.PropertyList,System.String,Fonet.Fo.FObj)">
            <summary>
                Create a Property object from an attribute specification.
            </summary>
            <param name="propertyList">The PropertyList object being built for this FO.</param>
            <param name="value">The attribute value.</param>
            <param name="fo">The current FO whose properties are being set.</param>
            <returns>The initialized Property object.</returns>
        </member>
        <member name="M:Fonet.Fo.PropertyMaker.CheckValueKeywords(System.String)">
            <summary>
                Return a String to be parsed if the passed value corresponds to
                a keyword which can be parsed and used to initialize the property.
                For example, the border-width family of properties can have the
                initializers "thin", "medium", or "thick". The foproperties.xml
                file specifies a length value equivalent for these keywords,
                such as "0.5pt" for "thin". These values are considered parseable,
                since the Length object is no longer responsible for parsing
                unit expresssions.
            </summary>
            <param name="value">The string value of property attribute.</param>
            <returns>
                A string containging a parseable equivalent or null if the passed 
                value isn't a keyword initializer for this Property.
            </returns>
        </member>
        <member name="M:Fonet.Fo.PropertyMaker.ConvertProperty(Fonet.Fo.Property,Fonet.Fo.PropertyList,Fonet.Fo.FObj)">
            <summary>
                Return a Property object based on the passed Property object.
                This method is called if the Property object built by the parser
                isn't the right type for this property.
                It is overridden by subclasses when the property specification in
                foproperties.xml specifies conversion rules.
            </summary>
            <param name="p">The Property object return by the expression parser</param>
            <param name="propertyList">The PropertyList object being built for this FO.</param>
            <param name="fo">The current FO whose properties are being set.</param>
            <returns>
                A Property of the correct type or null if the parsed value
                can't be converted to the correct type.
            </returns>
        </member>
        <member name="M:Fonet.Fo.PropertyMaker.Make(Fonet.Fo.PropertyList)">
            <summary>
                Return a Property object representing the initial value.
            </summary>
            <param name="propertyList">The PropertyList object being built for this FO.</param>
            <returns></returns>
        </member>
        <member name="M:Fonet.Fo.PropertyMaker.MakeCompound(Fonet.Fo.PropertyList,Fonet.Fo.FObj)">
            <summary>
                Return a Property object representing the initial value.
            </summary>
            <param name="propertyList">The PropertyList object being built for this FO.</param>
            <param name="parentFO">The parent FO for the FO whose property is being made.</param>
            <returns>
                A Property subclass object holding a "compound" property object
                initialized to the default values for each component.
            </returns>
        </member>
        <member name="M:Fonet.Fo.PropertyMaker.Compute(Fonet.Fo.PropertyList)">
            <summary>
                Return a Property object representing the value of this property,
                based on other property values for this FO.
                A special case is properties which inherit the specified value,
                rather than the computed value.
            </summary>
            <param name="propertyList">The PropertyList for the FO.</param>
            <returns>
                Property A computed Property value or null if no rules are 
                specified (in foproperties.xml) to compute the value.
            </returns>
        </member>
        <member name="P:Fonet.Fo.PropertyMaker.PropName">
            <summary>
                Return the name of the property whose value is being set.
            </summary>
        </member>
        <member name="T:Fonet.Fo.FOTreeBuilder">
            <summary>
                Builds the formatting object tree.
            </summary>
        </member>
        <member name="F:Fonet.Fo.FOTreeBuilder.fobjTable">
            <summary>
                Table mapping element names to the makers of objects
                representing formatting objects.
            </summary>
        </member>
        <member name="F:Fonet.Fo.FOTreeBuilder.propertylistTable">
            <summary>
                Class that builds a property list for each formatting object.
            </summary>
        </member>
        <member name="F:Fonet.Fo.FOTreeBuilder.currentFObj">
            <summary>
                Current formatting object being handled.
            </summary>
        </member>
        <member name="F:Fonet.Fo.FOTreeBuilder.rootFObj">
            <summary>
                The root of the formatting object tree.
            </summary>
        </member>
        <member name="F:Fonet.Fo.FOTreeBuilder.unknownFOs">
            <summary>
                Set of names of formatting objects encountered but unknown.
            </summary>
        </member>
        <member name="F:Fonet.Fo.FOTreeBuilder.streamRenderer">
            <summary>
                The class that handles formatting and rendering to a stream.
            </summary>
        </member>
        <member name="M:Fonet.Fo.FOTreeBuilder.SetStreamRenderer(Fonet.StreamRenderer)">
            <summary>
                Sets the stream renderer that will be used as output.
            </summary>
        </member>
        <member name="M:Fonet.Fo.FOTreeBuilder.AddElementMapping(System.String,System.Collections.Hashtable)">
            <summary>
                Add a mapping from element name to maker.
            </summary>
        </member>
        <member name="M:Fonet.Fo.FOTreeBuilder.AddPropertyMapping(System.String,System.Collections.Hashtable)">
            <summary>
                Add a mapping from property name to maker.
            </summary>
        </member>
        <member name="T:Fonet.Image.FonetImage">
            <summary>
            A bitmap image that will be referenced by fo:external-graphic.
            </summary>
        </member>
        <member name="F:Fonet.Image.FonetImage.filter">
            <summary>
                Filter that will be applied to image data
            </summary>
        </member>
        <member name="M:Fonet.Image.FonetImage.#ctor(System.String,System.Byte[])">
            <summary>
                Constructs a new FonetImage using the supplied bitmap.
            </summary>
            <remarks>
                Does not hold a reference to the passed bitmap.  Instead the
                image data is extracted from <b>bitmap</b> on construction.
            </remarks>
            <param name="href">The location of <i>bitmap</i></param>
            <param name="imageData">The image data</param>
        </member>
        <member name="M:Fonet.Image.FonetImage.ExtractImage(System.Drawing.Bitmap)">
            <summary>
                Extracts the raw data from the image into a byte array suitable
                for including in the PDF document.  The image is always extracted
                as a 24-bit RGB image, regardless of it's original colour space
                and colour depth.
            </summary>
            <param name="bitmap">The <see cref="T:System.Drawing.Bitmap"/> from which the data is extracted</param>
            <returns>A byte array containing the raw 24-bit RGB data</returns>
        </member>
        <member name="P:Fonet.Image.FonetImage.Uri">
            <summary>
                Return the image URL.
            </summary>
            <returns>the image URL (as a string)</returns>
        </member>
        <member name="P:Fonet.Image.FonetImage.Width">
            <summary>
                Return the image width. 
            </summary>
            <returns>the image width</returns>
        </member>
        <member name="P:Fonet.Image.FonetImage.Height">
            <summary>
                Return the image height. 
            </summary>
            <returns>the image height</returns>
        </member>
        <member name="P:Fonet.Image.FonetImage.BitsPerPixel">
            <summary>
                Return the number of bits per pixel. 
            </summary>
            <returns>number of bits per pixel</returns>
        </member>
        <member name="P:Fonet.Image.FonetImage.BitmapsSize">
            <summary>
                Return the image data size
            </summary>
            <returns>The image data size</returns>
        </member>
        <member name="P:Fonet.Image.FonetImage.Bitmaps">
            <summary>
                Return the image data (uncompressed). 
            </summary>
            <returns>the image data</returns>
        </member>
        <member name="P:Fonet.Image.FonetImage.ColorSpace">
            <summary>
                Return the image color space. 
            </summary>
            <returns>the image color space (Fonet.Datatypes.ColorSpace)</returns>
        </member>
        <member name="P:Fonet.Image.FonetImage.Filter">
            <summary>
                Returns the filter that should be applied to the bitmap data.
            </summary>
        </member>
        <member name="T:Fonet.Image.FonetImageFactory">
            <summary>
            Creates FonetImage instances.
            </summary>
        </member>
        <member name="M:Fonet.Image.FonetImageFactory.Make(System.String)">
            <summary>
                Creates a FonetImage from the supplied resource locator.  The 
                FonetImageFactory does cache images, therefore this method may 
                return a reference to an existing FonetImage
            </summary>
            <param name="href">A Uniform Resource Identifier</param>
            <returns>A reference to a  FonetImage</returns>
            <exception cref="T:Fonet.Image.FonetImageException"></exception>
        </member>
        <member name="T:Fonet.Image.JpegParser">
            <summary>
            Parses the contents of a JPEG image header to infer the colour 
            space and bits per pixel.
            </summary>
        </member>
        <member name="F:Fonet.Image.JpegParser.ms">
            <summary>
                JPEG image data
            </summary>
        </member>
        <member name="F:Fonet.Image.JpegParser.headerInfo">
            <summary>
                Contains number of bitplanes, color space and optional ICC Profile
            </summary>
        </member>
        <member name="F:Fonet.Image.JpegParser.iccProfileData">
            <summary>
                Raw ICC Profile
            </summary>
        </member>
        <member name="M:Fonet.Image.JpegParser.#ctor(System.Byte[])">
            <summary>
                Class constructor.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Fonet.Image.JpegParser.ReadHeader">
            <summary>
                
            </summary>
        </member>
        <member name="M:Fonet.Image.JpegParser.ReadInt">
            <summary>
                Reads a 16-bit integer from the underlying stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Image.JpegParser.ReadByte">
            <summary>
                Reads a 32-bit integer from the underlying stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Image.JpegParser.ReadString(System.Int32)">
            <summary>
                Reads the specified number of bytes from theunderlying stream 
                and converts them to a string using the ASCII encoding.
            </summary>
            <param name="numBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Fonet.Image.JpegParser.ReadFirstMarker">
            <summary>
                Reads the initial marker which should be SOI.
            </summary>
            <remarks>
                After invoking this method the stream will point to the location 
                immediately after the fiorst marker.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Fonet.Image.JpegParser.ReadNextMarker">
            <summary>
                Reads the next JPEG marker and returns its marker code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Image.JpegParser.SkipVariable">
            <summary>
                Skips over the parameters for any marker we don't want to process.
            </summary>
        </member>
        <member name="T:Fonet.Image.UriSpecificationParser">
            <summary>
                Parses a &lt;uri-specification&gt; as defined by 
                section 5.11 of the XSL specification.
            </summary>
            <remarks>
                This class may be better expressed as a datatype residing in 
                Fonet.DataTypes.
            </remarks>
        </member>
        <member name="T:Fonet.Layout.IFontDescriptor">
            <summary>
                A font descriptor specifies metrics and other attributes of a 
                font, as distinct from the metrics of individual glyphs.
            </summary>
            <remarks>
                See page 355 of PDF 1.4 specification for more information.
            </remarks>
        </member>
        <member name="P:Fonet.Layout.IFontDescriptor.Flags">
            <summary>
                Gets a collection of flags providing various font characteristics.
            </summary>
        </member>
        <member name="P:Fonet.Layout.IFontDescriptor.FontBBox">
            <summary>
                Gets the smallest rectangle that will encompass the shape that 
                would result if all glyhs of the font were placed with their 
                origins coincident.
            </summary>
        </member>
        <member name="P:Fonet.Layout.IFontDescriptor.ItalicAngle">
            <summary>
                Gets the main italic angle of the font expressed in tenths of 
                a degree counterclockwise from the vertical.
            </summary>
        </member>
        <member name="P:Fonet.Layout.IFontDescriptor.StemV">
            <summary>
                TODO: The thickness, measured horizontally, of the dominant vertical 
                stems of the glyphs in the font.
            </summary>
        </member>
        <member name="P:Fonet.Layout.IFontDescriptor.HasKerningInfo">
            <summary>
                Gets a value that indicates whether this font has kerning support.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fonet.Layout.IFontDescriptor.IsEmbeddable">
            <summary>
                Gets a value that indicates whether this font program may be legally 
                embedded within a document.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fonet.Layout.IFontDescriptor.IsSubsettable">
            <summary>
                Gets a value that indicates whether this font program my be subsetted.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fonet.Layout.IFontDescriptor.FontData">
            <summary>
                Gets a byte array representing a font program to be embedded 
                in a document.
            </summary>
            <remarks>
                If <see cref="P:Fonet.Layout.IFontDescriptor.IsEmbeddable"/> is <b>false</b> it is acceptable 
                for this method to return null.
            </remarks>
        </member>
        <member name="P:Fonet.Layout.IFontDescriptor.KerningInfo">
            <summary>
                Gets kerning information for this font.
            </summary>
            <remarks>
                If <see cref="P:Fonet.Layout.IFontDescriptor.HasKerningInfo"/> is <b>false</b> it is acceptable 
                for this method to return null.
            </remarks>
        </member>
        <member name="T:Fonet.Layout.IFontMetric">
            <summary>
                Interface for font metric classes
            </summary>
        </member>
        <member name="M:Fonet.Layout.IFontMetric.GetWidth(System.UInt16)">
            <summary>
                Gets the width of a character in 1/1000ths of a point size 
                located at the supplied codepoint.
            </summary>
            <remarks>
                For a type 1 font a code point is an octal code obtained from a 
                character encoding scheme (WinAnsiEncoding, MacRomaonEncoding, etc).
                For example, the code point for the space character is 040 (octal).
                For a type 0 font a code point represents a GID (Glyph index).
            </remarks>
            <param name="charIndex">A character code point.</param>
            <returns></returns>
        </member>
        <member name="P:Fonet.Layout.IFontMetric.Ascender">
            <summary>
                Specifies the maximum distance characters in this font extend 
                above the base line. This is the typographic ascent for the font. 
            </summary>
        </member>
        <member name="P:Fonet.Layout.IFontMetric.Descender">
            <summary>
                Specifies the maximum distance characters in this font extend 
                below the base line. This is the typographic descent for the font. 
            </summary>
        </member>
        <member name="P:Fonet.Layout.IFontMetric.CapHeight">
            <summary>
                Gets the vertical coordinate of the top of flat captial letters.
            </summary>
        </member>
        <member name="P:Fonet.Layout.IFontMetric.FirstChar">
            <summary>
                Gets the value of the first character used in the font
            </summary>
        </member>
        <member name="P:Fonet.Layout.IFontMetric.LastChar">
            <summary>
                Gets the value of the last character used in the font
            </summary>
        </member>
        <member name="P:Fonet.Layout.IFontMetric.Descriptor">
            <summary>
                Gets a reference to a font descriptor.  A descriptor is akin to 
                the PDF FontDescriptor object (see page 355 of PDF 1.4 spec).
            </summary>
        </member>
        <member name="P:Fonet.Layout.IFontMetric.Widths">
            <summary>
                Gets the widths of all characters in 1/1000ths of a point size.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fonet.Pdf.BfEntryList">
            <summary>
                A collection of <see cref="T:Fonet.Pdf.BfEntry"/> instances.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.BfEntryList.Add(Fonet.Pdf.BfEntry)">
            <summary>
                Adds the supplied <see cref="T:Fonet.Pdf.BfEntry"/> to the end of the collection.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Fonet.Pdf.BfEntryList.GetEnumerator">
            <summary>
                Returns an ArrayList enumerator that references a read-only version
                of the BfEntry list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fonet.Pdf.BfEntryList.Item(System.Int32)">
            <summary>
                Gets the <see cref="T:Fonet.Pdf.BfEntry"/> at <i>index</i>.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.BfEntryList.Count">
            <summary>
                Gets the number of <see cref="T:Fonet.Pdf.BfEntry"/> objects contained by this 
                <see cref="T:Fonet.Pdf.BfEntryList"/>
            </summary>
        </member>
        <member name="P:Fonet.Pdf.BfEntryList.NumRanges">
            <summary>
                Returns the number of <see cref="T:Fonet.Pdf.BfEntry"/> instances that 
                represent bfrange's
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fonet.Pdf.BfEntryList.Ranges">
            <summary>
                
            </summary>
        </member>
        <member name="P:Fonet.Pdf.BfEntryList.NumChars">
            <summary>
                Returns the number of <see cref="T:Fonet.Pdf.BfEntry"/> instances that 
                represent bfchar's
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fonet.Pdf.BfEntryList.Chars">
            <summary>
                
            </summary>
        </member>
        <member name="T:Fonet.Pdf.BfEntry">
            <summary>
                A <see cref="T:Fonet.Pdf.BfEntry"/> class can represent either a bfrange 
                or bfchar.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.BfEntry.#ctor(System.UInt16,System.UInt16)">
            <summary>
                Class cosntructor.
            </summary>
            <param name="startIndex"></param>
            <param name="unicodeValue"></param>
        </member>
        <member name="M:Fonet.Pdf.BfEntry.IncrementEndIndex">
            <summary>
                Increments the end index by one.
            </summary>
            <remarks>
                Incrementing the end index turns this BfEntry into a bfrange.
            </remarks>
        </member>
        <member name="P:Fonet.Pdf.BfEntry.IsRange">
            <summary>
                Returns <b>true</b> if this BfEntry represents a glyph range, i.e.
                the start index is not equal to the end index.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.BfEntry.IsChar">
            <summary>
                Returns <b>true</b> if this BfEntry represents a bfchar entry, i.e.
                the start index is equal to the end index.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.FileIdentifier">
            <summary>
                A File Identifier is described in section 8.3 of the PDF specification.
                The first string is a permanent identifier based on the contents of the file 
                at the time it was originally created, and does not change as the file is 
                incrementally updated.  The second string is a changing identifier based 
                on the file's contents the last time it was updated.
            </summary>
            <remarks>
                If this class were being use to update a PDF's file identifier, we'd need 
                to add a method to parse an existing file identifier.
            </remarks>
        </member>
        <member name="M:Fonet.Pdf.FileIdentifier.#ctor">
            <summary>
                Initialises the CreatedPart and ModifiedPart to a randomly generated GUID.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.FileIdentifier.#ctor(System.Byte[])">
            <summary>
                Initialises the CreatedPart and ModifiedPart to the passed string.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.FileIdentifier.CreatedPart">
            <summary>
                Returns the CreatedPart as a byte array.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.FileIdentifier.ModifiedPart">
            <summary>
                Returns the ModifiedPart as a byte array.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.FontLicenseException">
            <summary>
                Thrown during creation of PDF font object if the font's license
                is violated, e.g. attempting to subset a font that does not permit 
                subsetting.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.DirectoryEntry">
            <summary>
                Represents an entry in the directory table
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.DirectoryEntry.MakeTable(Fonet.Pdf.Gdi.Font.FontFileReader)">
            <summary>
                Gets an instance of an <see cref="T:Fonet.Pdf.Gdi.Font.FontTable"/> implementation that is 
                capable of parsing the table identified by <b>tab</b>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.DirectoryEntry.TableName">
            <summary>
                Returns the table tag as a string
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.DirectoryEntry.Tag">
            <summary>
                Gets the table tag encoded as an unsigned 32-bite integer.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.DirectoryEntry.Offset">
            <summary>
                Gets or sets a value that represents a <see cref="T:Fonet.Pdf.Gdi.Font.FontTable"/> 
                offset, i.e. the number of bytes from the beginning of the file.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.DirectoryEntry.Length">
            <summary>
                Gets or sets a value representing the number number of bytes
                a <see cref="T:Fonet.Pdf.Gdi.Font.FontTable"/> object occupies in a stream.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.DirectoryEntry.CheckSum">
            <summary>
                Gets or sets value that represents a checksum of a <see cref="T:Fonet.Pdf.Gdi.Font.FontTable"/>.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.FontFileReader">
            <summary>
                Class designed to parse a TrueType font file.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.FontFileReader.stream">
            <summary>
                A Big Endian stream.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.FontFileReader.fontName">
            <summary>
                Used to identity a font within a TrueType collection.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.FontFileReader.header">
            <summary>
                Maps a table name (4-character string) to a <see cref="T:Fonet.Pdf.Gdi.Font.DirectoryEntry"/>
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.FontFileReader.tableCache">
            <summary>
                A dictionary of cached <see cref="T:Fonet.Pdf.Gdi.Font.FontTable"/> instances.  
                The index is the table name.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.FontFileReader.mappings">
            <summary>
                Maps a glyph index to a subset index.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileReader.#ctor(System.IO.MemoryStream)">
            <summary>
                Class constructor.
            </summary>
            <param name="stream">Font data stream.</param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileReader.#ctor(System.IO.MemoryStream,System.String)">
            <summary>
                Class constructor.
            </summary>
            <param name="stream">Font data stream.</param>
            <param name="fontName">Name of a font in a TrueType collection.</param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileReader.ContainsTable(System.String)">
            <summary>
                Gets a value indicating whether or not this font contains the 
                supplied table.
            </summary>
            <param name="tableName">A table name.</param>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileReader.GetTable(System.String)">
            <summary>
                Gets a reference to the table structure identified by <i>tableName</i>
            </summary>
            <remarks>
                Only the following tables are supported: 
                <see cref="F:Fonet.Pdf.Gdi.Font.TableNames.Head"/> - Font header,
                <see cref="F:Fonet.Pdf.Gdi.Font.TableNames.Hhea"/> - Horizontal header,
                <see cref="F:Fonet.Pdf.Gdi.Font.TableNames.Hmtx"/> - Horizontal metrics,
                <see cref="F:Fonet.Pdf.Gdi.Font.TableNames.Maxp"/> - Maximum profile,
                <see cref="F:Fonet.Pdf.Gdi.Font.TableNames.Loca"/> - Index to location, 
                <see cref="F:Fonet.Pdf.Gdi.Font.TableNames.Glyf"/> - Glyf data,
                <see cref="F:Fonet.Pdf.Gdi.Font.TableNames.Cvt"/> - Control value,
                <see cref="F:Fonet.Pdf.Gdi.Font.TableNames.Prep"/> - Control value program,
                <see cref="F:Fonet.Pdf.Gdi.Font.TableNames.Fpgm"/> - Font program
            </remarks>
            <param name="tableName">A 4-character code identifying a table.</param>
            <exception cref="T:System.ArgumentException">
                If <b>tableName</b> does not represent a table in this font.
            </exception>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileReader.GetDictionaryEntry(System.String)">
            <summary>
                Gets a <see cref="T:Fonet.Pdf.Gdi.Font.DirectoryEntry"/> object for the supplied table.
            </summary>
            <param name="tableName">A 4-character code identifying a table.</param>
            <returns>
                A <see cref="T:Fonet.Pdf.Gdi.Font.DirectoryEntry"/> object or null if the table cannot 
                be located.
            </returns>
            <exception cref="T:System.ArgumentException">
                If <b>tag</b> does not represent a table in this font.
            </exception>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileReader.ReadTableHeaders">
            <summary>
                Reads the Offset and Directory tables.  If the FontFileStream represents 
                a TrueType collection, this method will look for the aforementioned 
                tables belonging to <i>fontName</i>.
            </summary>
            <remarks>
                This method can handle a TrueType collection.
            </remarks>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileReader.ReadRequiredTables">
            <summary>
                Caches the following tables: 'head', 'hhea', 'maxp', 'loca'
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileReader.OffsetStream(Fonet.Pdf.Gdi.Font.DirectoryEntry)">
            <summary>
                Sets the stream position to the offset in the supplied directory
                entry. Also ensures that the FontFileStream has enough bytes 
                available to read a font table.  Throws an exception if this 
                condition is not met.
            </summary>
            <param name="entry"></param>
            <exception cref="T:System.ArgumentException">
                If the supplied stream does not contain enough data.
            </exception>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.FontFileReader.IndexMappings">
            <summary>
                Gets or sets a dictionary containing glyph index to subset 
                index mappings.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.FontFileReader.Stream">
            <summary>
                Gets the underlying <see cref="T:Fonet.Pdf.Gdi.Font.FontFileStream"/>.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.FontFileReader.TableCount">
            <summary>
                Gets the number tables.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.FontFileStream">
            <summary>
                Class designed to read and write primitive datatypes from/to a 
                TrueType font file.
            </summary>
            <remarks>
                <p>All OpenType fonts use Motorola-style byte ordering (Big Endian).</p>
                <p>The following table lists the primitives and their definition. 
                Note the difference between the .NET CLR definition of certain 
                types and the TrueType definition.</p>
                <p>
                BYTE         8-bit unsigned integer. 
                CHAR         8-bit signed integer. 
                USHORT       16-bit unsigned integer. 
                SHORT        16-bit signed integer. 
                ULONG        32-bit unsigned integer. 
                LONG         32-bit signed integer. 
                Fixed        32-bit signed fixed-point number (16.16) 
                FWORD        16-bit signed integer (SHORT) that describes a 
                             quantity in FUnits. 
                UFWORD       16-bit unsigned integer (USHORT) that describes a 
                             quantity in FUnits. 
                F2DOT14      16-bit signed fixed number with the low 14 bits of 
                             fraction (2.14). 
                LONGDATETIME Date represented in number of seconds since 12:00 
                             midnight, January 1, 1904. The value is represented 
                             as a signed 64-bit integer. 
                Tag          Array of four uint8s (length = 32 bits) used to identify 
                             a script, language system, feature, or baseline 
                GlyphID      Glyph index number, same as uint16(length = 16 bits) 
                Offset       Offset to a table, same as uint16 (length = 16 bits), 
                             NULL offset = 0x0000 
                </p>
            </remarks>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.#ctor(System.Byte[])">
            <summary>
                Initialises a new instance of the <see cref="T:Fonet.Pdf.Gdi.Font.FontFileStream"/> 
                class using the supplied byte array as the underlying buffer.
            </summary>
            <param name="data">The font data encoded in a byte array.</param>
            <exception cref="T:System.ArgumentNullException">
                <i>data</i> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentException">
                <i>data</i> is a zero-length array.
            </exception>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.#ctor(System.IO.Stream)">
            <summary>
                Initialises a new instance of the <see cref="T:Fonet.Pdf.Gdi.Font.FontFileStream"/>
                class using the supplied stream as the underlying buffer.
            </summary>
            <param name="stream">Reference to an existing stream.</param>
            <exception cref="T:System.ArgumentNullException">
                <i>stream</i> is a null reference.
            </exception>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.ReadByte">
            <summary>
                Reads an unsigned byte from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.WriteByte(System.Byte)">
            <summary>
                Writes an unsigned byte from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.ReadChar">
            <summary>
                Reads an signed byte from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.WriteChar(System.SByte)">
            <summary>
                Writes a signed byte from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.ReadShort">
            <summary>
                Reads a short (16-bit signed integer) from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.WriteShort(System.Int32)">
            <summary>
                Writes a short (16-bit signed integer) to the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.ReadFWord">
            <summary>
                Reads a short (16-bit signed integer) from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.WriteFWord(System.Int32)">
            <summary>
                Writes a short (16-bit signed integer) to the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.ReadUShort">
            <summary>
                Reads a ushort (16-bit unsigned integer) from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.WriteUShort(System.Int32)">
            <summary>
                Writes a ushort (16-bit unsigned integer) to the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.ReadUFWord">
            <summary>
                Reads a ushort (16-bit unsigned integer) from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.WriteUFWord(System.Int32)">
            <summary>
                Writes a ushort (16-bit unsigned integer) to the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.ReadLong">
            <summary>
                Reads an int (32-bit signed integer) from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.WriteLong(System.Int32)">
            <summary>
                Writes an int (32-bit signed integer) to the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.ReadULong">
            <summary>
                Reads a uint (32-bit unsigned integer) from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.WriteULong(System.UInt32)">
            <summary>
                Writes a uint (32-bit unsigned integer) to the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.ReadFixed">
            <summary>
                Reads an int (32-bit signed integer) from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.WriteFixed(System.Int32)">
            <summary>
                Writes an int (32-bit unsigned integer) to the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.ReadLongDateTime">
            <summary>
                Reads a long (64-bit signed integer) from the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.WriteDateTime(System.Int64)">
            <summary>
                Writes a long (64-bit signed integer) to the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.ReadTag">
            <summary>
                Reads a tag (array of four bytes) from the font stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.WriteTag(System.Byte[])">
            <summary>
                Writes a tab (array of four bytes) to the font file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.Pad">
            <summary>
                Ensures the stream is padded on a 4-byte boundary.
            </summary>
            <remarks>
                This method will output between 0 and 3 bytes to the stream.
            </remarks>
            <returns>
                A value between 0 and 3 (inclusive).
            </returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Writes a sequence of bytes to the underlying stream.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads a block of bytes from the current stream and writes 
                the data to buffer.
            </summary>
            <param name="buffer">A byte buffer big enough to store <i>count</i> bytes.</param>
            <param name="offset">The byte offset in buffer to begin reading.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.Skip(System.Int64)">
            <summary>
                Offsets the stream position by the supplied number of bytes.
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.SetRestorePoint">
            <summary>
                Saves the current stream position onto a marker stack.
            </summary>
            <returns>
                Returns the current stream position.
            </returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileStream.Restore">
            <summary>
                Sets the stream <see cref="P:Fonet.Pdf.Gdi.Font.FontFileStream.Position"/> using the marker at the 
                head of the marker stack.
            </summary>
            <returns>
                Returns the stream position before it was reset.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                If the markers stack is empty.
            </exception>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.FontFileStream.Position">
            <summary>
                Gets or sets the current position of the font stream.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.FontFileStream.Length">
            <summary>
                Gets the length of the font stream in bytes.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.FontFileWriter">
            <summary>
                A specialised stream writer for creating OpenType fonts.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.FontFileWriter.OffsetTableSize">
            <summary>
                Size of the offset table in bytes.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.FontFileWriter.stream">
            <summary>
                The underlying stream.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.FontFileWriter.tables">
            <summary>
                List of font tables to write.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileWriter.#ctor(System.IO.Stream)">
            <summary>
                Creates a new instance of the <see cref="T:Fonet.Pdf.Gdi.Font.FontFileWriter"/> class
                using <i>stream</i> as the underlying stream object.
            </summary>
            <param name="stream"></param>
            <exception cref="T:System.ArgumentException">
                If <i>stream</i> is not writable.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                If <i>streamm</i> is a null reference.
            </exception>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileWriter.Write(Fonet.Pdf.Gdi.Font.FontTable)">
            <summary>
                Queues the supplied <see cref="T:Fonet.Pdf.Gdi.Font.FontTable"/> for writing 
                to the underlying stream.
            </summary>
            <remarks>
                The method will not immediately write the supplied font 
                table to the underlying stream.  Instead it queues the 
                font table since the offset table must be written out 
                before any tables.
            </remarks>
            <param name="table"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileWriter.Close">
            <summary>
                Writes the header and font tables to the underlying stream.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileWriter.WriteChecksumAdjustment">
            <summary>
                Updates the checkSumAdjustment field in the head table.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileWriter.WriteTables">
            <summary>
                Writes out each table to the font stream.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileWriter.WriteOffsetTable">
            <summary>
                Writes the offset table that appears at the beginning of 
                every TrueType/OpenType font.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileWriter.SkipTableDirectory">
            <summary>
                Does not actually write the table directory - simply "allocates"
                space for it in the stream.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileWriter.MaxPow2(System.Int32)">
            <summary>
                Returns the maximum power of 2 &lt;= max
            </summary>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileWriter.CalculateCheckSumAdjustment">
            <summary>
                Calculates the checksum of the entire font.
            </summary>
            <remarks>
                The underlying <see cref="T:Fonet.Pdf.Gdi.Font.FontFileStream"/> must be aligned on
                a 4-byte boundary.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontFileWriter.CalculateCheckSum(System.Int64)">
            <summary>
                Calculates the checksum of a <see cref="T:Fonet.Pdf.Gdi.Font.FontTable"/>.
            </summary>
            <remarks>
                The supplied <i>stream</i> must be positioned at the beginning of 
                the table.
            </remarks>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.FontFileWriter.Stream">
            <summary>
                Gets the underlying <see cref="T:Fonet.Pdf.Gdi.Font.FontFileStream"/>.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.FontSubset">
            <summary>
                Generates a subset from a TrueType font.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontSubset.#ctor(Fonet.Pdf.Gdi.Font.FontFileReader)">
            <summary>
                Creates a new instance of the FontSubset class.
            </summary>
            <param name="reader">TrueType font parser.</param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontSubset.Generate(System.IO.MemoryStream)">
            <summary>
                Writes the font subset to the supplied output stream.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.GlyphReader.ReadGlyph(System.Int32)">
            <summary>
                Reads a glyph description from the specified offset.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.GlyphReader.ReadCompositeGlyph(Fonet.Pdf.Gdi.Font.FontFileStream,Fonet.Pdf.Gdi.Font.Glyph)">
            <summary>
                Populate the <i>composites</i>IList containing all child glyphs 
                that this glyph uses.
            </summary>
            <remarks>
                The <i>stream</i> parameter must be positioned 10 bytes from 
                the beginning of the glyph description, i.e. the flags field.
            </remarks>
            <param name="stream"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.GlyphReader.GetGlyphLength(System.Int32)">
            <summary>
                Gets the length of the glyph description in bytes at 
                index <i>index</i>.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.BitMasks">
            <summary>
                Bit masks of the flags field in a composite glyph.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.IndexMappings">
            <summary>
                Utility class that stores a list of glyph indices and their 
                asociated subset indices.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.IndexMappings.glyphToSubset">
            <summary>
                Maps a glyph index to a subset index.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.IndexMappings.subsetToGlyph">
            <summary>
                Maps a subset index to glyph index.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.IndexMappings.#ctor">
            <summary>
                Class constructor.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.IndexMappings.HasMapping(System.Int32)">
            <summary>
                Determines whether a mapping exists for the supplied glyph index.
            </summary>
            <param name="glyphIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.IndexMappings.Map(System.Int32)">
            <summary>
                Returns the subset index for <i>glyphIndex</i>.  If a subset 
                index does not exist for <i>glyphIndex</i> one is generated.
            </summary>
            <param name="glyphIndex"></param>
            <returns>A subset index.</returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.IndexMappings.Add(System.Int32[])">
            <summary>
                Adds the list of supplied glyph indices to the index mappings using 
                the next available subset index for each glyph index.
            </summary>
            <param name="glyphIndices"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.IndexMappings.GetSubsetIndex(System.Int32)">
            <summary>
                Gets the subset index of <i>glyphIndex</i>.
            </summary>
            <param name="glyphIndex"></param>
            <returns>
                A glyph index or <b>-1</b> if a glyph to subset mapping does not exist.
            </returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.IndexMappings.GetGlyphIndex(System.Int32)">
            <summary>
                Gets the glyph index of <i>subsetIndex</i>.
            </summary>
            <param name="subsetIndex"></param>
            <returns>
                A subset index or <b>-1</b> if a subset to glyph mapping does not exist.
            </returns>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.IndexMappings.Count">
            <summary>
                Gets the number of glyph to subset index mappings.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.IndexMappings.GlyphIndices">
            <summary>
                Gets a list of glyph indices sorted in ascending order.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.IndexMappings.SubsetIndices">
            <summary>
                Gets a list of subset indices sorted in ascending order.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.KerningPairs.pairs">
            <summary>
                Key - Kerning pair identifier
                Value - Kerning amount
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.KerningPairs.#ctor">
            <summary>
                Creates an instance of KerningPairs allocating space for 
                100 kerning pairs.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.KerningPairs.#ctor(System.Int32)">
            <summary>
                Creates an instance of KerningPairs allocating space for 
                <i>numPairs</i> kerning pairs.
            </summary>
            <param name="numPairs"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.KerningPairs.HasKerning(System.UInt16,System.UInt16)">
            <summary>
                Returns true if a kerning value exists for the supplied 
                glyph index pair.
            </summary>
            <param name="left">Glyph index for left-hand glyph.</param>
            <param name="right">Glyph index for right-hand glyph.</param>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.KerningPairs.Add(System.UInt16,System.UInt16,System.Int32)">
            <summary>
                Creates a new kerning pair.
            </summary>
            <remarks>
                This method will ignore duplicates.
            </remarks>
            <param name="left">The glyph index for the left-hand glyph in the kerning pair.</param>
            <param name="right">The glyph index for the right-hand glyph in the kerning pair. </param>
            <param name="value">The kerning value for the supplied pair.</param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.KerningPairs.GetIndex(System.UInt16,System.UInt16)">
            <summary>
                Returns a kerning pair identifier.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.KerningPairs.Item(System.UInt16,System.UInt16)">
            <summary>
                Gets the kerning amount for the supplied glyph index pair.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.KerningPairs.Length">
            <summary>
                Gets the number of kernings pairs.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.PrimitiveSizes">
            <summary>
                A helper designed that provides the size of each TrueType primitives.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.TableNames">
            <summary>
                List of all TrueType and OpenType tables
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.TableNames.ToUint(System.String)">
            <summary>
                Converts one of the predefined table names to an unsigned integer.
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.ControlValueProgramTable">
            <summary>
                Class that represents the Control Value Program table ('prep').
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.FontTable">
            <summary>
                Class derived by all TrueType table classes.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.FontTable.directoryEntry">
            <summary>
                The dictionary entry for this table.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontTable.#ctor(System.String,Fonet.Pdf.Gdi.Font.DirectoryEntry)">
            <summary>
                Class constructor
            </summary>
            <param name="tableName">The table name.</param>
            <param name="entry">Table directory entry.</param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontTable.Read(Fonet.Pdf.Gdi.Font.FontFileReader)">
            <summary>
                Reads the contents of a table from the current position in 
                the supplied stream.
            </summary>
            <param name="reader"></param>
            <exception cref="T:System.ArgumentException">
                If the supplied stream does not contain enough data.
            </exception>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontTable.Write(Fonet.Pdf.Gdi.Font.FontFileWriter)">
            <summary>
                Writes the contents of a table to the supplied writer.
            </summary>
            <remarks>
                This method should not be concerned with aligning the 
                table output on the 4-byte boundary.
            </remarks>
            <param name="writer"></param>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.FontTable.Entry">
            <summary>
                Gets or sets a directory entry for this table.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.FontTable.Name">
            <summary>
                Gets the unique name of this table as a 4-character string.
            </summary>
            <remarks>
                Note that some TrueType tables are only 3 characters long 
                (e.g. 'cvt').  In this case the returned string will be padded 
                with a extra space at the end of the string.
            </remarks>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.FontTable.Tag">
            <summary>
                Gets the table name encoded as a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.ControlValueProgramTable.instructions">
            <summary>
                Set of instructions executed whenever point size or font 
                or transformation change.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.ControlValueProgramTable.#ctor(Fonet.Pdf.Gdi.Font.DirectoryEntry)">
            <summary>
                Creates an instance of the <see cref="T:Fonet.Pdf.Gdi.Font.ControlValueProgramTable"/> class.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.ControlValueProgramTable.Read(Fonet.Pdf.Gdi.Font.FontFileReader)">
            <summary>
                Reads the contents of the "prep" table from the current position 
                in the supplied stream.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.ControlValueProgramTable.Write(Fonet.Pdf.Gdi.Font.FontFileWriter)">
            <summary>
                Writes out the array of instructions to the supplied stream.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.ControlValueTable">
            <summary>
                Class that represents the Control Value table ('cvt').
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.ControlValueTable.values">
            <summary>
                List of N values referenceable by instructions. 
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.ControlValueTable.#ctor(Fonet.Pdf.Gdi.Font.DirectoryEntry)">
            <summary>
                Creates an instance of the <see cref="T:Fonet.Pdf.Gdi.Font.ControlValueTable"/> class.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.ControlValueTable.Read(Fonet.Pdf.Gdi.Font.FontFileReader)">
            <summary>
                Reads the contents of the "cvt" table from the current position 
                in the supplied stream.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.ControlValueTable.Write(Fonet.Pdf.Gdi.Font.FontFileWriter)">
            <summary>
                Writes out the array of values to the supplied stream.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.ControlValueTable.Count">
            <summary>
                Gets the value representing the number of values that can 
                be referenced by instructions.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.FontProgramTable">
            <summary>
                Class that represents the Font Program table ('fpgm').
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.FontProgramTable.instructions">
            <summary>
                List of N instructions. 
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontProgramTable.#ctor(Fonet.Pdf.Gdi.Font.DirectoryEntry)">
            <summary>
                Creates an instance of the <see cref="T:Fonet.Pdf.Gdi.Font.FontProgramTable"/> class.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontProgramTable.Read(Fonet.Pdf.Gdi.Font.FontFileReader)">
            <summary>
                Reads the contents of the "fpgm" table from the current position 
                in the supplied stream.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontProgramTable.Write(Fonet.Pdf.Gdi.Font.FontFileWriter)">
            <summary>
                Writes out the array of instructions to the supplied stream.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.FontProgramTable.Count">
            <summary>
                Gets the value representing the number of instructions 
                in the font program.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.FontTableFactory">
            <summary>
                Instantiates a font table from a table tag.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontTableFactory.#ctor">
            <summary>
                Prevent instantiation since this is a factory class.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.FontTableFactory.Make(System.String,Fonet.Pdf.Gdi.Font.FontFileReader)">
            <summary>
                Creates an instance of a class that implements the FontTable interface.
            </summary>
            <param name="tableName">
                One of the pre-defined TrueType tables from the <see cref="T:Fonet.Pdf.Gdi.Font.TableNames"/> class.
            </param>
            <returns>
                A subclass of <see cref="T:Fonet.Pdf.Gdi.Font.FontTable"/> that is capable of parsing 
                a TrueType table.
            </returns>
            <exception cref="T:System.ArgumentException">
                If a class capable of parsing <i>tableName</i> is not available.
            </exception>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.GlyfDataTable">
            <summary>
                Class that represents the Glyf Data table ('glyf').
            </summary>
            <remarks>
                http://www.microsoft.com/typography/otspec/glyf.htm
            </remarks>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.GlyfDataTable.glyphDescriptions">
            <summary>
                Maps a glyph index to a <see cref="T:Fonet.Pdf.Gdi.Font.Glyph"/> object.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.GlyfDataTable.#ctor(Fonet.Pdf.Gdi.Font.DirectoryEntry)">
            <summary>
                Creates an instance of the <see cref="T:Fonet.Pdf.Gdi.Font.GlyfDataTable"/> class.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.GlyfDataTable.Read(Fonet.Pdf.Gdi.Font.FontFileReader)">
            <summary>
                Reads the contents of the "glyf" table from the current position 
                in the supplied stream.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.GlyfDataTable.Write(Fonet.Pdf.Gdi.Font.FontFileWriter)">
            <summary>
                Writes the contents of the glyf table to the supplied stream.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.GlyfDataTable.Item(System.Int32)">
            <summary>
                Gets the <see cref="T:Fonet.Pdf.Gdi.Font.Glyph"/> instance located at <i>glyphIndex</i>
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.GlyfDataTable.Count">
            <summary>
                Gets the number of glyphs.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.Glyph">
            <summary>
                Represents either a simple or composite glyph description from
                the 'glyf' table.
            </summary>
            <remarks>
                This class is nothing more than a wrapper around 
                a byte array.
            </remarks>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.Glyph.glyphIndex">
            <summary>
                The index of this glyph as obtained from the 'loca' table.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.Glyph.glyphData">
            <summary>
                Contains glyph description as raw data.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.Glyph.children">
            <summary>
                List of composite glyph indices.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.Glyph.#ctor(System.Int32)">
            <summary>
                Class constructor.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.Glyph.SetGlyphData(System.Byte[])">
            <summary>
                Sets the glyph data (duh!).
            </summary>
            <param name="glyphData"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.Glyph.AddChild(System.Int32)">
            <summary>
                Add the supplied glyph index to list of children.
            </summary>
            <param name="glyphIndex"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.Glyph.Write(Fonet.Pdf.Gdi.Font.FontFileStream)">
            <summary>
                Writes a glyph description to the supplied stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.Glyph.Index">
            <summary>
                Gets or sets the index of this glyph.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.Glyph.Length">
            <summary>
                Gets the length of the glyph data buffer.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.Glyph.Children">
            <summary>
                Gets a ilst of child glyph indices.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.Glyph.IsComposite">
            <summary>
                Gets a value indicating whether or not this glyph represents 
                a composite glyph.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.HeaderTable">
            <summary>
                Class that represents the Font Header table.
            </summary>
            <remarks>
                http://www.microsoft.com/typography/otspec/head.htm
            </remarks>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.HeaderTable.#ctor(Fonet.Pdf.Gdi.Font.DirectoryEntry)">
            <summary>
                Class constructor.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.HeaderTable.Read(Fonet.Pdf.Gdi.Font.FontFileReader)">
            <summary>
                Reads the contents of the "head" table from the current position 
                in the supplied stream.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.HeaderTable.GetDate(System.Int64)">
            <summary>
                Returns a DateTime instance which is the result of adding <i>seconds</i>
                to BaseDate.  If an exception occurs, BaseDate is returned.
            </summary>
            <param name="seconds"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.HeaderTable.Write(Fonet.Pdf.Gdi.Font.FontFileWriter)">
            <summary>
                Writes the contents of the head table to the supplied stream.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.HeaderTable.IsShortFormat">
            <summary>
                Gets a value that indicates whether glyph offsets in the 
                loca table are stored as a ushort or ulong.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.HorizontalHeaderTable">
            <summary>
                Class that represents the Horizontal Header table.
            </summary>
            <remarks>
                http://www.microsoft.com/typography/otspec/hhea.htm
            </remarks>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.HorizontalHeaderTable.versionNo">
            <summary>
                Table version number 0x00010000 for version 1.0. 
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.HorizontalHeaderTable.ascender">
            <summary>
                Typographic ascent. (Distance from baseline of highest ascender).
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.HorizontalHeaderTable.decender">
            <summary>
                Typographic descent. (Distance from baseline of lowest descender).
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.HorizontalHeaderTable.lineGap">
            <summary>
                Typographic line gap.  Negative LineGap values are treated as zero 
                in Windows 3.1, System 6, and System 7. 
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.HorizontalHeaderTable.advanceWidthMax">
            <summary>
                Maximum advance width value in 'hmtx' table. 
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.HorizontalHeaderTable.minLeftSideBearing">
            <summary>
                Minimum left sidebearing value in 'hmtx' table.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.HorizontalHeaderTable.minRightSideBearing">
            <summary>
                Minimum right sidebearing value.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.HorizontalHeaderTable.xMaxExtent">
            <summary>
                Max(lsb + (xMax - xMin)).
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.HorizontalHeaderTable.caretSlopeRise">
            <summary>
                Used to calculate the slope of the cursor (rise/run); 1 for vertical.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.HorizontalHeaderTable.caretSlopeRun">
            <summary>
                0 for vertical.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.HorizontalHeaderTable.caretOffset">
            <summary>
                The amount by which a slanted highlight on a glyph needs to be 
                shifted to produce the best appearance. Set to 0 for non-slanted fonts.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.HorizontalHeaderTable.metricDataFormat">
            <summary>
                0 for current format.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.HorizontalHeaderTable.numberOfHMetrics">
            <summary>
                Number of hMetric entries in 'hmtx' table.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.HorizontalHeaderTable.#ctor(Fonet.Pdf.Gdi.Font.DirectoryEntry)">
            <summary>
                Class constructor.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.HorizontalHeaderTable.Read(Fonet.Pdf.Gdi.Font.FontFileReader)">
            <summary>
                Reads the contents of the "hhea" table from the current position 
                in the supplied stream.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.HorizontalHeaderTable.HMetricCount">
            <summary>
                Gets the number of horiztonal metrics.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.HorizontalMetric">
            <summary>
                Summary description for HorizontalMetric.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.HorizontalMetricsTable">
            <summary>
                Class that represents the Horizontal Metrics ('hmtx') table.
            </summary>
            <remarks>
                http://www.microsoft.com/typography/otspec/hmtx.htm
            </remarks>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.HorizontalMetricsTable.#ctor(Fonet.Pdf.Gdi.Font.DirectoryEntry)">
            <summary>
                Initialises a new instance of the 
                <see cref="T:Fonet.Pdf.Gdi.Font.HorizontalMetricsTable"/> class.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.HorizontalMetricsTable.#ctor(Fonet.Pdf.Gdi.Font.DirectoryEntry,System.Int32)">
            <summary>
                Initialises a new instance of the HorizontalMetricsTable class.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.HorizontalMetricsTable.Read(Fonet.Pdf.Gdi.Font.FontFileReader)">
            <summary>
                Reads the contents of the "hmtx" table from the supplied stream 
                at the current position.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.HorizontalMetricsTable.Count">
            <summary>
                Returns the number of horizontal metrics stored in the 
                hmtx table.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.HorizontalMetricsTable.Item(System.Int32)">
            <summary>
                Gets the <see cref="T:Fonet.Pdf.Gdi.Font.HorizontalMetric"/> located at <i>index</i>.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.IndexToLocationTable">
            <summary>
                Class that represents the Index To Location ('loca') table.
            </summary>
            <remarks>
                http://www.microsoft.com/typography/otspec/loca.htm
            </remarks>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.IndexToLocationTable.#ctor(Fonet.Pdf.Gdi.Font.DirectoryEntry)">
            <summary>
                Initialises a new instance of the 
                <see cref="T:Fonet.Pdf.Gdi.Font.IndexToLocationTable"/> class.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.IndexToLocationTable.#ctor(Fonet.Pdf.Gdi.Font.DirectoryEntry,System.Int32)">
            <summary>
                Initialises a new instance of the IndexToLocationTable class.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.IndexToLocationTable.Read(Fonet.Pdf.Gdi.Font.FontFileReader)">
            <summary>
                Reads the contents of the "loca" table from the supplied stream 
                at the current position.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.IndexToLocationTable.Clear">
            <summary>
                Removes all offsets.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.IndexToLocationTable.AddOffset(System.UInt32)">
            <summary>
                Includes the supplied offset.
            </summary>
            <param name="offset"></param>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.IndexToLocationTable.Count">
            <summary>
                Gets the number of glyph offsets.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.IndexToLocationTable.Item(System.Int32)">
            <summary>
                Gets or sets the glyph offset at index <i>index</i>.
            </summary>
            <param name="index">A glyph index.</param>
            <returns></returns>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.KerningTable">
            <summary>
                Class that represents the Kerning table.
            </summary>
            <remarks>
                http://www.microsoft.com/typography/otspec/kern.htm
            </remarks>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.KerningTable.#ctor(Fonet.Pdf.Gdi.Font.DirectoryEntry)">
            <summary>
                Class constructor.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.KerningTable.Read(Fonet.Pdf.Gdi.Font.FontFileReader)">
            <summary>
                Reads the contents of the "kern" table from the current position 
                in the supplied stream.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.KerningTable.Write(Fonet.Pdf.Gdi.Font.FontFileWriter)">
            <summary>
                No supported.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.KerningTable.HasKerningInfo">
            <summary>
                Gets a boolean value that indicates this font contains format 0
                kerning information.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.KerningTable.KerningPairs">
            <summary>
                Returns a collection of kerning pairs.
            </summary>
            <remarks>
                If <i>HasKerningInfo</i> returns <b>false</b>, this method will 
                always return null.
            </remarks>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.MaximumProfileTable">
            <summary>
                Class that represents the Horizontal Metrics ('maxp') table.
            </summary>
            <remarks>
                http://www.microsoft.com/typography/otspec/maxp.htm
            </remarks>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.MaximumProfileTable.versionNo">
            <summary>
                Table version number
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.MaximumProfileTable.numGlyphs">
            <summary>
                The number of glyphs in the font.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.MaximumProfileTable.maxPoints">
            <summary>
                Maximum points in a non-composite glyph. 
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.MaximumProfileTable.maxContours">
            <summary>
                Maximum contours in a non-composite glyph.  Only set if 
                <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.MaximumProfileTable.maxCompositePoints">
            <summary>
                Maximum points in a composite glyph.  Only set if 
                <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.MaximumProfileTable.maxCompositeContours">
            <summary>
                Maximum contours in a composite glyph.  Only set if 
                <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.MaximumProfileTable.maxZones">
            <summary>
                1 if instructions do not use the twilight zone (Z0), or 
                2 if instructions do use Z0; should be set to 2 in most 
                cases.  Only set if <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.MaximumProfileTable.maxTwilightPoints">
            <summary>
                Maximum points used in Z0.   Only set if 
                <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.MaximumProfileTable.maxStorage">
            <summary>
                Number of Storage Area locations.  Only set if 
                <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.MaximumProfileTable.maxFunctionDefs">
            <summary>
                Number of FDEFs.   Only set if <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.MaximumProfileTable.maxInstructionDefs">
            <summary>
                Number of IDEFs.   Only set if <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.MaximumProfileTable.maxStackElements">
            <summary>
                Maximum stack depth2.  Only set if <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.MaximumProfileTable.maxSizeOfInstructions">
            <summary>
                Maximum byte count for glyph instructions.  Only set 
                if <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.MaximumProfileTable.maxComponentElements">
            <summary>
                Maximum number of components referenced at "top level" 
                for any composite glyph.   Only set if 
                <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.MaximumProfileTable.maxComponentDepth">
            <summary>
                Maximum levels of recursion; 1 for simple components. 
                Only set if <i>versionNo</i> is 1.0.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.MaximumProfileTable.#ctor(Fonet.Pdf.Gdi.Font.DirectoryEntry)">
            <summary>
                Initialises a new instance of the <see cref="T:Fonet.Pdf.Gdi.Font.MaximumProfileTable"/>
                class.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.MaximumProfileTable.Read(Fonet.Pdf.Gdi.Font.FontFileReader)">
            <summary>
                Reads the contents of the "maxp" table from the supplied stream 
                at the current position.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.MaximumProfileTable.GlyphCount">
            <summary>
                Gets the number of glyphs
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.NameTable">
            <summary>
                Class that represents the Naming ('name') table
            </summary>
            <remarks>
                http://www.microsoft.com/typography/otspec/name.htm
            </remarks>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.NameTable.storageOffset">
            <summary>
                Offset to start of string storage (from start of table).
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.NameTable.Read(Fonet.Pdf.Gdi.Font.FontFileReader)">
            <summary>
                Reads the contents of the "name" table from the supplied stream 
                at the current position.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.NameTable.ReadString(Fonet.Pdf.Gdi.Font.FontFileStream,System.Int32,System.Int32)">
            <summary>
                Reads a string from the storage area beginning at <i>offset</i>
                consisting of <i>length</i> bytes.  The returned string will be 
                converted using the Unicode encoding.
            </summary>
            <param name="stream">Big-endian font stream.</param>
            <param name="stringOffset">
                The offset in bytes from the beginning of the string storage area.
             </param>
            <param name="length">The length of the string in bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.NameTable.Write(Fonet.Pdf.Gdi.Font.FontFileWriter)">
            <summary>
                Not supported.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.NameTable.FamilyName">
            <summary>
                Get the font family name.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.NameTable.FullName">
            <summary>
                Gets the font full name composed of the family name and the 
                subfamily name.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.OS2Table">
            <summary>
                Class that represents the OS/2 ('OS/2') table
            </summary>
            <remarks>
                <p>For detailed information on the OS/2 table, visit the following link:
                http://www.microsoft.com/typography/otspec/os2.htm</p>
                <p>For more details on the Panose classification metrics, visit the following URL:
                http://www.panose.com/hardware/pan2.asp</p>
            </remarks>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.OS2Table.Read(Fonet.Pdf.Gdi.Font.FontFileReader)">
            <summary>
                Reads the contents of the "os/2" table from the supplied stream 
                at the current position.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.OS2Table.IsItalic">
            <summary>
                Gets a boolean value that indicates whether this font contains 
                italic characters.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.OS2Table.IsRegular">
            <summary>
                Gets a boolean value that indicates whether characters are 
                in the standard weight/style.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.OS2Table.IsBold">
            <summary>
                Gets a boolean value that indicates whether characters possess
                a weight greater than or equal to 700.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.OS2Table.IsMonospaced">
            <summary>
                Gets a boolean value that indicates whether this font contains 
                characters that all have the same width.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.OS2Table.IsSymbolic">
            <summary>
                Gets a boolean value that indicates whether this font contains 
                special characters such as dingbats, icons, etc.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.OS2Table.IsSerif">
            <summary>
                Gets a boolean value that indicates whether characters  
                do possess serifs
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.OS2Table.IsScript">
            <summary>
                Gets a boolean value that indicates whether characters 
                are designed to simulate hand writing.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.OS2Table.IsSansSerif">
            <summary>
                Gets a boolean value that indicates whether characters  
                do not possess serifs
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.OS2Table.IsEmbeddable">
            <summary>
                Gets a boolean value that indicates whether this font may be 
                legally embedded.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.OS2Table.IsSubsettable">
            <summary>
                Gets a boolean value that indicates whether this font may be 
                subsetted.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.PostTable">
            <summary>
                Class that represents the PostScript ('post') table
            </summary>
            <remarks>
                http://www.microsoft.com/typography/otspec/post.htm
            </remarks>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.PostTable.version">
            <summary>
                0x00010000 for version 1.0 
                0x00020000 for version 2.0 
                0x00025000 for version 2.5 (deprecated) 
                0x00030000 for version 3.0 
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.PostTable.italicAngle">
            <summary>
                Italic angle in counter-clockwise degrees from the vertical. 
                Zero for upright text, negative for text that leans to the 
                right (forward). 
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.PostTable.underlinePosition">
            <summary>
                This is the suggested distance of the top of the underline from 
                the baseline (negative values indicate below baseline). 
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.PostTable.underlineThickness">
            <summary>
                Suggested values for the underline thickness. 
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.PostTable.fixedPitch">
            <summary>
                Set to 0 if the font is proportionally spaced, non-zero if the 
                font is not proportionally spaced (i.e. monospaced). 
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.PostTable.minMemType42">
            <summary>
                Minimum memory usage when an OpenType font is downloaded. 
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.PostTable.maxMemType42">
            <summary>
                Maximum memory usage when an OpenType font is downloaded. 
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.PostTable.minMemType1">
            <summary>
                Minimum memory usage when an OpenType font is downloaded 
                as a Type 1 font. 
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.Font.PostTable.maxMemType1">
            <summary>
                Maximum memory usage when an OpenType font is downloaded 
                as a Type 1 font. 
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.PostTable.#ctor(Fonet.Pdf.Gdi.Font.DirectoryEntry)">
            <summary>
                Class constructor.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.PostTable.Read(Fonet.Pdf.Gdi.Font.FontFileReader)">
            <summary>
                Reads the contents of the "post" table from the supplied stream 
                at the current position.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.PostTable.IsFixedPitch">
            <summary>
                Gets a boolean value that indicates whether this font is 
                proportionally spaced (fixed pitch) or not.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Font.TrueTypeHeader">
            <summary>
                Class that represents the Offset and Directory tables.
            </summary>
            <remarks>
                http://www.microsoft.com/typography/otspec/otff.htm
            </remarks>
        </member>
        <member name="M:Fonet.Pdf.Gdi.Font.TrueTypeHeader.Contains(System.String)">
            <summary>
                Gets a value indicating whether or not this font contains the 
                supplied table.
            </summary>
            <param name="tableName">A table name.</param>
            <returns></returns>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.TrueTypeHeader.Item(System.String)">
            <summary>
                Gets a DirectoryEntry object for the supplied table.
            </summary>
            <param name="tableName">A 4-character code identifying a table.</param>
            <returns>
                A DirectoryEntry object or null if the table cannot be located.
            </returns>
            <exception cref="T:System.ArgumentException">
                If <b>tableName</b> does not represent a table in this font.
            </exception>
        </member>
        <member name="P:Fonet.Pdf.Gdi.Font.TrueTypeHeader.Count">
            <summary>
                Gets the number tables.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.GdiDeviceContent">
            <summary>
                A very lightweight wrapper around a Win32 device context
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.GdiDeviceContent.hDC">
            <summary>
                Pointer to device context created by ::CreateDC()
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiDeviceContent.#ctor">
            <summary>
                Creates a new device context that matches the desktop display surface
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiDeviceContent.Finalize">
            <summary>
                Invokes <see cref="M:Fonet.Pdf.Gdi.GdiDeviceContent.Dispose(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiDeviceContent.Dispose(System.Boolean)">
            <summary>
                Delete the device context freeing the associated memory.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiDeviceContent.SelectFont(Fonet.Pdf.Gdi.GdiFont)">
            <summary>
                Selects a font into a device context (DC). The new object 
                replaces the previous object of the same type. 
            </summary>
            <param name="font">Handle to object.</param>
            <returns>A handle to the object being replaced.</returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiDeviceContent.GetCurrentObject(Fonet.Pdf.Gdi.GdiDcObject)">
            <summary>
                Gets a handle to an object of the specified type that has been 
                selected into this device context. 
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiDeviceContent.Handle">
            <summary>
                Returns a handle to the underlying device context
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.GdiFont">
            <summary>
                A thin wrapper around a handle to a font
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiFont.#ctor(System.IntPtr,System.String,System.Int32)">
            <summary>
                Class constructor
            </summary>
            <param name="hFont">A handle to an existing font.</param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiFont.Finalize">
            <summary>
                Class destructor
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiFont.CreateFont(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Creates a font based on the supplied typeface name and size.
            </summary>
            <param name="faceName">The typeface name of a font.</param>
            <param name="height">
                The height, in logical units, of the font's character 
                cell or character.
            </param>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiFont.CreateDesignFont(System.String,System.Boolean,System.Boolean,Fonet.Pdf.Gdi.GdiDeviceContent)">
            <summary>
                Creates a font whose height is equal to the negative value 
                of the EM Square
            </summary>
            <param name="faceName">The typeface name of a font.</param>
            <returns></returns>
        </member>
        <member name="T:Fonet.Pdf.Gdi.GdiFontCreator">
            <summary>
                Retrieves all pertinent TrueType tables by invoking GetFontData.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.GdiFontEnumerator">
            <summary>
                Summary description for GdiFontEnumerator.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiFontEnumerator.#ctor(Fonet.Pdf.Gdi.GdiDeviceContent)">
            <summary>
                Class constructor.
            </summary>
            <param name="dc">A non-null reference to a wrapper around a GDI device context.</param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiFontEnumerator.GetStyles(System.String)">
            <summary>
                Returns a list of font styles associated with <i>familyName</i>.
            </summary>
            <param name="familyName"></param>
            <returns></returns>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiFontEnumerator.FamilyNames">
            <summary>
                Returns a list of font family names sorted in ascending order.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.GdiFontMetrics">
            <summary>
                Class that obtains OutlineTextMetrics for a TrueType font
            </summary>
            <example>
            </example>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiFontMetrics.GetFontData">
            <summary>
                Gets font metric data for a TrueType font or TrueType collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiFontMetrics.GetWidths">
            <summary>
                Retrieves the widths, in PDF units, of consecutive glyphs.
            </summary>
            <returns>
                An array of integers whose size is equal to the number of glyphs 
                specified in the 'maxp' table.
                The width at location 0 is the width of glyph with index 0, 
                The width at location 1 is the width of glyph with index 1, 
                etc...
            </returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiFontMetrics.GetAnsiWidths">
            <summary>
                Returns the width, in PDF units, of consecutive glyphs for the 
                WinAnsiEncoding only.
            </summary>
            <returns>An array consisting of 256 elements.</returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiFontMetrics.MapCharacter(System.Char)">
            <summary>
                Translates the supplied character to a glyph index using the 
                currently selected font.
            </summary>
            <param name="c">A unicode character.</param>
            <returns></returns>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiFontMetrics.FaceName">
            <summary>
                Retrieves the typeface name of the font that is selected into the 
                device context supplied to the GdiFontMetrics constructor. 
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiFontMetrics.EmSquare">
            <summary>
                Specifies the number of logical units defining the x- or y-dimension 
                of the em square for this font.  The common value for EmSquare is 2048.
            </summary>
            <remarks>
                The number of units in the x- and y-directions are always the same 
                for an em square.) 
            </remarks>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiFontMetrics.ItalicAngle">
            <summary>
                Gets the main italic angle of the font expressed in tenths of 
                a degree counterclockwise from the vertical.
            </summary>
            <remarks>
                Regular (roman) fonts have a value of zero. Italic fonts typically 
                have a negative italic angle (that is, they lean to the right). 
            </remarks>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiFontMetrics.Ascent">
            <summary>
                Specifies the maximum distance characters in this font extend 
                above the base line. This is the typographic ascent for the font. 
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiFontMetrics.Descent">
            <summary>
                Specifies the maximum distance characters in this font extend 
                below the base line. This is the typographic descent for the font. 
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiFontMetrics.CapHeight">
            <summary>
                Gets the distance between the baseline and the approximate 
                height of uppercase letters.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiFontMetrics.XHeight">
            <summary>
                Gets the distance between the baseline and the approximate 
                height of non-ascending lowercase letters.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiFontMetrics.StemV">
            <summary>
                TODO: The thickness, measured horizontally, of the dominant vertical 
                stems of the glyphs in the font.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiFontMetrics.FirstChar">
            <summary>
                Gets the value of the first character defined in the font
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiFontMetrics.LastChar">
            <summary>
                Gets the value of the last character defined in the font
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiFontMetrics.AverageWidth">
            <summary>
                Gets the average width of glyphs in a font.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiFontMetrics.MaxWidth">
            <summary>
                Gets the maximum width of glyphs in a font.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiFontMetrics.IsEmbeddable">
            <summary>
                Gets a value indicating whether the font can be legally embedded 
                within a document.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiFontMetrics.IsSubsettable">
            <summary>
                Gets a value indicating whether the font can be legally subsetted.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiFontMetrics.BoundingBox">
            <summary>
                Gets the font's bounding box.
            </summary>
            <remarks>
                This is the smallest rectangle enclosing the shape that would 
                result if all the glyphs of the font were placed with their 
                origins cooincident and then filled.
            </remarks>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiFontMetrics.Flags">
            <summary>
                Gets a collection of flags defining various characteristics of 
                a font (e.g. serif or sans-serif, symbolic, etc).
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiFontMetrics.KerningPairs">
            <summary>
                Gets a collection of kerning pairs.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiFontMetrics.AnsiKerningPairs">
            <summary>
                Gets a collection of kerning pairs for characters defined in 
                the WinAnsiEncoding scheme only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiKerningPairs.#ctor(Fonet.Pdf.Gdi.Font.KerningPairs,Fonet.Pdf.Gdi.PdfUnitConverter)">
            <summary>
                Class constructor.
            </summary>
            <param name="pairs">Kerning pairs read from the TrueType font file.</param>
            <param name="converter">Class to convert from TTF to PDF units.</param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiKerningPairs.HasPair(System.UInt16,System.UInt16)">
            <summary>
                Returns true if a kerning value exists for the supplied 
                character index pair.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiKerningPairs.Count">
            <summary>
                Gets the number of kerning pairs.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiKerningPairs.Item(System.UInt16,System.UInt16)">
            <summary>
                Gets the kerning amount for the supplied index pair or 0 if 
                a kerning pair does not exist.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.GdiPrivateFontCollection">
            <summary>
                Installs a collection of private fonts on the system and uninstalls 
                them when disposed.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.GdiPrivateFontCollection.FR_PRIVATE">
            <summary>
                Specifies that only the process that called the AddFontResourceEx 
                function can use this font.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.GdiPrivateFontCollection.FR_NOT_ENUM">
            <summary>
                Specifies that no process, including the process that called the 
                AddFontResourceEx function, can enumerate this font.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.GdiPrivateFontCollection.fonts">
            <summary>
                Collection of absolute filenames.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiPrivateFontCollection.AddFontFile(System.String)">
            <summary>
                Adds <i>filename</i> to this private font collection.
            </summary>
            <param name="filename">
                Absolute path to a TrueType font or collection.
            </param>
            <seealso cref="M:Fonet.Pdf.Gdi.GdiPrivateFontCollection.AddFontFile(System.IO.FileInfo)"/>
            <exception cref="T:System.ArgumentNullException">If <i>filename</i> is null.</exception>
            <exception cref="T:System.ArgumentException">If <i>filename</i> is the empty string.</exception>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiPrivateFontCollection.AddFontFile(System.IO.FileInfo)">
            <summary>
                Adds <i>fontFile</i> to this private font collection.
            </summary>
            <param name="fontFile">
                Absolute path to a TrueType font or collection.
            </param>
            <exception cref="T:System.IO.FileNotFoundException">
                If <i>fontFile</i> does not exist.
            </exception>
            <exception cref="T:System.ArgumentException">
                If <i>fontFile</i> has already been added.
            </exception>
            <exception cref="T:System.ArgumentException">
                If <i>fontFile</i> cannot be added to the system font collection.
            </exception>
        </member>
        <member name="T:Fonet.Pdf.Gdi.GdiUnicodeRanges">
            <summary>
                Custom collection that maintains a list of Unicode ranges 
                a font supports and the glyph indices of each character.
                The list of ranges is obtained by invoking GetFontUnicodeRanges,
                however the associated glyph indices are lazily instantiated as 
                required to save memory.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.GdiUnicodeRanges.unicodeRanges">
            <summary>
                List of unicode ranges in ascending numerical order.  The order 
                is important since a binary search is used to locate and 
                uicode range from a charcater.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiUnicodeRanges.#ctor(Fonet.Pdf.Gdi.GdiDeviceContent)">
            <summary>
                Class constuctor.
            </summary>
            <param name="dc"></param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiUnicodeRanges.LoadRanges(Fonet.Pdf.Gdi.GdiDeviceContent)">
            <summary>
                Loads all the unicode ranges.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiUnicodeRanges.GetRange(System.Char)">
            <summary>
                Locates the <see cref="T:Fonet.Pdf.Gdi.UnicodeRange"/> for the supplied character.
            </summary>
            <param name="c"></param>
            <returns>
                The <see cref="T:Fonet.Pdf.Gdi.UnicodeRange"/> object housing <i>c</i> or null 
                if a range does not exist for <i>c</i>.
            </returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.GdiUnicodeRanges.MapCharacter(System.Char)">
            <summary>
                Translates the supplied character to a glyph index.
            </summary>
            <param name="c">Any unicode character.</param>
            <returns>
                A glyph index for <i>c</i> or 0 the supplied character does 
                not exist in the font selected into the device context.
            </returns>
        </member>
        <member name="P:Fonet.Pdf.Gdi.GdiUnicodeRanges.Count">
            <summary>
                Gets the number of unicode ranges.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.PdfUnitConverter">
            <summary>
                Converts from logical TTF units to PDF units.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.PdfUnitConverter.#ctor(System.Int32)">
            <summary>
                Class constructor.
            </summary>
            <param name="emSquare">
                Specifies the number of logical units defining the x- or 
                y-dimension of the em square of a font.
            </param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.PdfUnitConverter.ToPdfUnits(System.Int32)">
            <summary>
                Convert the supplied integer from TrueType units to PDF units 
                based on the EmSquare
            </summary>
            <param name="value"></param>
            <returns>
                If the value of <i>emSquare</i> is zero, this method will 
                always return <i>value</i>.
            </returns>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Abc">
            <summary>
                The ABC structure contains the width of a character in a TrueType font. 
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.LogFont">
            <summary>
                TODO: Figure out why CreateFontIndirect fails when this class 
                is converted to a struct.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.OutlineTextMetric">
            <summary>
                The OUTLINETEXTMETRIC structure contains metrics describing 
                a TrueType font. 
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Panose">
            <summary>
                The PANOSE structure describes the PANOSE font-classification values 
                for a TrueType font. These characteristics are then used to associate 
                the font with other fonts of similar appearance but different names. 
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Point">
            <summary>
                The Point structure defines the x- and y- coordinates of a point. 
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.Rect">
            <summary>
                The Rect structure defines the coordinates of the upper-left 
                and lower-right corners of a rectangle
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.TextMetric">
            <summary>
                The TEXTMETRIC structure contains basic information about a physical 
                font.  All sizes are specified in logical units; that is, they depend 
                on the current mapping mode of the display context. 
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.UnicodeRange">
            <summary>
                Class that represents a unicode character range as returned 
                by the GetFontUnicodeRanges function.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.UnicodeRange.indices">
            <summary>
                Array of glyph indices for each character represented by 
                this range begining at <see cref="P:Fonet.Pdf.Gdi.UnicodeRange.Start"/>.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Gdi.UnicodeRange.#ctor(Fonet.Pdf.Gdi.GdiDeviceContent,System.UInt16,System.UInt16)">
            <summary>
                Class constructor.
            </summary>
            <param name="start">Value representing start of unicode range.</param>
            <param name="end">Value representing end of unicode range.</param>
        </member>
        <member name="M:Fonet.Pdf.Gdi.UnicodeRange.MapCharacter(System.Char)">
            <summary>
                Returns the glyph index of <i>c</i>.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.Gdi.UnicodeRange.LoadGlyphIndices">
            <summary>
                Populates the <i>indices</i> array with the glyph index of each 
                character represented by this rnage starting at <see cref="P:Fonet.Pdf.Gdi.UnicodeRange.Start"/>.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.UnicodeRange.Start">
            <summary>
                Gets a value representing the start of the unicode range.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Gdi.UnicodeRange.End">
            <summary>
                Gets a value representing the end of the unicode range.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.UnicodeRangeComparer">
            <summary>
            Summary description for UnicodeRangeComparer.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Gdi.WinAnsiMapping">
            <summary>
                Maps a Unicode character to a WinAnsi codepoint value.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Gdi.WinAnsiMapping.winAnsiEncoding">
            <summary>
                First column is codepoint value.  Second column is unicode value.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.PdfCatalog">
            <summary>
                The root of a document's object hierarchy is the catalog dictionary.
            </summary>
            <remarks>
                The document catalog is described in section 3.6.1 of the PDF specification.
            </remarks>
        </member>
        <member name="T:Fonet.Pdf.PdfCIDFont">
            <summary>
                A dictionary that contains information about a CIDFont program.
            </summary>
            <remarks>
                A Type 0 CIDFont contains glyph descriptions based on Adobe's Type 
                1 font format, whereas those in a Type 2 CIDFont are based on the 
                TrueType font format.
            </remarks>
        </member>
        <member name="T:Fonet.Pdf.PdfCIDSystemInfo">
            <summary>
                A dictionary containing entries that define the character collection
                of the CIDFont.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.PdfCMap">
            <summary>
                Class that defines a mapping between character codes (CIDs) 
                to a character selector (Identity-H encoding)
            </summary>
        </member>
        <member name="M:Fonet.Pdf.PdfContentStream.Write(System.String)">
            <summary>
                TODO: This method is temporary.  I'm assuming that all string should 
                be represented as a PdfString object?
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Fonet.Pdf.PdfCMap.AddBfRanges(System.Collections.IDictionary)">
            <summary>
                Adds the supplied glyph -> unicode pairs.
            </summary>
            <remarks>
                Both the key and value must be a ushort.
            </remarks>
            <param name="map"></param>
        </member>
        <member name="M:Fonet.Pdf.PdfCMap.AddBfRange(System.UInt16,System.UInt16)">
            <summary>
                Adds the supplied glyph index to unicode value mapping.
            </summary>
            <param name="glyphIndex"></param>
            <param name="unicodeValue"></param>
        </member>
        <member name="M:Fonet.Pdf.PdfCMap.Write(Fonet.Pdf.PdfWriter)">
            <summary>
                Overriden to create CMap content stream.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Fonet.Pdf.PdfCMap.WriteBfChars(Fonet.Pdf.BfEntryList)">
            <summary>
                Writes the bfchar entries to the content stream in groups of 100.
            </summary>
            <param name="entries"></param>
        </member>
        <member name="M:Fonet.Pdf.PdfCMap.WriteBfRanges(Fonet.Pdf.BfEntryList)">
            <summary>
                Writes the bfrange entries to the content stream in groups of 100.
            </summary>
            <param name="entries"></param>
        </member>
        <member name="T:Fonet.Pdf.PdfDate">
            <summary>
                PDF defines a standard date format. The PDF date format closely 
                follows the format defined by the international standard ASN.1.
            </summary>
            <remarks>
                The format of the PDF date is defined in section 3.8.2 of the 
                PDF specification.
            </remarks>
        </member>
        <member name="T:Fonet.Pdf.PdfDocument">
            <summary>
                A class that enables a well structured PDF document to be generated.
            </summary>
            <remarks>
                Responsible for allocating object identifiers.
            </remarks>
        </member>
        <member name="T:Fonet.Pdf.PdfFileTrailer">
            <summary>
                Class representing a file trailer.
            </summary>
            <remarks>
                File trailers are described in section 3.4.4 of the PDF specification.
            </remarks>
        </member>
        <member name="P:Fonet.Pdf.PdfFont.Name">
            <summary>
                Returns the internal name used for this font.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.PdfFontCreator">
            <summary>
                Creates all the necessary PDF objects required to represent 
                a font object in a PDF document.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.PdfFontCreator.creator">
            <summary>
                Generates object id's.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.PdfFontCreator.#ctor(Fonet.Pdf.PdfCreator)">
            <summary>
                
            </summary>
            <param name="creator"></param>
        </member>
        <member name="M:Fonet.Pdf.PdfFontCreator.MakeFont(System.String,Fonet.Render.Pdf.Fonts.Font)">
            <summary>
                Returns a subclass of the PdfFont class that may be one of
                PdfType0Font, PdfType1Font or PdfTrueTypeFont.  The type of 
                subclass returned is determined by the type of the <i>font</i>
                parameter.
            </summary>
            <param name="pdfFontID">The PDF font identifier, e.g. F15</param>
            <param name="font">Underlying font object.</param>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.PdfFontCreator.CreateCIDFont(System.String,Fonet.Render.Pdf.Fonts.Font,Fonet.Render.Pdf.Fonts.CIDFont)">
            <summary>
                Creates a character indexed font from <i>cidFont</i>
            </summary>
            <remarks>
                The <i>font</i> and <i>cidFont</i> will be different object 
                references since the <i>font</i> parameter will most likely 
                be a <see cref="T:Fonet.Render.Pdf.Fonts.ProxyFont"/>.
            </remarks>
            <param name="pdfFontID">The Pdf font identifier, e.g. F15</param>
            <param name="font">Required to access the font descriptor.</param>
            <param name="cidFont">The underlying CID font.</param>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.PdfFontCreator.NextObjectId">
            <summary>
                Returns the next available Pdf object identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.PdfFontCreator.CreateBase14Font(System.String,Fonet.Render.Pdf.Fonts.Base14Font)">
            <summary>
                Creates an instance of the <see cref="T:Fonet.Pdf.PdfType1Font"/> class
            </summary>
            <param name="pdfFontID">The Pdf font identifier, e.g. F15</param>
            <param name="base14"></param>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.PdfFontCreator.CreateTrueTypeFont(System.String,Fonet.Render.Pdf.Fonts.Font,Fonet.Render.Pdf.Fonts.TrueTypeFont)">
            <summary>
                Creates an instance of the <see cref="T:Fonet.Pdf.PdfTrueTypeFont"/> class
                that defaults the font encoding to WinAnsiEncoding.
            </summary>
            <param name="pdfFontID"></param>
            <param name="font"></param>
            <param name="ttf"></param>
            <returns></returns>
        </member>
        <member name="M:Fonet.Pdf.PdfFontCreator.GetFontMetrics(Fonet.Render.Pdf.Fonts.Font)">
            <remarks>
                A ProxyFont must first be resolved before getting the 
                IFontMetircs implementation of the underlying font.
            </remarks>
            <param name="font"></param>
        </member>
        <member name="T:Fonet.Pdf.PdfFontTypeEnum">
            <summary>
                An enumeration listing all the fonts types available in Pdf.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.PdfFontSubTypeEnum">
            <summary>
                An enumeration listing all the font subtypes
            </summary>
        </member>
        <member name="T:Fonet.Pdf.PdfICCStream">
            <summary>
                An International Color Code stream
            </summary>
        </member>
        <member name="T:Fonet.Pdf.PdfIdentityHEncoding">
            <summary>
                Represents a Identity-H character encoding
            </summary>
            <remarks>
                Maps 2-byte character codes ranging from 0 to 65,535 to 
                the same 2-byte CID value, interpreted high-order byte first
            </remarks>
        </member>
        <member name="M:Fonet.Pdf.PdfIdentityHEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
                Do not call this method directly
            </summary>
        </member>
        <member name="M:Fonet.Pdf.PdfIdentityHEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
                Do not call this method directly
            </summary>
        </member>
        <member name="T:Fonet.Pdf.PdfInfo">
            <summary>
                Class representing a document information dictionary.
            </summary>
            <remarks>
                Document information dictionaries are described in section 9.2.1 of the
                PDF specification.
            </remarks>
        </member>
        <member name="T:Fonet.Pdf.PdfName.Names">
            <summary>
                Well-known PDF name objects.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.PdfOutline">
            <summary>
                This represents a single Outline object in a PDF, including the root Outlines
                object. Outlines provide the bookmark bar, usually rendered to the right of
                a PDF document in user agents such as Acrobat Reader
            </summary>
        </member>
        <member name="F:Fonet.Pdf.PdfOutline.subentries">
            <summary>
                List of sub-entries (outline objects)
            </summary>
        </member>
        <member name="F:Fonet.Pdf.PdfOutline.parent">
            <summary>
                Parent outline object. Root Outlines parent is null
            </summary>
        </member>
        <member name="F:Fonet.Pdf.PdfOutline.title">
            <summary>
                Title to display for the bookmark entry
            </summary>
        </member>
        <member name="M:Fonet.Pdf.PdfOutline.#ctor(Fonet.Pdf.PdfObjectId,System.String,Fonet.Pdf.PdfObjectReference)">
            <summary>
                Class constructor.
            </summary>
            <param name="objectId">The object id number</param>
            <param name="title">The title of the outline entry (can only be null for root Outlines obj)</param>
            <param name="action">The page which this outline refers to.</param>
        </member>
        <member name="M:Fonet.Pdf.PdfOutline.AddOutline(Fonet.Pdf.PdfOutline)">
            <summary>
                Add a sub element to this outline
            </summary>
            <param name="outline"></param>
        </member>
        <member name="T:Fonet.Pdf.PdfPageTree">
            <summary>
                The pages of a document are accessed through a structure known
                as the page tree.
            </summary>
            <remarks>
                The page tree is described in section 3.6.2 of the PDF specification.
            </remarks>
        </member>
        <member name="M:Fonet.Pdf.PdfString.ToPdfLiteral(System.Byte[],System.Byte[])">
            <summary>
                Returns this PdfString expressed using the 'literal' convention.
            </summary>
            <remarks>
                A literal string is written as an arbitrary number of characters 
                enclosed in parentheses.  Any characters may appear in a string 
                except unbalanced parentheses and the backslash, which must be 
                treated specially. Balanced pairs of parentheses within a string 
                require no special treatment.
            </remarks>
        </member>
        <member name="F:Fonet.Pdf.PdfString.HexDigits">
            <summary>
                Used by ToPdfHexadecimal.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.PdfString.ToPdfHexadecimal(System.Byte[],System.Byte[])">
            <summary>
                Returns the PdfString expressed using the 'hexadecimal' convention.
            </summary>
            <remarks>
                Strings may also be written in hexadecimal form; this is useful for 
                including arbitrary binary data in a PDF file. A hexadecimal string 
                is written as a sequence of hexadecimal digits (0? and either A 
                or a) enclosed within angle brackets (&lt; and &gt;).
            </remarks>
        </member>
        <member name="P:Fonet.Pdf.PdfString.Format">
            <summary>
                The convention used when outputing the string to the PDF document.
            </summary>
            <remarks>
               Defaults to <see cref="F:Fonet.Pdf.PdfStringFormat.Literal"/> format.
            </remarks>
        </member>
        <member name="P:Fonet.Pdf.PdfString.NeverEncrypt">
            <summary>
                Determines if the string should bypass encryption, even when 
                available.
            </summary>
            <remarks>
                Some PDF strings need to appear unencrypted in a secure PDF
                document.  Most noteably those in the encryption dictionary 
                itself.  This property allows those strings to be flagged.
            </remarks>
        </member>
        <member name="T:Fonet.Pdf.PdfStringFormat">
            <summary>
                The PDF specification describes two conventions that can be
                used to embed a string in a PDF document.  This enumeration,
                along with the <see cref="P:Fonet.Pdf.PdfString.Format"/> property 
                can be used to select how a string will be formatted in the
                PDF file.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.PdfTrueTypeFont.#ctor(Fonet.Pdf.PdfObjectId,System.String,System.String)">
            <param name="objectId">
                A unique object number.
            </param>
            <param name="fontName">
                The name by which the font is reference in the Font subdictionary 
            </param>
            <param name="baseFont">
                The PostScript name of the font.
            </param>
        </member>
        <member name="P:Fonet.Pdf.PdfTrueTypeFont.Encoding">
            <summary>
                Sets a value representing the character encoding.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.PdfTrueTypeFont.Descriptor">
            <summary>
                Sets the font descriptor.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.PdfTrueTypeFont.FirstChar">
            <summary>
                Sets the first character code defined in the font's widths array
            </summary>
            <value>
                The default value is 0.
            </value>
        </member>
        <member name="P:Fonet.Pdf.PdfTrueTypeFont.LastChar">
            <summary>
                Sets the last character code defined in the font's widths array
            </summary>
            <value>
                The default value is 255.
            </value>
        </member>
        <member name="P:Fonet.Pdf.PdfTrueTypeFont.Widths">
            <summary>
                Sets the array of character widths.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.PdfType0Font">
            <summary>
                A Type 0 font is a composite font whose glyphs are obtained from a
                font like object called a CIDFont (a descendant font).
            </summary>
            <remarks>
                All versions of the PDF specification up to and including version 1.4
                only support a single descendant font.
            </remarks>
        </member>
        <member name="P:Fonet.Pdf.PdfType0Font.ToUnicode">
            <summary>
                Sets the stream containing a CMap that maps character codes to 
                unicode values.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.PdfType0Font.Descendant">
            <summary>
                Sets the descendant font.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.PdfType0Font.Encoding">
            <summary>
                Sets a value representing the character encoding.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.PdfType1Font.Encoding">
            <summary>
                Sets a value representing the character encoding.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.PdfWArray">
            <summary>
                Array class used to represent the /W entry in the CIDFont dictionary.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Security.Arc4">
            <summary>
            ARC4 is a fast, simple stream encryption algorithm that is
            compatible with RSA Security's RC4 algorithm.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Security.Arc4.Initialise(System.Byte[])">
            <summary>
                Initialises internal state from the passed key.
            </summary>
            <remarks>
                Can be called again with a new key to reuse an Arc4 instance.
            </remarks>
            <param name="key">The encryption key.</param>
        </member>
        <member name="M:Fonet.Pdf.Security.Arc4.Encrypt(System.Byte[],System.Byte[])">
            <summary>
                Encrypts or decrypts the passed byte array.
            </summary>
            <param name="dataIn">
                The data to be encrypted or decrypted.
            </param>
            <param name="dataOut">
                The location that the encrypted or decrypted data is to be placed.
                The passed array should be at least the same size as dataIn.
                It is permissible for the same array to be passed for both dataIn
                and dataOut.
            </param>
        </member>
        <member name="M:Fonet.Pdf.Security.Arc4.Arc4Byte">
            <summary>
                Generates a pseudorandom byte used to encrypt or decrypt.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.Security.SecurityManager">
            <summary>
            Implements Adobe's standard security handler.  A security handler is 
            a software module that implements various aspects of the encryption 
            process.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Security.SecurityManager.#ctor(Fonet.Pdf.Security.SecurityOptions,Fonet.Pdf.FileIdentifier)">
            <summary>
                Constructs a new standard security manager.
            </summary>
            <param name="options">
                The user supplied PDF options that provides access to the passwords and 
                the access permissions.
            </param>
            <param name="fileId">
                The PDF document's file identifier (see section 8.3 of PDF specification).
            </param>
        </member>
        <member name="M:Fonet.Pdf.Security.SecurityManager.CreateMasterKey(Fonet.Pdf.Security.SecurityOptions,Fonet.Pdf.FileIdentifier)">
            <summary>
                Computes the master key that is used to encrypt string and stream data 
                in the PDF document.
            </summary>
            <param name="options">
                The user supplied PDF options that provides access to the passwords and
                the access permissions.
            </param>
            <param name="fileId">
                The PDF document's file identifier (see section 8.3 of PDF specification).
            </param>
        </member>
        <member name="M:Fonet.Pdf.Security.SecurityManager.CreateOwnerEntry(Fonet.Pdf.Security.SecurityOptions)">
            <summary>
                Computes the O(owner) value in the encryption dictionary.
            </summary>
            <remarks>
                Corresponds to algorithm 3.3 on page 69 of the PDF specficiation.
            </remarks>
            <param name="options">
                The user supplied PDF options that provides access to the passwords.
            </param>
        </member>
        <member name="M:Fonet.Pdf.Security.SecurityManager.CreateUserEntry(Fonet.Pdf.Security.SecurityOptions)">
            <summary>
                Computes the U(user) value in the encryption dictionary.
            </summary>
            <remarks>
                Corresponds to algorithm 3.4 on page 70 of the PDF specficiation.
            </remarks>
            <param name="options">
                The user supplied PDF options that provides access to the passwords.
            </param>
        </member>
        <member name="M:Fonet.Pdf.Security.SecurityManager.Encrypt(System.Byte[],Fonet.Pdf.PdfObjectId)">
            <summary>
                Encrypts the passed byte array using the ARC4 cipher.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Security.SecurityManager.ComputeEncryptionKey31(System.Byte[],Fonet.Pdf.PdfObjectId)">
            <summary>
                Computes an encryption key that is used to encrypt string and stream data 
                in the PDF document.
            </summary>
            <remarks>
                Corresponds to algorithm 3.1 in section 3.5 of the PDF specficiation.
            </remarks>
        </member>
        <member name="M:Fonet.Pdf.Security.SecurityManager.ComputeEncryptionKey32(System.Byte[],System.Byte[],System.Int32,System.Byte[])">
            <summary>
                Computes an encryption key that is used to encrypt string and stream data 
                in the PDF document.
            </summary>
            <remarks>
                Corresponds to algorithm 3.2 in section 3.5 of the PDF specficiation.
            </remarks>
        </member>
        <member name="M:Fonet.Pdf.Security.SecurityManager.PadPassword(System.String)">
            <summary>
                Pads or truncates a password string to exactly 32-bytes.
            </summary>
            <remarks>
                Corresponds to step 1 of algorithm 3.2 on page 69 of the PDF 1.3 specficiation.
            </remarks>
            <param name="password">The password to pad or truncate.</param>
            <returns>
                A byte array of length 32 bytes containing the padded or truncated password.
            </returns>
        </member>
        <member name="M:Fonet.Pdf.Security.SecurityManager.CheckUserPassword(System.String,System.Byte[],System.Byte[],System.Int32,System.Byte[])">
            <summary>
                Determines if the passed password matches the user password
                used to initialise this security manager.
            </summary>
            <remarks>
                Used for testing purposes only.  Corresponds to algorithm 3.5 in the
                PDF 1.3 specification.
            </remarks>
            <returns>True if the password is correct.</returns>
        </member>
        <member name="M:Fonet.Pdf.Security.SecurityManager.CheckUserPassword(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Byte[])">
            <summary>
                Performs the actual checking of the user password.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Security.SecurityManager.CheckOwnerPassword(System.String,System.Byte[],System.Byte[],System.Int32,System.Byte[])">
            <summary>
                Checks the owner password.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.Security.SecurityManager.CompareArray(System.Byte[],System.Byte[])">
            <summary>
                Compares two byte arrays and returns true if they are equal.
            </summary>
        </member>
        <member name="P:Fonet.Pdf.Security.SecurityManager.UserEntry">
            <summary>
                Access to the raw user entry byte array.
            </summary>
            <remarks>
                Required for testing purposes;
            </remarks>
        </member>
        <member name="P:Fonet.Pdf.Security.SecurityManager.OwnerEntry">
            <summary>
                Access to the raw owner entry byte array.
            </summary>
            <remarks>
                Required for testing purposes;
            </remarks>
        </member>
        <member name="F:Fonet.Pdf.Security.SecurityOptions.ownerPassword">
            <summary>
                Password that disables all security permissions
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Security.SecurityOptions.userPassword">
            <summary>
                The user password 
            </summary>
        </member>
        <member name="F:Fonet.Pdf.Security.SecurityOptions.permissions">
            <summary>
                Collection of flags describing permissions granted to user who opens 
                a file with the user password.
            </summary>
            <remarks>
                The given initial value zero's out first two bits.
                The PDF specification dictates that these entries must be 0.
            </remarks>
        </member>
        <member name="M:Fonet.Pdf.Security.SecurityOptions.EnablePrinting(System.Boolean)">
            <summary>
                Enables or disables printing.
            </summary>
            <param name="enable">If true enables printing otherwise false</param>
        </member>
        <member name="M:Fonet.Pdf.Security.SecurityOptions.EnableChanging(System.Boolean)">
            <summary>
                Enable or disable changing the document other than by adding or 
                changing text notes and AcroForm fields.
            </summary>
            <param name="enable"></param>
        </member>
        <member name="M:Fonet.Pdf.Security.SecurityOptions.EnableCopying(System.Boolean)">
            <summary>
                Enable or disable copying of text and graphics from the document.
            </summary>
            <param name="enable"></param>
        </member>
        <member name="M:Fonet.Pdf.Security.SecurityOptions.EnableAdding(System.Boolean)">
            <summary>
                Enable or disable adding and changing text notes and AcroForm fields.
            </summary>
            <param name="enable"></param>
        </member>
        <member name="P:Fonet.Pdf.Security.SecurityOptions.OwnerPassword">
            <summary>
                Returns the owner password as a string.
            </summary>
            <value>
                The default value is null
            </value>
        </member>
        <member name="P:Fonet.Pdf.Security.SecurityOptions.UserPassword">
            <summary>
                Returns the user password as a string.
            </summary>
            <value>
                The default value is null
            </value>
        </member>
        <member name="P:Fonet.Pdf.Security.SecurityOptions.Permissions">
            <summary>
                The document access privileges encoded in a 32-bit unsigned integer
            </summary>
            <value>
                The default access priviliges are:
                <ul>
                <li>Printing disallowed</li>
                <li>Modifications disallowed</li>
                <li>Copy and Paste disallowed</li>
                <li>Addition or modification of annotation/form fields disallowed</li>
                </ul>
                To override any of these priviliges see the <see cref="M:Fonet.Pdf.Security.SecurityOptions.EnablePrinting(System.Boolean)"/>,
                <see cref="M:Fonet.Pdf.Security.SecurityOptions.EnableChanging(System.Boolean)"/>, <see cref="M:Fonet.Pdf.Security.SecurityOptions.EnableCopying(System.Boolean)"/>, 
                <see cref="M:Fonet.Pdf.Security.SecurityOptions.EnableAdding(System.Boolean)"/> methods
            </value>
        </member>
        <member name="T:Fonet.Pdf.XRefSection">
            <summary>
                A single section in a PDF file's cross-reference table.
            </summary>
            <remarks>
                The cross-reference table is described in section 3.4.3 of
                the PDF specification.
            </remarks>
        </member>
        <member name="F:Fonet.Pdf.XRefSection.subsection">
            <summary>
                Right now we only support a single subsection.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.XRefSection.Add(Fonet.Pdf.PdfObjectId,System.Int64)">
            <summary>
                Adds an entry to the section.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.XRefSection.Write(Fonet.Pdf.PdfWriter)">
            <summary>
                Writes the cross reference section to the passed PDF writer.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.XRefSubSection">
            <summary>
                A sub-section in a PDF file's cross-reference table.
            </summary>
            <remarks>
                The cross-reference table is described in section 3.4.3 of
                the PDF specification.
            </remarks>
        </member>
        <member name="F:Fonet.Pdf.XRefSubSection.entries">
            <summary>
                This entries contained in this subsection.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.XRefSubSection.#ctor">
            <summary>
                Creates a new blank sub-section, that initially contains no entries.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.XRefSubSection.Add(Fonet.Pdf.PdfObjectId,System.Int64)">
            <summary>
                Adds an entry to the sub-section.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.XRefSubSection.Write(Fonet.Pdf.PdfWriter)">
            <summary>
                Writes the cross reference sub-section to the passed PDF writer.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.XRefSubSection.Entry">
            <summary>
                Structure representing a single cross-reference entry.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.XRefSubSection.Entry.objectId">
            <summary>
                The object number and generation number.
            </summary>
        </member>
        <member name="F:Fonet.Pdf.XRefSubSection.Entry.offset">
            <summary>
                The number of bytes from the beginning of the file to
                the beginning of the object.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.XRefSubSection.Entry.CompareTo(System.Object)">
            <summary>
                Implementation of IComparable.
            </summary>
        </member>
        <member name="T:Fonet.Pdf.XRefTable">
            <summary>
                A PDF file's cross-reference table.
            </summary>
            <remarks>
                The cross-reference table is described in section 3.4.3 of
                the PDF specification.
            </remarks>
        </member>
        <member name="F:Fonet.Pdf.XRefTable.section">
            <summary>
                Right now we only support a single section.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.XRefTable.Add(Fonet.Pdf.PdfObjectId,System.Int64)">
            <summary>
                Adds an entry to the table.
            </summary>
        </member>
        <member name="M:Fonet.Pdf.XRefTable.Write(Fonet.Pdf.PdfWriter)">
            <summary>
                Writes the cross reference table to the passed PDF writer.
            </summary>
        </member>
        <member name="T:Fonet.Render.Pdf.FontSetup">
            <summary>
                Sets up the PDF fonts.
            </summary>
            <remarks>
                Assigns the font (with metrics) to internal names like "F1" and
                assigns family-style-weight triplets to the fonts.
            </remarks>
        </member>
        <member name="F:Fonet.Render.Pdf.FontSetup.startIndex">
            <summary>
                First 16 indices are used by base 14 and generic fonts
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.FontSetup.fontInfo">
            <summary>
                Handles mapping font triplets to a IFontMetric implementor
            </summary>
        </member>
        <member name="M:Fonet.Render.Pdf.FontSetup.AddSystemFonts(Fonet.Render.Pdf.FontType)">
            <summary>
                Adds all the system fonts to the FontInfo object.
            </summary>
            <remarks>
                Adds metrics for basic fonts and useful family-style-weight
                triplets for lookup.
            </remarks>
            <param name="fontType">Determines what type of font to instantiate.</param>
        </member>
        <member name="M:Fonet.Render.Pdf.FontSetup.IsBase14FontName(System.String)">
            <summary>
                Returns <b>true</b> is <i>familyName</i> represents one of the 
                base 14 fonts; otherwise <b>false</b>.
            </summary>
            <param name="familyName"></param>
            <returns></returns>
        </member>
        <member name="M:Fonet.Render.Pdf.FontSetup.GetNextAvailableName">
            <summary>
                Gets the next available font name.  A font name is defined as an 
                integer prefixed by the letter 'F'.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.Render.Pdf.FontSetup.AddToResources(Fonet.Pdf.PdfFontCreator,Fonet.Pdf.PdfResources)">
            <summary>
                Add the fonts in the font info to the PDF document.
            </summary>
            <param name="fontCreator">Object that creates PdfFont objects.</param>
            <param name="resources">Resources object to add fonts too.</param>
        </member>
        <member name="T:Fonet.Render.Pdf.Fonts.Base14Font">
            <summary>
                Base class for the standard 14 fonts as defined in the PDF spec.
            </summary>
        </member>
        <member name="T:Fonet.Render.Pdf.Fonts.Font">
            <summary>
                Base class for PDF font classes
            </summary>
        </member>
        <member name="M:Fonet.Render.Pdf.Fonts.Font.MapCharacter(System.Char)">
            <summary>
                Maps a Unicode character to a character index.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns></returns>
        </member>
        <member name="M:Fonet.Render.Pdf.Fonts.Font.GetWidth(System.UInt16)">
            <summary>
                See <see cref="M:Fonet.Layout.IFontMetric.GetWidth(System.UInt16)"/>
            </summary>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.Font.Encoding">
            <summary>
                Get the encoding of the font.
            </summary>
            <remarks>
                A font encoding defines a mapping between a character code 
                and a code point.  
            </remarks>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.Font.FontName">
            <summary>
                Gets the base font name.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.Font.Type">
            <summary>
                Gets the type of font, e.g. Type 0, Type 1, etc.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.Font.SubType">
            <summary>
                Gets the font subtype.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.Font.Descriptor">
            <summary>
                Gets a reference to a FontDescriptor
            </summary>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.Font.MultiByteFont">
            <summary>
                Gets a boolean value indicating whether this font supports 
                multi-byte characters
            </summary>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.Font.Ascender">
            <summary>
                See <see cref="P:Fonet.Layout.IFontMetric.Ascender"/>
            </summary>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.Font.Descender">
            <summary>
                See <see cref="P:Fonet.Layout.IFontMetric.Descender"/>
            </summary>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.Font.CapHeight">
            <summary>
                See <see cref="P:Fonet.Layout.IFontMetric.CapHeight"/>
            </summary>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.Font.FirstChar">
            <summary>
                See <see cref="P:Fonet.Layout.IFontMetric.FirstChar"/>
            </summary>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.Font.LastChar">
            <summary>
                See <see cref="P:Fonet.Layout.IFontMetric.LastChar"/>
            </summary>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.Font.Widths">
            <summary>
                See <see cref="P:Fonet.Layout.IFontMetric.Widths"/>
            </summary>
        </member>
        <member name="M:Fonet.Render.Pdf.Fonts.Base14Font.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],Fonet.Render.Pdf.CodePointMapping)">
            <summary>
                Class constructor.
            </summary>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.Base14Font.Descriptor">
            <summary>
                Will always return null since the standard 14 fonts do not 
                have a FontDescriptor.
            </summary>
            <remarks>
                It is possible to override the default metrics, but the 
                current version of FO.NET does not support this feature.
            </remarks>
        </member>
        <member name="T:Fonet.Render.Pdf.Fonts.CIDFont">
            <summary>
                Base class for a CID (Character Indexed) font.
            </summary>
            <remarks>
                There are two types of CIDFont: Type 0 and Type 2.  A Type 0 CIDFont
                contains glyph description based on Adobe Type 1 font format; a 
                Type 2 CIDFont contains glyph descriptions based on the TrueType 
                font format.
                See page 338 of the Adode PDF 1.4 specification for futher details.
            </remarks>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.CIDFont.CidBaseFont">
            <summary>
                Gets the PostScript name of the font.
            </summary>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.CIDFont.CMapEntries">
            <summary>
                Gets a dictionary mapping character codes to unicode values
            </summary>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.CIDFont.Type">
            <summary>
                Returns <see cref="F:Fonet.Pdf.PdfFontTypeEnum.CIDFont"/>.
            </summary>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.CIDFont.Registry">
            <summary>
                Gets a string identifying the issuer of the character collections.
            </summary>
            <remarks>
                The default implementation returns <see cref="F:Fonet.Pdf.PdfCIDSystemInfo.DefaultRegistry"/>.
            </remarks>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.CIDFont.Ordering">
            <summary>
                Gets a string that uniquely names the character collection.
            </summary>
            <remarks>
                The default implementation returns <see cref="F:Fonet.Pdf.PdfCIDSystemInfo.DefaultOrdering"/>.
            </remarks>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.CIDFont.Supplement">
            <summary>
                Gets the supplement number of the character collection.
            </summary>
            <remarks>
                The default implementation returns <see cref="F:Fonet.Pdf.PdfCIDSystemInfo.DefaultSupplement"/>.
            </remarks>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.CIDFont.DefaultWidth">
            <summary>
                Gets the default width for all glyphs.
            </summary>
            <remarks>
                The default implementation returns <see cref="F:Fonet.Render.Pdf.Fonts.CIDFont.DefaultWidthConst"/>
            </remarks>
        </member>
        <member name="T:Fonet.Render.Pdf.Fonts.FontDescriptorFlags">
            <summary>
                Represents a collection of font descriptor flags specifying 
                various characterisitics of a font.
            </summary>
            <remarks>
                The following lists the bit positions and associated flags:
                1  - FixedPitch
                2  - Serif
                3  - Symbolic
                4  - Script
                6  - Nonsymbolic
                7  - Italic
                17 - AllCap
                18 - SmallCap
                19 - ForceBold
            </remarks>
        </member>
        <member name="M:Fonet.Render.Pdf.Fonts.FontDescriptorFlags.#ctor">
            <summary>
                Default class constructor.
            </summary>
        </member>
        <member name="M:Fonet.Render.Pdf.Fonts.FontDescriptorFlags.#ctor(System.Int32)">
            <summary>
                Class constructor.  Initialises the flags BitVector with the 
                supplied integer.
            </summary>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.FontDescriptorFlags.Flags">
            <summary>
                Gets the font descriptor flags as a 32-bit signed integer.
            </summary>
        </member>
        <member name="T:Fonet.Render.Pdf.Fonts.FontDescriptorFlags.FontDescriptorFlagsEnum">
            <summary>
                Handy enumeration used to reference individual bit positions
                in the BitVector32.
            </summary>
        </member>
        <member name="T:Fonet.Render.Pdf.Fonts.FontProperties">
            <summary>
                Collection of font properties such as face name and whether the 
                a font is bold and/or italic.
            </summary>
        </member>
        <member name="M:Fonet.Render.Pdf.Fonts.FontProperties.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
                Class constructor.
            </summary>
            <remarks>
                Regular    : bold=false, italic=false
                Bold       : bold=true,  italic=false
                Italic     : bold=false, italic=true
                BoldItalic : bold=true,  italic=true
            </remarks>
            <param name="faceName">Font face name, e.g. Arial.</param>
            <param name="bold">Bold flag.</param>
            <param name="italic">Italic flag.</param>
        </member>
        <member name="T:Fonet.Render.Pdf.Fonts.ProxyFont">
            <summary>
                A proxy object that delegates all operations to a concrete 
                subclass of the Font class.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.Fonts.ProxyFont.fontLoaded">
            <summary>
                Flag that indicates whether the underlying font has been loaded.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.Fonts.ProxyFont.properties">
            <summary>
                Font details such as face name, bold and italic flags
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.Fonts.ProxyFont.realFont">
            <summary>
                The font that does all the work.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.Fonts.ProxyFont.fontType">
            <summary>
                Determines what type of "real" font to instantiate.
            </summary>
        </member>
        <member name="M:Fonet.Render.Pdf.Fonts.ProxyFont.#ctor(Fonet.Render.Pdf.Fonts.FontProperties,Fonet.Render.Pdf.FontType)">
            <summary>
                Class constructor.
            </summary>
            <param name="properties"></param>
            <param name="fontType"></param>
        </member>
        <member name="M:Fonet.Render.Pdf.Fonts.ProxyFont.LoadIfNecessary">
            <summary>
                Loads the underlying font.
            </summary>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.ProxyFont.RealFont">
            <summary>
                Gets the underlying font.
            </summary>
        </member>
        <member name="T:Fonet.Render.Pdf.Fonts.TrueTypeFont">
            <summary>
                Represents a TrueType font program.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.Fonts.TrueTypeFont.dc">
            <summary>
                Wrapper around a Win32 HDC.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.Fonts.TrueTypeFont.metrics">
            <summary>
                Provides font metrics using the Win32 Api.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.Fonts.TrueTypeFont.kerning">
            <summary>
                List of kerning pairs.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.Fonts.TrueTypeFont.widths">
            <summary>
                Maps a glyph index to a PDF width
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.Fonts.TrueTypeFont.properties">
            <summary>
                
            </summary>
        </member>
        <member name="M:Fonet.Render.Pdf.Fonts.TrueTypeFont.#ctor(Fonet.Render.Pdf.Fonts.FontProperties)">
            <summary>
                Class constructor
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Fonet.Render.Pdf.Fonts.TrueTypeFont.ObtainFontMetrics">
            <summary>
                Creates a <see cref="T:Fonet.Pdf.Gdi.GdiFontMetrics"/> object from <b>baseFontName</b>
            </summary>
        </member>
        <member name="M:Fonet.Render.Pdf.Fonts.TrueTypeFont.GetWidth(System.UInt16)">
            <summary>
                See <see cref="M:Fonet.Render.Pdf.Fonts.Font.GetWidth(System.UInt16)"/>
            </summary>
            <param name="charIndex">A WinAnsi codepoint.</param>
            <returns></returns>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.TrueTypeFont.SubType">
            <summary>
                Returns <see cref="F:Fonet.Pdf.PdfFontSubTypeEnum.TrueType"/>.
            </summary>
        </member>
        <member name="T:Fonet.Render.Pdf.Fonts.Type2CIDFont">
            <summary>
                A Type 2 CIDFont is a font whose glyph descriptions are based on the 
                TrueType font format.
            </summary>
            <remarks>
                TODO: Support font subsetting
            </remarks>
        </member>
        <member name="F:Fonet.Render.Pdf.Fonts.Type2CIDFont.dc">
            <summary>
                Wrapper around a Win32 HDC.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.Fonts.Type2CIDFont.metrics">
            <summary>
                Provides font metrics using the Win32 Api.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.Fonts.Type2CIDFont.kerning">
            <summary>
                List of kerning pairs.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.Fonts.Type2CIDFont.widths">
            <summary>
                Maps a glyph index to a PDF width
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.Fonts.Type2CIDFont.baseFontName">
            <summary>
                Windows font name, e.g. 'Arial Bold'
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.Fonts.Type2CIDFont.properties">
            <summary>
                
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.Fonts.Type2CIDFont.usedGlyphs">
            <summary>
                Maps a glyph index to a character code.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.Fonts.Type2CIDFont.unicodeRanges">
            <summary>
                Maps character code to glyph index.  The array is based on the 
                value of <see cref="P:Fonet.Render.Pdf.Fonts.Type2CIDFont.FirstChar"/>.
            </summary>
        </member>
        <member name="M:Fonet.Render.Pdf.Fonts.Type2CIDFont.#ctor(Fonet.Render.Pdf.Fonts.FontProperties)">
            <summary>
                Class constructor.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Fonet.Render.Pdf.Fonts.Type2CIDFont.ObtainFontMetrics">
            <summary>
                Creates a <see cref="T:Fonet.Pdf.Gdi.GdiFontMetrics"/> object from <b>baseFontName</b>
            </summary>
        </member>
        <member name="M:Fonet.Render.Pdf.Fonts.Type2CIDFont.Finalize">
            <summary>
                Class destructor.
            </summary>
        </member>
        <member name="P:Fonet.Render.Pdf.Fonts.Type2CIDFont.SubType">
            <summary>
                Returns <see cref="F:Fonet.Pdf.PdfFontSubTypeEnum.CIDFontType2"/>.
            </summary>
        </member>
        <member name="T:Fonet.Render.Pdf.Fonts.Type2CIDSubsetFont">
            <summary>
                A subclass of Type2CIDFont that generates a subset of a 
                TrueType font.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.Fonts.Type2CIDSubsetFont.indexMappings">
            <summary>
                Maps a glyph index to a subset index.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.Fonts.Type2CIDSubsetFont.namePrefix">
            <summary>
                Quasi-unique six character name prefix.
            </summary>
        </member>
        <member name="M:Fonet.Render.Pdf.Fonts.Type2CIDSubsetFont.#ctor(Fonet.Render.Pdf.Fonts.FontProperties)">
            <summary>
                Class constructor.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Fonet.Render.Pdf.Fonts.Type2CIDSubsetFont.InsertNotdefGlyphs">
            <summary>
                Creates the index mappings list and adds the .notedef glyphs
            </summary>
        </member>
        <member name="T:Fonet.Render.Pdf.FontType">
            <summary>
                Enumeration that dictates how FO.NET should treat fonts when 
                producing a PDF document.
            </summary>
            <remarks>
                <p>Each of the three alernatives has particular advantages and 
                disadvantages, which will be explained here.</p>
                <p>The <see cref="F:Fonet.Render.Pdf.FontType.Link"/> member specifies that all fonts 
                should be linked.  This option will produce the smallest PDF 
                document because the font program required to render individual 
                glyphs is not embedded in the PDF document.  However, this 
                option does possess two distinct disadvantages:
                <ol>
                  <li>Only characters in the WinAnsi character encoding are 
                  supported (i.e. Latin)</li>
                  <li>The PDF document will not render correctly if the linked 
                  font is not installed.</li>
                </ol>///     </p>
                <p>The <see cref="F:Fonet.Render.Pdf.FontType.Embed"/> option will copy the contents of 
                the entire font program into the PDF document.  This will guarantee 
                correct rendering of the document on any system, however certain 
                fonts - especially CJK fonts - are extremely large.  The MS Gothic 
                TrueType collection, for example, is 8MB.  Embedding this font file 
                would produce a ridicuously large PDF.</p>
                <p>Finally, the <see cref="F:Fonet.Render.Pdf.FontType.Subset"/> option will only copy the required 
                glyphs required to render a PDF document.  This option will ensure that 
                a PDF document is rendered correctly on any system, but does incur a 
                slight processing overhead to subset the font.</p>
            </remarks>
        </member>
        <member name="F:Fonet.Render.Pdf.FontType.Link">
            <summary>
                Fonts are linked.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.FontType.Embed">
            <summary>
                The entire font program is embedded.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.FontType.Subset">
            <summary>
                The font program is subsetted and embedded.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.currentYPosition">
            <summary>
                The current vertical position in millipoints from bottom.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.currentXPosition">
            <summary>
                The current horizontal position in millipoints from left.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.currentAreaContainerXPosition">
            <summary>
                The horizontal position of the current area container.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.pdfDoc">
            <summary>
                The PDF Document being created.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.pdfResources">
            <summary>
                The /Resources object of the PDF document being created.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.currentStream">
            <summary>
                The current stream to add PDF commands to.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.currentAnnotList">
            <summary>
                The current annotation list to add annotations to.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.currentPage">
            <summary>
                The current page to add annotations to.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.textOpen">
            <summary>
                True if a TJ command is left to be written.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.prevWordY">
            <summary>
                The previous Y coordinate of the last word written.
            </summary>
            <remarks>
                Used to decide if we can draw the next word on the same line.
            </remarks>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.prevWordX">
            <summary>
                The previous X coordinate of the last word written.
            </summary>
            <remarks>
                Used to calculate how much space between two words.
            </remarks>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.prevWordWidth">
            <summary>
            The  width of the previous word.
            </summary>
            <remarks>
                Used to calculate space between.
            </remarks>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer._wordAreaPDF">
            <summary>
                Reusable word area string buffer to reduce memory usage.
            </summary>
            <remarks>
                TODO: remove use of this.
            </remarks>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.options">
            <summary>
                User specified rendering options.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.currentFontName">
            <summary>
                The current (internal) font name.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.currentFontSize">
            <summary>
                The current font size in millipoints.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.currentFill">
            <summary>
                The current color/gradient to fill shapes with.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.prevUnderlineXEndPos">
            <summary>
                Previous values used for text-decoration drawing.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.prevUnderlineYEndPos">
            <summary>
                Previous values used for text-decoration drawing.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.prevUnderlineSize">
            <summary>
                Previous values used for text-decoration drawing.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.prevUnderlineColor">
            <summary>
                Previous values used for text-decoration drawing.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.prevOverlineXEndPos">
            <summary>
                Previous values used for text-decoration drawing.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.prevOverlineYEndPos">
            <summary>
                Previous values used for text-decoration drawing.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.prevOverlineSize">
            <summary>
                Previous values used for text-decoration drawing.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.prevOverlineColor">
            <summary>
                Previous values used for text-decoration drawing.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.prevLineThroughXEndPos">
            <summary>
                Previous values used for text-decoration drawing.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.prevLineThroughYEndPos">
            <summary>
                Previous values used for text-decoration drawing.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.prevLineThroughSize">
            <summary>
                Previous values used for text-decoration drawing.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.prevLineThroughColor">
            <summary>
                Previous values used for text-decoration drawing.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.fontInfo">
            <summary>
                Provides triplet to font resolution.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.fontSetup">
            <summary>
                Handles adding base 14 and all system fonts.
            </summary>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRenderer.idReferences">
            <summary>
                The IDReferences for this document.
            </summary>
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.#ctor(System.IO.Stream)">
            <summary>
                Create the PDF renderer.
            </summary>
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.SetupFontInfo(Fonet.Layout.FontInfo)">
            <summary>
            </summary>
            <param name="fontInfo"></param>
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.AddLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Fonet.Render.Pdf.PdfColor)">
             add a line to the current stream
            
             @param x1 the start x location in millipoints
             @param y1 the start y location in millipoints
             @param x2 the end x location in millipoints
             @param y2 the end y location in millipoints
             @param th the thickness in millipoints
             @param r the red component
             @param g the green component
             @param b the blue component
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.AddLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Fonet.Render.Pdf.PdfColor)">
             add a line to the current stream
            
             @param x1 the start x location in millipoints
             @param y1 the start y location in millipoints
             @param x2 the end x location in millipoints
             @param y2 the end y location in millipoints
             @param th the thickness in millipoints
             @param rs the rule style
             @param r the red component
             @param g the green component
             @param b the blue component
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.AddRect(System.Int32,System.Int32,System.Int32,System.Int32,Fonet.Render.Pdf.PdfColor)">
             add a rectangle to the current stream
            
             @param x the x position of left edge in millipoints
             @param y the y position of top edge in millipoints
             @param w the width in millipoints
             @param h the height in millipoints
             @param stroke the stroke color/gradient
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.AddRect(System.Int32,System.Int32,System.Int32,System.Int32,Fonet.Render.Pdf.PdfColor,Fonet.Render.Pdf.PdfColor)">
             add a filled rectangle to the current stream
            
             @param x the x position of left edge in millipoints
             @param y the y position of top edge in millipoints
             @param w the width in millipoints
             @param h the height in millipoints
             @param fill the fill color/gradient
             @param stroke the stroke color/gradient
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.AddFilledRect(System.Int32,System.Int32,System.Int32,System.Int32,Fonet.Render.Pdf.PdfColor)">
             add a filled rectangle to the current stream
            
             @param x the x position of left edge in millipoints
             @param y the y position of top edge in millipoints
             @param w the width in millipoints
             @param h the height in millipoints
             @param fill the fill color/gradient
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.RenderImageArea(Fonet.Image.ImageArea)">
             render image area to PDF
            
             @param area the image area to render
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.RenderForeignObjectArea(Fonet.Layout.Inline.ForeignObjectArea)">
            render a foreign object area
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.RenderWordArea(Fonet.Layout.Inline.WordArea)">
             render inline area to PDF
            
             @param area inline area to render
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.GetUnicodeString(System.UInt16)">
            Convert a char to a multibyte hex representation
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.CloseText">
            Checks to see if we have some text rendering commands open
            still and writes out the TJ command to the stream if we do
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.RenderPage(Fonet.Layout.Page)">
             render page into PDF
            
             @param page page to render
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.SetRuleStylePattern(System.Int32)">
            defines a string containing dashArray and dashPhase for the rule style
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.DoBackground(Fonet.Layout.Area,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Renders an area's background.
            </summary>
            <param name="area">The area whose background is to be rendered.</param>
            <param name="x">The x position of the left edge in millipoints.</param>
            <param name="y">The y position of top edge in millipoints.</param>
            <param name="w">The width in millipoints.</param>
            <param name="h">The height in millipoints.</param>
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.DrawImage(System.Int32,System.Int32,Fonet.Image.FonetImage)">
            <summary>
                Renders an image, rendered at the image's intrinsic size.
                This by default calls drawImageScaled() with the image's
                intrinsic width and height, but implementations may
                override this method if it can provide a more efficient solution.
            </summary>
            <param name="x">The x position of left edge in millipoints.</param>
            <param name="y">The y position of top edge in millipoints.</param>
            <param name="image">The image to be rendered.</param>
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.DrawImageScaled(System.Int32,System.Int32,System.Int32,System.Int32,Fonet.Image.FonetImage)">
            <summary>
                Renders an image, scaling it to the given width and height.
                If the scaled width and height is the same intrinsic size 
                of the image, the image is not scaled
            </summary>
            <param name="x">The x position of left edge in millipoints.</param>
            <param name="y">The y position of top edge in millipoints.</param>
            <param name="w">The width in millipoints.</param>
            <param name="h">The height in millipoints.</param>
            <param name="image">The image to be rendered.</param>
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.DrawImageClipped(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Fonet.Image.FonetImage)">
            <summary>
                Renders an image, clipping it as specified.
            </summary>
            <param name="x">The x position of left edge in millipoints.</param>
            <param name="y">The y position of top edge in millipoints.</param>
            <param name="clipX">The left edge of the clip in millipoints.</param>
            <param name="clipY">The top edge of the clip in millipoints.</param>
            <param name="clipW">The clip width in millipoints.</param>
            <param name="clipH">The clip height in millipoints.</param>
            <param name="image">The image to be rendered.</param>
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.RenderDisplaySpace(Fonet.Layout.DisplaySpace)">
             render display space
            
             @param space the display space to render
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.RenderInlineSpace(Fonet.Layout.Inline.InlineSpace)">
             render inline space
            
             @param space space to render
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRenderer.RenderLeaderArea(Fonet.Layout.Inline.LeaderArea)">
             render leader area
            
             @param area area to render
        </member>
        <member name="P:Fonet.Render.Pdf.PdfRenderer.Options">
            <summary>
                Assigns renderer options to this PdfRenderer
            </summary>
            <remarks>
                This property will only accept an instance of the PdfRendererOptions class
            </remarks>
            <exception cref="T:System.ArgumentException">
                If <i>value</i> is not an instance of PdfRendererOptions
            </exception>
        </member>
        <member name="T:Fonet.Render.Pdf.PdfRendererOptions">
            <summary>
                This class can be used to control various properties of PDF files
                created by FO.NET.
            </summary>
            <remarks>
                Can be used to control certain values in the generated PDF's information
                dictionary.  These values are typically displayed in a document summary 
                dialog of PDF viewer applications.
                This class also allows security settings to be specified that will 
                cause generated PDF files to be encrypted and optionally password protected.
            </remarks>
        </member>
        <member name="F:Fonet.Render.Pdf.PdfRendererOptions.permissions">
            <remarks>
                The given initial value zero's out first two bits.
                The PDF specification dictates that these entries must be 0.
            </remarks>
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRendererOptions.AddKeyword(System.String)">
            <summary>
                Adds a keyword to the PDF document.
            </summary>
            <remarks>
                Keywords are embedded in the PDF information dictionary.
            </remarks>
            <param name="keyword">The keyword to be added.</param>
        </member>
        <member name="M:Fonet.Render.Pdf.PdfRendererOptions.AddPrivateFont(System.IO.FileInfo)">
            <summary>
                Adds <i>fileInfo</i> to the private font collection.
            </summary>
            <param name="fileInfo">
                Absolute path to a TrueType font or collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
                If <i>fileInfo</i> is null.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
                If <i>fileInfo</i> does not exist.
            </exception>
            <exception cref="T:System.ArgumentException">
                If <i>fileInfo</i> has already been added.
            </exception>
            <exception cref="T:System.ArgumentException">
                If <i>fileInfo</i> cannot be added to the system font collection.
            </exception>
        </member>
        <member name="P:Fonet.Render.Pdf.PdfRendererOptions.Title">
            <summary>
                Specifies the Title of the PDF document.
            </summary>
            <value>
                The default value is null.
            </value>
            <remarks>
                This value will be embedded in the PDF information dictionary.
            </remarks>
        </member>
        <member name="P:Fonet.Render.Pdf.PdfRendererOptions.Subject">
            <summary>
                Specifies the Subject of the PDF document.
            </summary>
            <value>
                The default value is null.
            </value>
            <remarks>
                This value will be embedded in the PDF information dictionary.
            </remarks>
        </member>
        <member name="P:Fonet.Render.Pdf.PdfRendererOptions.Author">
            <summary>
                Specifies the Author of the PDF document.
            </summary>
            <value>
                The default value is null.
            </value>
            <remarks>
                This value will be embedded in the PDF information dictionary.
            </remarks>
        </member>
        <member name="P:Fonet.Render.Pdf.PdfRendererOptions.Creator">
            <summary>
                Returns the Creator of the PDF document.
            </summary>
            <value>
                This method will always return "XSL-FO http://www.w3.org/1999/XSL/Format".
            </value>
        </member>
        <member name="P:Fonet.Render.Pdf.PdfRendererOptions.Producer">
            <summary>
                Returns the Producer of the PDF document.
            </summary>
            <value>
                This method will return the assembly name and version of FO.NET.
            </value>
        </member>
        <member name="P:Fonet.Render.Pdf.PdfRendererOptions.Keywords">
            <summary>
                Returns a list of keywords as a comma-separated string
            </summary>
            <value>
                If no keywords exist the empty string <see cref="F:System.String.Empty"/> is returned
            </value>
        </member>
        <member name="P:Fonet.Render.Pdf.PdfRendererOptions.OwnerPassword">
            <summary>
                Specifies the owner password that will protect full access to any generated PDF documents.
            </summary>
            <remarks>
                If either the owner or the user password is specified, 
                then the document will be encrypted.
            </remarks>
            <value>
                The default value is null.
            </value>
        </member>
        <member name="P:Fonet.Render.Pdf.PdfRendererOptions.UserPassword">
            <summary>
                Specifies the user password that will protect access to any generated PDF documents.
            </summary>
            <remarks>
                If either the owner or the user password is specified, 
                then the document will be encrypted.
            </remarks>
            <value>
                The default value is null.
            </value>
        </member>
        <member name="P:Fonet.Render.Pdf.PdfRendererOptions.HasPermissions">
            <summary>
                Returns true if any permissions have been set.
            </summary>
        </member>
        <member name="P:Fonet.Render.Pdf.PdfRendererOptions.Permissions">
            <summary>
                Returns the PDF permissions encoded as an 32-bit integer.
            </summary>
        </member>
        <member name="P:Fonet.Render.Pdf.PdfRendererOptions.EnablePrinting">
            <summary>
                Enables or disables printing.
            </summary>
            <value>
                The default value is true.
            </value>
        </member>
        <member name="P:Fonet.Render.Pdf.PdfRendererOptions.EnableModify">
            <summary>
                Enables or disables modifying document contents (other than text annotations and 
                interactive form fields).
            </summary>
            <value>
                The default value is true.
            </value>
        </member>
        <member name="P:Fonet.Render.Pdf.PdfRendererOptions.EnableCopy">
            <summary>
                Enables or disables copying of text and graphics.
            </summary>
            <value>
                The default value is true.
            </value>
        </member>
        <member name="P:Fonet.Render.Pdf.PdfRendererOptions.EnableAdd">
            <summary>
                Enables or disables adding or modifying text annotations and interactive
                form fields.
            </summary>
            <value>
                The default value is true.
            </value>
        </member>
        <member name="P:Fonet.Render.Pdf.PdfRendererOptions.FontType">
            <summary>
                Specifies how FO.NET should treat fonts.
            </summary>
            <value>
                The default value is FontType.Link
            </value>
        </member>
        <member name="P:Fonet.Render.Pdf.PdfRendererOptions.Kerning">
            <summary>
                Gets or sets a value that indicates whether to enable kerning.
            </summary>
            <value>
                The default value is <b>false</b>
            </value>
        </member>
        <member name="T:Fonet.StreamRenderer">
            <summary>
                This class acts as a bridge between the XML:FO parser and the 
                formatting/rendering classes. It will queue PageSequences up until 
                all the IDs required by them are satisfied, at which time it will 
                render the pages.
                StreamRenderer is created by Driver and called from FOTreeBuilder 
                when a PageSequence is created, and AreaTree when a Page is formatted.
            </summary>
        </member>
        <member name="F:Fonet.StreamRenderer.pageCount">
            <summary>
                Keep track of the number of pages rendered.
            </summary>
        </member>
        <member name="F:Fonet.StreamRenderer.renderer">
            <summary>
                The renderer being used.
            </summary>
        </member>
        <member name="F:Fonet.StreamRenderer.results">
            <summary>
                The formatting results to be handed back to the caller.
            </summary>
        </member>
        <member name="F:Fonet.StreamRenderer.fontInfo">
            <summary>
                The FontInfo for this renderer.
            </summary>
        </member>
        <member name="F:Fonet.StreamRenderer.renderQueue">
            <summary>
                The list of pages waiting to be renderered.
            </summary>
        </member>
        <member name="F:Fonet.StreamRenderer.idReferences">
            <summary>
                The current set of IDReferences, passed to the areatrees 
                and pages. This is used by the AreaTree as a single map of 
                all IDs.
            </summary>
        </member>
        <member name="F:Fonet.StreamRenderer.documentMarkers">
            <summary>
                The list of markers.
            </summary>
        </member>
        <member name="M:Fonet.StreamRenderer.Render(Fonet.Fo.Pagination.PageSequence)">
            <summary>
                Format the PageSequence. The PageSequence formats Pages and adds 
                them to the AreaTree, which subsequently calls the StreamRenderer
                instance (this) again to render the page.  At this time the page 
                might be printed or it might be queued. A page might not be 
                renderable immediately if the IDReferences are not all valid. In 
                this case we defer the rendering until they are all valid.
            </summary>
            <param name="pageSequence"></param>
        </member>
        <member name="M:Fonet.StreamRenderer.ProcessQueue(System.Boolean)">
            <summary>
                Try to process the queue from the first entry forward.  If an 
                entry can't be processed, then the queue can't move forward, 
                so return.
            </summary>
            <param name="force"></param>
        </member>
        <member name="M:Fonet.StreamRenderer.GetDocumentMarkers">
            <summary>
                Auxillary function for retrieving markers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.StreamRenderer.GetCurrentPageSequence">
            <summary>
                Auxillary function for retrieving markers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fonet.StreamRenderer.GetCurrentPageSequenceMarkers">
            <summary>
                Auxillary function for retrieving markers.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fonet.StreamRenderer.RenderQueueEntry">
            <summary>
                A RenderQueueEntry consists of the Page to be queued, plus a list 
                of outstanding ID references that need to be resolved before the 
                Page can be renderered.
            </summary>
        </member>
        <member name="F:Fonet.StreamRenderer.RenderQueueEntry.page">
            <summary>
                The Page that has outstanding ID references.
            </summary>
        </member>
        <member name="F:Fonet.StreamRenderer.RenderQueueEntry.unresolvedIdReferences">
            <summary>
                A list of ID references (names).
            </summary>
        </member>
        <member name="M:Fonet.StreamRenderer.RenderQueueEntry.isResolved">
            <summary>
                See if the outstanding references are resolved in the current 
                copy of IDReferences.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Fonet.Util.StringTokenizer.maxDelimChar">
            <summary>
                maxDelimChar stores the value of the delimiter character with 
                the highest value. It is used to optimize the detection of 
                delimiter characters.
            </summary>
        </member>
        <member name="M:Fonet.Util.StringTokenizer.SetMaxDelimChar">
            <summary>
                Set maxDelimChar to the highest char in the delimiter set.
            </summary>
        </member>
        <member name="M:Fonet.Util.StringTokenizer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
                Constructs a string tokenizer for the specified string. All 
                characters in the <i>delim</i> argument are the delimiters 
                for separating tokens.<br/>
                If the <i>returnDelims</i> flag is <i>true</i>, then 
                the delimiter characters are also returned as tokens. Each delimiter 
                is returned as a string of length one. If the flag is 
                <i>false</i>, the delimiter characters are skipped and only 
                serve as separators between tokens. 
            </summary>
            <param name="str"></param>
            <param name="delim"></param>
            <param name="returnDelims"></param>
        </member>
        <member name="M:Fonet.Util.StringTokenizer.#ctor(System.String,System.String)">
            <summary>
                Constructs a string tokenizer for the specified string. The 
                characters in the <code>delim</code> argument are the delimiters 
                for separating tokens. Delimiter characters themselves will not 
                be treated as tokens.
            </summary>
            <param name="str">a string to be parsed.</param>
            <param name="delim">the delimiters.</param>
        </member>
        <member name="M:Fonet.Util.StringTokenizer.#ctor(System.String)">
            <summary>
                Constructs a string tokenizer for the specified string. The 
                tokenizer uses the default delimiter set, which is the space 
                character, the tab character, the newline character, the 
                carriage-return character, and the form-feed character. 
                Delimiter characters themselves will not be treated as tokens.
            </summary>
            <param name="str">a string to be parsed</param>
        </member>
        <member name="M:Fonet.Util.StringTokenizer.SkipDelimiters(System.Int32)">
            <summary>
                Skips delimiters starting from the specified position. If 
                retDelims is false, returns the index of the first non-delimiter 
                character at or after startPos. If retDelims is true, startPos 
                is returned.
            </summary>
            <param name="startPos"></param>
            <returns></returns>
        </member>
        <member name="M:Fonet.Util.StringTokenizer.ScanToken(System.Int32)">
            <summary>
                Skips ahead from startPos and returns the index of the next 
                delimiter character encountered, or maxPosition if no such 
                delimiter is found.
            </summary>
            <param name="startPos"></param>
            <returns></returns>
        </member>
        <member name="M:Fonet.Util.StringTokenizer.NextToken">
            <summary>
                Returns the next token from this string tokenizer.
            </summary>
            <returns>the next token from this string tokenizer.</returns>
        </member>
        <member name="M:Fonet.Util.StringTokenizer.MoveNext">
            <summary>
                Returns the same value as the <code>hasMoreTokens</code> method. 
                It exists so that this class can implement the 
                <i>Enumeration</i> interface. 
            </summary>
            <returns>
            <i>true</i> if there are more tokens; <i>false</i> 
            otherwise.</returns>
        </member>
        <member name="M:Fonet.Util.StringTokenizer.HasMoreTokens">
            <summary>
            Tests if there are more tokens available from this tokenizer's 
            string.  If this method returns <tt>true</tt>, then a subsequent 
            call to <tt>nextToken</tt> with no argument will successfully 
            return a token.
            </summary>
            <returns>
            <code>true</code> if and only if there is at least one token in 
            the string after the current position; <code>false</code> otherwise.
            </returns>
        </member>
        <member name="M:Fonet.Util.StringTokenizer.CountTokens">
            <summary>
            Calculates the number of times that this tokenizer's 
            <code>nextToken</code> method can be called before it generates an 
            exception. The current position is not advanced.
            </summary>
            <returns>
            the number of tokens remaining in the string using the current 
            delimiter set.</returns>
        </member>
        <member name="P:Fonet.Util.StringTokenizer.Current">
            <summary>
            Returns the same value as the <code>nextToken</code> method, except 
            that its declared return value is <code>Object</code> rather than 
            <code>String</code>. It exists so that this class can implement the
            <code>Enumeration</code> interface. 
            </summary>
        </member>
    </members>
</doc>
