/**
 * Minified by jsDelivr using Terser v5.13.1.
 * Original file: /npm/codemirror@5.65.4/src/model/mark_text.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{eltP}from"../util/dom.js";import{eventMixin,hasHandler,on}from"../util/event.js";import{endOperation,operation,runInOp,startOperation}from"../display/operations.js";import{clipPos,cmp,Pos}from"../line/pos.js";import{lineNo,updateLineHeight}from"../line/utils_line.js";import{clearLineMeasurementCacheFor,findViewForLine,textHeight}from"../measurement/position_measurement.js";import{seeReadOnlySpans,seeCollapsedSpans}from"../line/saw_special_spans.js";import{addMarkedSpan,conflictingCollapsedRange,getMarkedSpanFor,lineIsHidden,lineLength,MarkedSpan,removeMarkedSpan,visualLine}from"../line/spans.js";import{copyObj,indexOf,lst}from"../util/misc.js";import{signalLater}from"../util/operation_group.js";import{widgetHeight}from"../measurement/widgets.js";import{regChange,regLineChange}from"../display/view_tracking.js";import{linkedDocs}from"./document_data.js";import{addChangeToHistory}from"./history.js";import{reCheckSelection}from"./selection_updates.js";let nextMarkerId=0;export class TextMarker{constructor(e,i){this.lines=[],this.type=i,this.doc=e,this.id=++nextMarkerId}clear(){if(this.explicitlyCleared)return;let e=this.doc.cm,i=e&&!e.curOp;if(i&&startOperation(e),hasHandler(this,"clear")){let e=this.find();e&&signalLater(this,"clear",e.from,e.to)}let t=null,r=null;for(let i=0;i<this.lines.length;++i){let n=this.lines[i],l=getMarkedSpanFor(n.markedSpans,this);e&&!this.collapsed?regLineChange(e,lineNo(n),"text"):e&&(null!=l.to&&(r=lineNo(n)),null!=l.from&&(t=lineNo(n))),n.markedSpans=removeMarkedSpan(n.markedSpans,l),null==l.from&&this.collapsed&&!lineIsHidden(this.doc,n)&&e&&updateLineHeight(n,textHeight(e.display))}if(e&&this.collapsed&&!e.options.lineWrapping)for(let i=0;i<this.lines.length;++i){let t=visualLine(this.lines[i]),r=lineLength(t);r>e.display.maxLineLength&&(e.display.maxLine=t,e.display.maxLineLength=r,e.display.maxLineChanged=!0)}null!=t&&e&&this.collapsed&&regChange(e,t,r+1),this.lines.length=0,this.explicitlyCleared=!0,this.atomic&&this.doc.cantEdit&&(this.doc.cantEdit=!1,e&&reCheckSelection(e.doc)),e&&signalLater(e,"markerCleared",e,this,t,r),i&&endOperation(e),this.parent&&this.parent.clear()}find(e,i){let t,r;null==e&&"bookmark"==this.type&&(e=1);for(let n=0;n<this.lines.length;++n){let l=this.lines[n],a=getMarkedSpanFor(l.markedSpans,this);if(null!=a.from&&(t=Pos(i?l:lineNo(l),a.from),-1==e))return t;if(null!=a.to&&(r=Pos(i?l:lineNo(l),a.to),1==e))return r}return t&&{from:t,to:r}}changed(){let e=this.find(-1,!0),i=this,t=this.doc.cm;e&&t&&runInOp(t,(()=>{let r=e.line,n=lineNo(e.line),l=findViewForLine(t,n);if(l&&(clearLineMeasurementCacheFor(l),t.curOp.selectionChanged=t.curOp.forceUpdate=!0),t.curOp.updateMaxLine=!0,!lineIsHidden(i.doc,r)&&null!=i.height){let e=i.height;i.height=null;let t=widgetHeight(i)-e;t&&updateLineHeight(r,r.height+t)}signalLater(t,"markerChanged",t,this)}))}attachLine(e){if(!this.lines.length&&this.doc.cm){let e=this.doc.cm.curOp;e.maybeHiddenMarkers&&-1!=indexOf(e.maybeHiddenMarkers,this)||(e.maybeUnhiddenMarkers||(e.maybeUnhiddenMarkers=[])).push(this)}this.lines.push(e)}detachLine(e){if(this.lines.splice(indexOf(this.lines,e),1),!this.lines.length&&this.doc.cm){let e=this.doc.cm.curOp;(e.maybeHiddenMarkers||(e.maybeHiddenMarkers=[])).push(this)}}}eventMixin(TextMarker);export function markText(e,i,t,r,n){if(r&&r.shared)return markTextShared(e,i,t,r,n);if(e.cm&&!e.cm.curOp)return operation(e.cm,markText)(e,i,t,r,n);let l=new TextMarker(e,n),a=cmp(i,t);if(r&&copyObj(r,l,!1),a>0||0==a&&!1!==l.clearWhenEmpty)return l;if(l.replacedWith&&(l.collapsed=!0,l.widgetNode=eltP("span",[l.replacedWith],"CodeMirror-widget"),r.handleMouseEvents||l.widgetNode.setAttribute("cm-ignore-events","true"),r.insertLeft&&(l.widgetNode.insertLeft=!0)),l.collapsed){if(conflictingCollapsedRange(e,i.line,i,t,l)||i.line!=t.line&&conflictingCollapsedRange(e,t.line,i,t,l))throw new Error("Inserting collapsed marker partially overlapping an existing one");seeCollapsedSpans()}l.addToHistory&&addChangeToHistory(e,{from:i,to:t,origin:"markText"},e.sel,NaN);let s,o=i.line,d=e.cm;if(e.iter(o,t.line+1,(r=>{d&&l.collapsed&&!d.options.lineWrapping&&visualLine(r)==d.display.maxLine&&(s=!0),l.collapsed&&o!=i.line&&updateLineHeight(r,0),addMarkedSpan(r,new MarkedSpan(l,o==i.line?i.ch:null,o==t.line?t.ch:null),e.cm&&e.cm.curOp),++o})),l.collapsed&&e.iter(i.line,t.line+1,(i=>{lineIsHidden(e,i)&&updateLineHeight(i,0)})),l.clearOnEnter&&on(l,"beforeCursorEnter",(()=>l.clear())),l.readOnly&&(seeReadOnlySpans(),(e.history.done.length||e.history.undone.length)&&e.clearHistory()),l.collapsed&&(l.id=++nextMarkerId,l.atomic=!0),d){if(s&&(d.curOp.updateMaxLine=!0),l.collapsed)regChange(d,i.line,t.line+1);else if(l.className||l.startStyle||l.endStyle||l.css||l.attributes||l.title)for(let e=i.line;e<=t.line;e++)regLineChange(d,e,"text");l.atomic&&reCheckSelection(d.doc),signalLater(d,"markerAdded",d,l)}return l}export class SharedTextMarker{constructor(e,i){this.markers=e,this.primary=i;for(let i=0;i<e.length;++i)e[i].parent=this}clear(){if(!this.explicitlyCleared){this.explicitlyCleared=!0;for(let e=0;e<this.markers.length;++e)this.markers[e].clear();signalLater(this,"clear")}}find(e,i){return this.primary.find(e,i)}}function markTextShared(e,i,t,r,n){(r=copyObj(r)).shared=!1;let l=[markText(e,i,t,r,n)],a=l[0],s=r.widgetNode;return linkedDocs(e,(e=>{s&&(r.widgetNode=s.cloneNode(!0)),l.push(markText(e,clipPos(e,i),clipPos(e,t),r,n));for(let i=0;i<e.linked.length;++i)if(e.linked[i].isParent)return;a=lst(l)})),new SharedTextMarker(l,a)}eventMixin(SharedTextMarker);export function findSharedMarkers(e){return e.findMarks(Pos(e.first,0),e.clipPos(Pos(e.lastLine())),(e=>e.parent))}export function copySharedMarkers(e,i){for(let t=0;t<i.length;t++){let r=i[t],n=r.find(),l=e.clipPos(n.from),a=e.clipPos(n.to);if(cmp(l,a)){let i=markText(e,l,a,r.primary,r.primary.type);r.markers.push(i),i.parent=r}}}export function detachSharedMarkers(e){for(let i=0;i<e.length;i++){let t=e[i],r=[t.primary.doc];linkedDocs(t.primary.doc,(e=>r.push(e)));for(let e=0;e<t.markers.length;e++){let i=t.markers[e];-1==indexOf(r,i.doc)&&(i.parent=null,t.markers.splice(e--,1))}}}
//# sourceMappingURL=/sm/b5619c129de6fb4370cda8b6ff900e930becf0ca225e3e1e2fadb116ee67338b.map