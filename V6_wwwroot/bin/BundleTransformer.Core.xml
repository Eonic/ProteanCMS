<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BundleTransformer.Core</name>
    </assembly>
    <members>
        <member name="T:BundleTransformer.Core.AssetNodeMatchBase">
            <summary>
            Asset node match
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.AssetNodeMatchBase.Position">
            <summary>
            Gets a position in the original string where
            the first character of the captured substring was found
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.AssetNodeMatchBase.Length">
            <summary>
            Gets a length of the captured substring
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.AssetNodeMatchBase.Match">
            <summary>
            Gets a single regular expression match
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.AssetNodeMatchBase.#ctor(System.Int32,System.Int32,System.Text.RegularExpressions.Match)">
            <summary>
            Constructs a instance of asset node match
            </summary>
            <param name="position">Position in the original string where
            the first character of the captured substring was found</param>
            <param name="length">Length of the captured substring</param>
            <param name="match">Single regular expression match</param>
        </member>
        <member name="T:BundleTransformer.Core.Assets.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.Asset._cssFileWithMinExtensionRegex">
            <summary>
            Regular expression to determine whether asset is
            minified version of CSS file with *.min.css extension
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.Asset._jsFileWithDebugExtensionRegex">
            <summary>
            Regular expression to determine whether asset is
            debug version of JS file with *.debug.js extension
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.Asset._jsFileWithMinExtensionRegex">
            <summary>
            Regular expression to determine whether asset is
            minified version of JS file with *.min.js extension
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.Asset._virtualFileSystemWrapper">
            <summary>
            Virtual file system wrapper
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.Asset._styleFileExtensionMappings">
            <summary>
            Style file extension mappings
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.Asset._scriptFileExtensionMappings">
            <summary>
            Script file extension mappings
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.Asset._virtualPath">
            <summary>
            Virtual path to asset file
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.Asset._assetTypeCode">
            <summary>
            Asset type code
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.Asset._isStylesheet">
            <summary>
            Flag indicating what asset is a stylesheet
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.Asset._isScript">
            <summary>
            Flag indicating what asset is a script
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.Asset._content">
            <summary>
            Text content of asset
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.Asset._includedVirtualPath">
            <summary>
            Included virtual path
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.Asset._transforms">
            <summary>
            List of asset transformations
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.Asset.VirtualPath">
            <summary>
            Gets or sets a virtual path to asset file
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.Asset.Url">
            <summary>
            Gets a URL of asset file
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.Asset.VirtualPathDependencies">
            <summary>
            Gets or sets a list of virtual paths to other files required by the primary asset
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.Asset.OriginalAssets">
            <summary>
            Gets or sets a list of original assets
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.Asset.AssetTypeCode">
            <summary>
            Gets a asset type code
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.Asset.Combined">
            <summary>
            Gets or sets a flag indicating what text content of asset was obtained by
            combining the contents of other assets
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.Asset.Minified">
            <summary>
            Gets or sets a flag indicating what text content of asset is minified
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.Asset.RelativePathsResolved">
            <summary>
            Gets or sets a flag indicating what all relative paths in
            text content of asset is transformed to absolute
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.Asset.Content">
            <summary>
            Gets or sets a text content of asset
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.Asset.IsStylesheet">
            <summary>
            Gets a flag indicating what asset is a stylesheet
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.Asset.IsScript">
            <summary>
            Gets a flag indicating what asset is a script
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Assets.Asset.#ctor(System.String)">
            <summary>
            Constructs a instance of Asset
            </summary>
            <param name="virtualPath">Virtual path to asset file</param>
        </member>
        <member name="M:BundleTransformer.Core.Assets.Asset.#ctor(System.String,BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper)">
            <summary>
            Constructs a instance of Asset
            </summary>
            <param name="virtualPath">Virtual path to asset file</param>
            <param name="virtualFileSystemWrapper">Virtual file system wrapper</param>
        </member>
        <member name="M:BundleTransformer.Core.Assets.Asset.#ctor(System.String,System.Web.Optimization.BundleFile)">
            <summary>
            Constructs a instance of Asset
            </summary>
            <param name="virtualPath">Virtual path to asset file</param>
            <param name="bundleFile">Bundle file</param>
        </member>
        <member name="M:BundleTransformer.Core.Assets.Asset.#ctor(System.String,System.Web.Optimization.BundleFile,BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper)">
            <summary>
            Constructs a instance of Asset
            </summary>
            <param name="virtualPath">Virtual path to asset file</param>
            <param name="bundleFile">Bundle file</param>
            <param name="virtualFileSystemWrapper">Virtual file system wrapper</param>
        </member>
        <member name="M:BundleTransformer.Core.Assets.Asset.#ctor(System.String,System.Web.Optimization.BundleFile,BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper,BundleTransformer.Core.Assets.FileExtensionMappingCollection,BundleTransformer.Core.Assets.FileExtensionMappingCollection)">
            <summary>
            Constructs a instance of Asset
            </summary>
            <param name="virtualPath">Virtual path to asset file</param>
            <param name="bundleFile">Bundle file</param>
            <param name="virtualFileSystemWrapper">Virtual file system wrapper</param>
            <param name="styleFileExtensionMappings">Style file extension mappings</param>
            <param name="scriptFileExtensionMappings">Script file extension mappings</param>
        </member>
        <member name="M:BundleTransformer.Core.Assets.Asset.ApplyTransformsToContent(System.String)">
            <summary>
            Applies a transformations to asset content
            </summary>
            <param name="content">Asset content</param>
            <returns>Processed asset content </returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.Asset.IsCssFileWithMinExtension(System.String)">
            <summary>
            Checks a whether an asset is minified version of CSS file
            with *.min.css extension
            </summary>
            <param name="assetVirtualPath">CSS asset virtual file path</param>
            <returns>Checking result (true - with *.min.css extension;
            false - without *.min.css extension)</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.Asset.IsJsFileWithDebugExtension(System.String)">
            <summary>
            Checks a whether an asset is debug version of JS file
            with *.debug.js extension
            </summary>
            <param name="assetVirtualPath">JS asset virtual file path</param>
            <returns>Checking result (true - with *.debug.js extension;
            false - without *.debug.js extension)</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.Asset.IsJsFileWithMinExtension(System.String)">
            <summary>
            Checks a whether an asset is minified version of JS file with *.min.js extension
            </summary>
            <param name="assetVirtualPath">JS asset virtual file path</param>
            <returns>Checking result (true - with *.min.js extension;
            false - without *.min.js extension)</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.Asset.RemoveAdditionalCssFileExtension(System.String)">
            <summary>
            Removes a additional file extension from path of the specified CSS file
            </summary>
            <param name="assetVirtualPath">CSS asset virtual file path</param>
            <returns>CSS asset virtual file path without additional file extension</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.Asset.RemoveAdditionalJsFileExtension(System.String)">
            <summary>
            Removes a additional file extension from path of the specified JS file
            </summary>
            <param name="assetVirtualPath">JS asset virtual file path</param>
            <returns>JS asset virtual file path without additional file extension</returns>
        </member>
        <member name="F:BundleTransformer.Core.Assets.AssetContextBase._assetConfig">
            <summary>
            Configuration settings of processing assets
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.AssetContextBase._translatorsPool">
            <summary>
            Pool of translators
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.AssetContextBase._translatorsPoolSynchronizer">
            <summary>
            Synchronizer of translators pool
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.AssetContextBase._postProcessorsPool">
            <summary>
            Pool of postprocessors
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.AssetContextBase._postProcessorsPoolSynchronizer">
            <summary>
            Synchronizer of postprocessors pool
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.AssetContextBase._minifiersPool">
            <summary>
            Pool of minifiers
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.AssetContextBase._minifiersPoolSynchronizer">
            <summary>
            Synchronizer of minifiers pool
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.AssetContextBase._fileExtensionMappings">
            <summary>
            File extension mappings
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.AssetContextBase.OutputCodeType">
            <summary>
            Gets a output code type
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.AssetContextBase.FileExtensionMappings">
            <summary>
            Gets a file extension mappings
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Assets.AssetContextBase.#ctor(BundleTransformer.Core.Configuration.AssetSettingsBase)">
            <summary>
            Constructs a instance of script context
            </summary>
            <param name="assetConfig">Configuration settings of processing assets</param>
        </member>
        <member name="M:BundleTransformer.Core.Assets.AssetContextBase.GetFileExtensionMappings">
            <summary>
            Gets a file extension mappings
            </summary>
            <returns></returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.AssetContextBase.GetDefaultTransformInstance">
            <summary>
            Gets a instance of default transform
            </summary>
            <returns>Instance of transformer</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.AssetContextBase.GetTranslatorInstance(System.String)">
            <summary>
            Gets a instance of translator
            </summary>
            <param name="translatorName">Translator name</param>
            <returns>Instance of translator</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.AssetContextBase.GetPostProcessorInstance(System.String)">
            <summary>
            Gets a instance of postprocessor
            </summary>
            <param name="postProcessorName">Postprocessor name</param>
            <returns>Instance of postprocessor</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.AssetContextBase.GetMinifierInstance(System.String)">
            <summary>
            Gets a instance of minifier
            </summary>
            <param name="minifierName">Minifier name</param>
            <returns>Instance of minifier</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.AssetContextBase.GetDefaultTranslatorInstances">
            <summary>
            Gets a list of default translator instances
            </summary>
            <returns>List of default translator instances</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.AssetContextBase.GetDefaultPostProcessorInstances">
            <summary>
            Gets a list of default postprocessor instances
            </summary>
            <returns>List of default postprocessor instances</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.AssetContextBase.GetDefaultMinifierInstance">
            <summary>
            Gets a instance of default minifier
            </summary>
            <returns>Instance of default minifier</returns>
        </member>
        <member name="T:BundleTransformer.Core.Assets.Dependency">
            <summary>
            Asset dependency
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.Dependency.Url">
            <summary>
            Gets a URL of dependency file
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.Dependency.Content">
            <summary>
            Gets or sets a text content of dependency file
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.Dependency.IsObservable">
            <summary>
            Gets or sets a flag indicating what this dependency file is observable
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Assets.Dependency.#ctor">
            <summary>
            Constructs a instance of the asset dependency
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Assets.Dependency.#ctor(System.String)">
            <summary>
            Constructs a instance of the asset dependency
            </summary>
            <param name="url">URL of dependency file</param>
        </member>
        <member name="M:BundleTransformer.Core.Assets.Dependency.#ctor(System.String,System.String)">
            <summary>
            Constructs a instance of the asset dependency
            </summary>
            <param name="url">URL of dependency file</param>
            <param name="content">Text content of dependency file</param>
        </member>
        <member name="M:BundleTransformer.Core.Assets.Dependency.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a instance of the asset dependency
            </summary>
            <param name="url">URL of dependency file</param>
            <param name="content">Text content of dependency file</param>
            <param name="isObservable">Flag indicating what this dependency file is observable</param>
        </member>
        <member name="T:BundleTransformer.Core.Assets.DependencyCollection">
            <summary>
            List of dependencies
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Assets.DependencyCollection.ContainsUrl(System.String)">
            <summary>
            Determines whether the list of dependencies contains the specified URL
            </summary>
            <param name="url">URL of dependency</param>
            <returns>Result of checking (true – contains; false – not contains)</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.DependencyCollection.GetByUrl(System.String)">
            <summary>
            Gets a dependency by URL
            </summary>
            <param name="url">URL of dependency</param>
            <returns>Dependency</returns>
        </member>
        <member name="T:BundleTransformer.Core.Assets.FileExtensionMapping">
            <summary>
            File extension mapping
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.FileExtensionMapping.FileExtension">
            <summary>
            Gets a file extension
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.FileExtensionMapping.AssetTypeCode">
            <summary>
            Gets a asset type code
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Assets.FileExtensionMapping.#ctor(System.String,System.String)">
            <summary>
            Constructs a instance of file extension mapping
            </summary>
            <param name="fileExtension">File extension</param>
            <param name="assetTypeCode">Asset type code</param>
        </member>
        <member name="T:BundleTransformer.Core.Assets.FileExtensionMappingCollection">
            <summary>
            Collection of file extension mappings
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.FileExtensionMappingCollection._entries">
            <summary>
            Internal collection of file extension mappings
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.FileExtensionMappingCollection.Item(System.String)">
            <summary>
            Gets or sets a asset type code associated with the specified file extension
            </summary>
            <param name="fileExtension">File extension</param>
            <returns>Asset type code</returns>
        </member>
        <member name="P:BundleTransformer.Core.Assets.FileExtensionMappingCollection.FileExtensions">
            <summary>
            Gets a collection containing the file extensions
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.FileExtensionMappingCollection.AssetTypeCodes">
            <summary>
            Gets a collection containing the asset type codes
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.FileExtensionMappingCollection.Count">
            <summary>
            Gets a number of mappings contained in the collection
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Assets.FileExtensionMappingCollection.ContainsFileExtension(System.String)">
            <summary>
            Determines whether a collections contains the specified file extension
            </summary>
            <param name="fileExtension">File extension</param>
            <returns>Result of check (true - contains; false - not contains)</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.FileExtensionMappingCollection.ContainsAssetTypeCode(System.String)">
            <summary>
            Determines whether a collections contains the specified asset type code
            </summary>
            <param name="assetTypeCode">Asset type code</param>
            <returns>Result of check (true - contains; false - not contains)</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.FileExtensionMappingCollection.Contains(BundleTransformer.Core.Assets.FileExtensionMapping)">
            <summary>
            Determines whether a collections contains the specified file extension mapping
            </summary>
            <param name="mapping">File extension mapping</param>
            <returns>Result of check (true - contains; false - not contains)</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.FileExtensionMappingCollection.GetAssetTypeCodeByFilePath(System.String)">
            <summary>
            Gets a asset type code by file path
            </summary>
            <param name="filePath">File path</param>
            <returns>Asset type code</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.FileExtensionMappingCollection.Add(System.String,System.String)">
            <summary>
            Adds a specified file extension and asset type code to the collection
            </summary>
            <param name="fileExtension">File extension</param>
            <param name="assetTypeCode">Asset type code</param>
        </member>
        <member name="M:BundleTransformer.Core.Assets.FileExtensionMappingCollection.Add(BundleTransformer.Core.Assets.FileExtensionMapping)">
            <summary>
            Adds a specified file extension mapping to the collection
            </summary>
            <param name="mapping">File extension mapping</param>
        </member>
        <member name="M:BundleTransformer.Core.Assets.FileExtensionMappingCollection.Remove(System.String)">
            <summary>
            Removes a mapping with the specified file extension from the collection
            </summary>
            <param name="fileExtension">File extension</param>
            <returns>Result of operation (true - mapping is successfully found and removed;
            false - otherwise)</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.FileExtensionMappingCollection.Remove(BundleTransformer.Core.Assets.FileExtensionMapping)">
            <summary>
            Removes a mapping from the collection
            </summary>
            <param name="mapping">File extension mapping</param>
            <returns>Result of operation (true - mapping is successfully found and removed;
            false - otherwise)</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.FileExtensionMappingCollection.Clear">
            <summary>
            Removes all file extension mappings from the collection
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Assets.FileExtensionMappingCollection.ProcessFileExtension(System.String)">
            <summary>
            Process a file extension
            </summary>
            <param name="fileExtension">File extension</param>
            <returns>Processed file extension</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.FileExtensionMappingCollection.ProcessAssetTypeCode(System.String)">
            <summary>
            Process a asset type code
            </summary>
            <param name="assetTypeCode">Asset type code</param>
            <returns>Processed asset type code</returns>
        </member>
        <member name="T:BundleTransformer.Core.Assets.IAsset">
            <summary>
            Defines the interface of asset
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.IAsset.VirtualPath">
            <summary>
            Gets or sets a virtual path to asset file
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.IAsset.Url">
            <summary>
            Gets a URL of asset file
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.IAsset.OriginalAssets">
            <summary>
            Gets or sets a list of original assets
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.IAsset.VirtualPathDependencies">
            <summary>
            Gets or sets a list of virtual paths to other files required by the primary asset
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.IAsset.AssetTypeCode">
            <summary>
            Gets a asset type code
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.IAsset.Combined">
            <summary>
            Gets or sets a flag indicating what text content of asset was obtained by
            combining the contents of other assets
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.IAsset.Minified">
            <summary>
            Gets or sets a flag indicating what text content of asset is minified
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.IAsset.RelativePathsResolved">
            <summary>
            Gets or sets a flag indicating what all relative paths in
            text content of asset is transformed to absolute
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.IAsset.Content">
            <summary>
            Gets or sets a text content of asset
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.IAsset.IsStylesheet">
            <summary>
            Gets a flag indicating what asset is a stylesheet
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.IAsset.IsScript">
            <summary>
            Gets a flag indicating what asset is a script
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Assets.IAssetContext">
            <summary>
            Defines interface of asset context
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.IAssetContext.FileExtensionMappings">
            <summary>
            Gets a file extension mappings
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Assets.IAssetContext.GetDefaultTransformInstance">
            <summary>
            Gets a instance of default transform
            </summary>
            <returns>Instance of transformer</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.IAssetContext.GetTranslatorInstance(System.String)">
            <summary>
            Gets a instance of translator
            </summary>
            <param name="translatorName">Translator name</param>
            <returns>Instance of translator</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.IAssetContext.GetPostProcessorInstance(System.String)">
            <summary>
            Gets a instance of postprocessor
            </summary>
            <param name="postProcessorName">Postprocessor name</param>
            <returns>Instance of postprocessor</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.IAssetContext.GetMinifierInstance(System.String)">
            <summary>
            Gets a instance of minifier
            </summary>
            <param name="minifierName">Minifier name</param>
            <returns>Instance of minifier</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.IAssetContext.GetDefaultTranslatorInstances">
            <summary>
            Gets a list of default translator instances
            </summary>
            <returns>List of default translator instances</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.IAssetContext.GetDefaultPostProcessorInstances">
            <summary>
            Gets a list of default postprocessor instances
            </summary>
            <returns>List of default postprocessor instances</returns>
        </member>
        <member name="M:BundleTransformer.Core.Assets.IAssetContext.GetDefaultMinifierInstance">
            <summary>
            Gets a instance of default minifier
            </summary>
            <returns>Instance of default minifier</returns>
        </member>
        <member name="T:BundleTransformer.Core.Assets.ScriptContext">
            <summary>
            Script context
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.ScriptContext._transformer">
            <summary>
            Transformer
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.ScriptContext.OutputCodeType">
            <summary>
            Gets a output code type
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Assets.ScriptContext.#ctor(BundleTransformer.Core.Configuration.ScriptSettings)">
            <summary>
            Constructs a instance of script context
            </summary>
            <param name="scriptConfig">Configuration settings of processing script assets</param>
        </member>
        <member name="M:BundleTransformer.Core.Assets.ScriptContext.GetDefaultTransformInstance">
            <summary>
            Gets a instance of default transform
            </summary>
            <returns>Instance of transformer</returns>
        </member>
        <member name="T:BundleTransformer.Core.Assets.StyleContext">
            <summary>
            Style context
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Assets.StyleContext._transformer">
            <summary>
            Transformer
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Assets.StyleContext.OutputCodeType">
            <summary>
            Gets a output code type
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Assets.StyleContext.#ctor(BundleTransformer.Core.Configuration.StyleSettings)">
            <summary>
            Constructs a instance of style context
            </summary>
            <param name="styleConfig">Configuration settings of processing style assets</param>
        </member>
        <member name="M:BundleTransformer.Core.Assets.StyleContext.GetDefaultTransformInstance">
            <summary>
            Gets a instance of default transform
            </summary>
            <returns>Instance of transformer</returns>
        </member>
        <member name="T:BundleTransformer.Core.Builders.NullBuilder">
            <summary>
            Builder that responsible for prevention of early applying of
            the item transformations and combining of code
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Builders.NullBuilder.BuildBundleContent(System.Web.Optimization.Bundle,System.Web.Optimization.BundleContext,System.Collections.Generic.IEnumerable{System.Web.Optimization.BundleFile})">
            <summary>
            Prevents a early applying of the item transformations and combining of code
            </summary>
            <param name="bundle">Bundle</param>
            <param name="context">Object BundleContext</param>
            <param name="files">List of files</param>
            <returns>Empty string</returns>
        </member>
        <member name="T:BundleTransformer.Core.Bundles.CustomScriptBundle">
            <summary>
            Bundle that uses ScriptTransformer as transformation by default
            and NullBuilder as builder by default
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Bundles.CustomScriptBundle.#ctor(System.String)">
            <summary>
            Constructs a instance of custom script bundle
            </summary>
            <param name="virtualPath">Virtual path of bundle</param>
        </member>
        <member name="M:BundleTransformer.Core.Bundles.CustomScriptBundle.#ctor(System.String,System.String)">
            <summary>
            Constructs a instance of custom script bundle
            </summary>
            <param name="virtualPath">Virtual path of bundle</param>
            <param name="cdnPath">Path of bundle on CDN</param>
        </member>
        <member name="T:BundleTransformer.Core.Bundles.CustomStyleBundle">
            <summary>
            Bundle that uses StyleTransformer as transformation by default
            and NullBuilder as builder by default
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Bundles.CustomStyleBundle.#ctor(System.String)">
            <summary>
            Constructs a instance of custom style bundle
            </summary>
            <param name="virtualPath">Virtual path of bundle</param>
        </member>
        <member name="M:BundleTransformer.Core.Bundles.CustomStyleBundle.#ctor(System.String,System.String)">
            <summary>
            Constructs a instance of custom style bundle
            </summary>
            <param name="virtualPath">Virtual path of bundle</param>
            <param name="cdnPath">Path of bundle on CDN</param>
        </member>
        <member name="T:BundleTransformer.Core.BundleTransformerContext">
            <summary>
            Bundle transformer context
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.BundleTransformerContext._default">
            <summary>
            Instance of default bundle transformer context
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.BundleTransformerContext._current">
            <summary>
            Instance of current bundle transformer context
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.BundleTransformerContext.Current">
            <summary>
            Gets a instance of bundle transformer context
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.BundleTransformerContext.Configuration">
            <summary>
            Gets a configuration context
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.BundleTransformerContext.FileSystem">
            <summary>
            Gets a file system context
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.BundleTransformerContext.Styles">
            <summary>
            Gets a style context
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.BundleTransformerContext.Scripts">
            <summary>
            Gets a script context
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.BundleTransformerContext.IsDebugMode">
            <summary>
            Gets a flag that web application is in debug mode
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.BundleTransformerContext.#ctor">
            <summary>
            Private constructor for implementation Singleton pattern
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Combiners.CombinerBase">
            <summary>
            Base class of asset combiner
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Combiners.CombinerBase.IsDebugMode">
            <summary>
            Gets or sets a flag that web application is in debug mode
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Combiners.CombinerBase.EnableTracing">
            <summary>
            Gets or sets a flag for whether to enable tracing
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Combiners.CombinerBase.Combine(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset},System.String)">
            <summary>
            Combines a text content of assets
            </summary>
            <param name="assets">Set of assets</param>
            <param name="bundleVirtualPath">Virtual path of bundle</param>
            <returns>Combined asset</returns>
        </member>
        <member name="T:BundleTransformer.Core.Combiners.ICombiner">
            <summary>
            Defines interface of asset combiner
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Combiners.ICombiner.IsDebugMode">
            <summary>
            Gets or sets a flag that web application is in debug mode
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Combiners.ICombiner.EnableTracing">
            <summary>
            Gets or sets a flag for whether to enable tracing
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Combiners.ICombiner.Combine(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset},System.String)">
            <summary>
            Combines a text content of assets
            </summary>
            <param name="assets">Set of assets</param>
            <param name="bundleVirtualPath">Virtual path of bundle</param>
            <returns>Combined asset</returns>
        </member>
        <member name="T:BundleTransformer.Core.Combiners.ScriptCombiner">
            <summary>
            Script asset combiner
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Combiners.StyleCombiner">
            <summary>
            Style asset combiner
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Combiners.StyleCombiner._cssImportRuleRegex">
            <summary>
            Regular expression for working with CSS <code>@import</code> rules
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Combiners.StyleCombiner.EjectCssCharsetAndImports(System.String,System.String@,System.Collections.Generic.IList{System.String})">
            <summary>
            Eject a <code>@charset</code> and <code>@import</code> rules
            </summary>
            <param name="content">Text content of style asset</param>
            <param name="topCharset">Processed top <code>@charset</code> rule</param>
            <param name="imports">List of processed <code>@import</code> rules</param>
            <returns>Text content of style asset without <code>@charset</code> and <code>@import</code> rules</returns>
        </member>
        <member name="M:BundleTransformer.Core.Combiners.StyleCombiner.ProcessOtherContent(System.Text.StringBuilder,System.String,System.Int32@,System.Int32)">
            <summary>
            Process a other stylesheet content
            </summary>
            <param name="contentBuilder">Content builder</param>
            <param name="assetContent">Text content of style asset</param>
            <param name="currentPosition">Current position</param>
            <param name="nextPosition">Next position</param>
        </member>
        <member name="T:BundleTransformer.Core.CommonRegExps">
            <summary>
            Common regular expressions
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.CommonRegExps.CssMultilineCommentRegex">
            <summary>
            Regular expression for working with the CSS multiline comments
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.CommonRegExps.CssCharsetRuleRegex">
            <summary>
            Regular expression for working with CSS <code>@charset</code> rules
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.CommonRegExps.CssUrlRuleRegex">
            <summary>
            Regular expression for working with CSS <code>url</code> rule
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Configuration.AssetHandlerSettings">
            <summary>
            Configuration settings of the debugging HTTP handler, that responsible
            for text output of processed asset
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.AssetHandlerSettings.DisableServerCache">
            <summary>
            Gets or sets a flag for whether to disable storage text content of
            processed asset in server cache
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.AssetHandlerSettings.ServerCacheDurationInMinutes">
            <summary>
            Gets or sets a duration of storage the text content of processed asset in
            server cache (in minutes)
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.AssetHandlerSettings.DisableClientCache">
            <summary>
            Gets or sets a flag for whether to disable storage text content of
            processed asset in browser cache
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Configuration.AssetProcessorRegistrationBase">
            <summary>
            Configuration settings of asset processor
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.AssetProcessorRegistrationBase.Name">
            <summary>
            Gets or sets processor name
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.AssetProcessorRegistrationBase.Type">
            <summary>
            Gets or sets processor .NET type name
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Configuration.AssetSettingsBase">
            <summary>
            Configuration settings of processing assets
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.AssetSettingsBase.DefaultMinifier">
            <summary>
            Gets or sets a name of default minifier
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.AssetSettingsBase.DefaultPostProcessors">
            <summary>
            Gets or sets a ordered comma-separated list of names of default postprocessors
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.AssetSettingsBase.UsePreMinifiedFiles">
            <summary>
            Gets or sets a flag for whether to allow usage of pre-minified files
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.AssetSettingsBase.CombineFilesBeforeMinification">
            <summary>
            Gets or sets a flag for whether to allow combine files before minification
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.AssetSettingsBase.Translators">
            <summary>
            Gets a list of registered translators
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.AssetSettingsBase.PostProcessors">
            <summary>
            Gets a list of registered postprocessors
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.AssetSettingsBase.Minifiers">
            <summary>
            Gets a list of registered minifiers
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.AssetSettingsBase.FileExtensions">
            <summary>
            Gets a list of registered file extensions
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Configuration.ConfigurationContext">
            <summary>
            Defines interface of configuration context
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Configuration.ConfigurationContext._coreConfig">
            <summary>
            Configuration settings of core
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Configuration.ConfigurationContext.GetCoreSettings">
            <summary>
            Gets a core configuration settings
            </summary>
            <returns>Configuration settings of core</returns>
        </member>
        <member name="T:BundleTransformer.Core.Configuration.CoreSettings">
            <summary>
            Configuration settings of core
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.CoreSettings.EnableTracing">
            <summary>
            Gets or sets a flag for whether to enable tracing
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.CoreSettings.JsFilesWithMicrosoftStyleExtensions">
            <summary>
            Gets or sets a list of JS files with Microsoft-style extensions
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.CoreSettings.Styles">
            <summary>
            Gets a configuration settings of processing style assets
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.CoreSettings.Scripts">
            <summary>
            Gets a configuration settings of processing script assets
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.CoreSettings.AssetHandler">
            <summary>
            Gets a configuration settings of the debugging HTTP handler, that responsible
            for text output of processed asset
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Configuration.FileExtensionRegistration">
            <summary>
            File extension registration
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.FileExtensionRegistration.FileExtension">
            <summary>
            Gets or sets a file extension
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.FileExtensionRegistration.AssetTypeCode">
            <summary>
            Gets or sets a asset type code
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Configuration.FileExtensionRegistrationCollection">
            <summary>
            Collection of registered file extensions
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Configuration.FileExtensionRegistrationCollection.CreateNewElement">
            <summary>
            Creates a new file extension registration
            </summary>
            <returns>File extension registration</returns>
        </member>
        <member name="M:BundleTransformer.Core.Configuration.FileExtensionRegistrationCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets a key of the specified file extension registration
            </summary>
            <param name="element">File extension registration</param>
            <returns>Key</returns>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.FileExtensionRegistrationCollection.Item(System.String)">
            <summary>
            Gets a file extension registration by file extension
            </summary>
            <param name="name">File extension name</param>
            <returns>File extension registration</returns>
        </member>
        <member name="M:BundleTransformer.Core.Configuration.IConfigurationContext.GetCoreSettings">
            <summary>
            Gets a core configuration settings
            </summary>
            <returns>Configuration settings of core</returns>
        </member>
        <member name="T:BundleTransformer.Core.Configuration.JsEngineSettings">
            <summary>
            Configuration settings of JS engine
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.JsEngineSettings.Name">
            <summary>
            Gets or sets a JS engine name
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Configuration.MinifierRegistration">
            <summary>
            Minifier registration
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Configuration.MinifierRegistrationCollection">
            <summary>
            Collection of registered minifiers
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Configuration.MinifierRegistrationCollection.CreateNewElement">
            <summary>
            Creates a new minifier registration
            </summary>
            <returns>Minifier registration</returns>
        </member>
        <member name="M:BundleTransformer.Core.Configuration.MinifierRegistrationCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets a key of the specified minifier registration
            </summary>
            <param name="element">Minifier registration</param>
            <returns>Key</returns>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.MinifierRegistrationCollection.Item(System.String)">
            <summary>
            Gets a minifier registration by minifier name
            </summary>
            <param name="name">Minifier name</param>
            <returns>Minifier registration</returns>
        </member>
        <member name="T:BundleTransformer.Core.Configuration.PostProcessorRegistration">
            <summary>
            Postprocessor registration
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.PostProcessorRegistration.UseInDebugMode">
            <summary>
            Gets or sets a flag for whether to use postprocessor in the debugging HTTP handlers
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Configuration.PostProcessorRegistrationCollection">
            <summary>
            Collection of registered postprocessors
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Configuration.PostProcessorRegistrationCollection.CreateNewElement">
            <summary>
            Creates a new postprocessor registration
            </summary>
            <returns>Postprocessor registration</returns>
        </member>
        <member name="M:BundleTransformer.Core.Configuration.PostProcessorRegistrationCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets a key of the specified postprocessor registration
            </summary>
            <param name="element">Postprocessor registration</param>
            <returns>Key</returns>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.PostProcessorRegistrationCollection.Item(System.String)">
            <summary>
            Gets a postprocessor registration by postprocessor name
            </summary>
            <param name="name">Postprocessor name</param>
            <returns>Postprocessor registration</returns>
        </member>
        <member name="T:BundleTransformer.Core.Configuration.ScriptSettings">
            <summary>
            Configuration settings of processing script assets
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.ScriptSettings.DefaultPostProcessors">
            <summary>
            Gets or sets a ordered comma-separated list of names of default postprocessors
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Configuration.StyleSettings">
            <summary>
            Configuration settings of processing style assets
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.StyleSettings.DefaultPostProcessors">
            <summary>
            Gets or sets a ordered comma-separated list of names of default postprocessors
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Configuration.TranslatorRegistration">
            <summary>
            Translator registration
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.TranslatorRegistration.Enabled">
            <summary>
            Gets or sets a flag for whether to enable translator
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Configuration.TranslatorRegistrationCollection">
            <summary>
            Collection of registered translators
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Configuration.TranslatorRegistrationCollection.CreateNewElement">
            <summary>
            Creates a new translator registration
            </summary>
            <returns>Translator registration</returns>
        </member>
        <member name="M:BundleTransformer.Core.Configuration.TranslatorRegistrationCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets a key of the specified translator registration
            </summary>
            <param name="element">Translator registration</param>
            <returns>Key</returns>
        </member>
        <member name="P:BundleTransformer.Core.Configuration.TranslatorRegistrationCollection.Item(System.String)">
            <summary>
            Gets a translator registration by translator name
            </summary>
            <param name="name">Translator name</param>
            <returns>Translator registration</returns>
        </member>
        <member name="T:BundleTransformer.Core.Constants.AssetTypeCode">
            <summary>
            Asset type code constants
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Constants.AssetTypeCode.Unknown">
            <summary>
            Unknown asset
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Constants.AssetTypeCode.Css">
            <summary>
            CSS asset
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Constants.AssetTypeCode.JavaScript">
            <summary>
            JS asset
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Constants.Common">
            <summary>
            Common constants
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Constants.Common.TempFilesDirectoryPath">
            <summary>
            Relative path to directory that contains temporary files
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Constants.Common.ProcessedAssetContentCacheItemKeyPattern">
            <summary>
            Pattern of cache item key, which stores text content of the processed asset
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Constants.Common.BundleVirtualPathQueryStringParameterName">
            <summary>
            Name of QueryString parameter that contains the virtual path of the bundle
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Constants.ContentType">
            <summary>
            Content types constants
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Constants.ContentType.Css">
            <summary>
            CSS content type
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Constants.ContentType.Js">
            <summary>
            JS content type
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Constants.FileExtension">
            <summary>
            File extensions constants
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Constants.FileExtension.Css">
            <summary>
            CSS file extension
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Constants.FileExtension.JavaScript">
            <summary>
            JS file extension
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Constants.MinifierName">
            <summary>
            Minifier names constants
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Constants.MinifierName.NullMinifier">
            <summary>
            Name (key) of null minifier
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Constants.PostProcessorName">
            <summary>
            Postprocessor names constants
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Constants.PostProcessorName.NullPostProcessor">
            <summary>
            Name (key) of null postprocessor
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Constants.PostProcessorName.UrlRewritingCssPostProcessor">
            <summary>
            Name (key) of URL rewriting CSS postprocessor
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Constants.TranslatorName">
            <summary>
            Translator names constants
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Constants.TranslatorName.NullTranslator">
            <summary>
            Name (key) of null translator
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.CssNodeMatch">
            <summary>
            CSS node match
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.CssNodeMatch.NodeType">
            <summary>
            Gets a type of CSS node
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.CssNodeMatch.#ctor(System.Int32,System.Int32,BundleTransformer.Core.CssNodeType,System.Text.RegularExpressions.Match)">
            <summary>
            Constructs a instance of CSS node match
            </summary>
            <param name="position">Position in the original string where
            the first character of the captured substring was found</param>
            <param name="length">Length of the captured substring</param>
            <param name="nodeType">Type of CSS node</param>
            <param name="match">Single regular expression match</param>
        </member>
        <member name="T:BundleTransformer.Core.CssNodeType">
            <summary>
            CSS node types
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.CssNodeType.Unknown">
            <summary>
            Unknown node
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.CssNodeType.CharsetRule">
            <summary>
            <code>@charset</code> rule
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.CssNodeType.ImportRule">
            <summary>
            <code>@import</code> rule
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.CssNodeType.UrlRule">
            <summary>
            <code>url</code> rule
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.CssNodeType.MultilineComment">
            <summary>
            Multiline comment
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.EmptyValueException">
            <summary>
            The exception that is thrown when a specified value is null or empty
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.EmptyValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <code>BundleTransformer.Core.EmptyValueException</code> class
            with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:BundleTransformer.Core.EmptyValueException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <code>BundleTransformer.Core.EmptyValueException</code> class
            with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="T:BundleTransformer.Core.FileSystem.CommonRelativePathResolver">
            <summary>
            Common relative path resolver
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.FileSystem.CommonRelativePathResolver._virtualFileSystemWrapper">
            <summary>
            Virtual file system wrapper
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.CommonRelativePathResolver.#ctor">
            <summary>
            Constructs a instance of common relative path resolver
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.CommonRelativePathResolver.#ctor(BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper)">
            <summary>
            Constructs a instance of common relative path resolver
            </summary>
            <param name="virtualFileSystemWrapper">Virtual file system wrapper</param>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.CommonRelativePathResolver.ResolveRelativePath(System.String,System.String)">
            <summary>
            Transforms a relative path to absolute
            </summary>
            <param name="basePath">The base path</param>
            <param name="relativePath">The relative path</param>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.CommonRelativePathResolver.TryConvertToAbsolutePath(System.String,System.String@)">
            <summary>
            Converts a relative path to an absolute path.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="relativePath">The relative path</param>
            <param name="absolutePath">The absolute path</param>
            <returns>true if path was converted successfully; otherwise, false</returns>
        </member>
        <member name="T:BundleTransformer.Core.FileSystem.FileSystemContext">
            <summary>
            Defines interface of file system context
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.FileSystem.FileSystemContext._virtualFileSystemWrapper">
            <summary>
            Virtual file system wrapper
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.FileSystem.FileSystemContext._commonRelativePathResolver">
            <summary>
            Common relative path resolver
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.FileSystemContext.GetVirtualFileSystemWrapper">
            <summary>
            Gets a instance of the virtual file system wrapper
            </summary>
            <returns>Virtual file system wrapper</returns>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.FileSystemContext.GetCommonRelativePathResolver">
            <summary>
            Gets a instance of the common relative path resolver
            </summary>
            <returns>Common relative path resolver</returns>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.IFileSystemContext.GetVirtualFileSystemWrapper">
            <summary>
            Gets a instance of the virtual file system wrapper
            </summary>
            <returns>Virtual file system wrapper</returns>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.IFileSystemContext.GetCommonRelativePathResolver">
            <summary>
            Gets a instance of the common relative path resolver
            </summary>
            <returns>Common relative path resolver</returns>
        </member>
        <member name="T:BundleTransformer.Core.FileSystem.IRelativePathResolver">
            <summary>
            Defines interface of relative path resolver
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.IRelativePathResolver.ResolveRelativePath(System.String,System.String)">
            <summary>
            Transforms relative path to absolute
            </summary>
            <param name="basePath">The base path</param>
            <param name="relativePath">The relative path</param>
        </member>
        <member name="T:BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper">
            <summary>
            Defines interface of virtual file system wrapper
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper.FileExists(System.String)">
            <summary>
            Gets a value that indicates whether a file exists in the virtual file system
            </summary>
            <param name="virtualPath">The path to the virtual file</param>
            <returns>Result of checking (true – exist; false – not exist)</returns>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper.GetFileTextContent(System.String)">
            <summary>
            Gets a text content of the specified file
            </summary>
            <param name="virtualPath">The path to the virtual file</param>
            <returns>Text content</returns>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper.GetFileBinaryContent(System.String)">
            <summary>
            Gets a binary content of the specified file
            </summary>
            <param name="virtualPath">The path to the virtual file</param>
            <returns>Binary content</returns>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper.GetFileStream(System.String)">
            <summary>
            Gets a file stream
            </summary>
            <param name="virtualPath">The path to the virtual file</param>
            <returns>File stream</returns>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper.ToAbsolutePath(System.String)">
            <summary>
            Converts a virtual path to an application absolute path
            </summary>
            <param name="virtualPath">The virtual path to convert to an application-relative path</param>
            <returns>The absolute path representation of the specified virtual path</returns>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper.GetCacheKey(System.String)">
            <summary>
            Returns a cache key to use for the specified virtual path
            </summary>
            <param name="virtualPath">The path to the virtual resource</param>
            <returns>A cache key for the specified virtual resource</returns>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper.GetCacheDependency(System.String,System.String[],System.DateTime)">
            <summary>
            Creates a cache dependency based on the specified virtual paths
            </summary>
            <param name="virtualPath">The path to the primary virtual resource</param>
            <param name="virtualPathDependencies">An array of paths to other resources required by the primary virtual resource</param>
            <param name="utcStart">The UTC time at which the virtual resources were read</param>
            <returns>A System.Web.Caching.CacheDependency object for the specified virtual resources</returns>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper.IsTextFile(System.String,System.Int32,System.Text.Encoding@)">
            <summary>
            Detect if a file is text and detect the encoding
            </summary>
            <param name="virtualPath">The path to the virtual file</param>
            <param name="sampleSize">Number of characters to use for testing</param>
            <param name="encoding">Detected encoding</param>
            <returns>Result of check (true - is text; false - is binary)</returns>
        </member>
        <member name="T:BundleTransformer.Core.FileSystem.VirtualFileSystemWrapper">
            <summary>
            Virtual file system wrapper
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.VirtualFileSystemWrapper.FileExists(System.String)">
            <summary>
            Gets a value that indicates whether a file exists in the virtual file system
            </summary>
            <param name="virtualPath">The path to the virtual file</param>
            <returns>Result of checking (true – exist; false – not exist)</returns>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.VirtualFileSystemWrapper.GetFileTextContent(System.String)">
            <summary>
            Gets a text content of the specified file
            </summary>
            <param name="virtualPath">The path to the virtual file</param>
            <returns>Text content</returns>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.VirtualFileSystemWrapper.GetFileBinaryContent(System.String)">
            <summary>
            Gets a binary content of the specified file
            </summary>
            <param name="virtualPath">The path to the virtual file</param>
            <returns>Binary content</returns>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.VirtualFileSystemWrapper.GetFileStream(System.String)">
            <summary>
            Gets a file stream
            </summary>
            <param name="virtualPath">The path to the virtual file</param>
            <returns>File stream</returns>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.VirtualFileSystemWrapper.ToAbsolutePath(System.String)">
            <summary>
            Converts a virtual path to an application absolute path
            </summary>
            <param name="virtualPath">The virtual path to convert to an application-relative path</param>
            <returns>The absolute path representation of the specified virtual path</returns>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.VirtualFileSystemWrapper.GetCacheKey(System.String)">
            <summary>
            Returns a cache key to use for the specified virtual path
            </summary>
            <param name="virtualPath">The path to the virtual resource</param>
            <returns>A cache key for the specified virtual resource</returns>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.VirtualFileSystemWrapper.GetCacheDependency(System.String,System.String[],System.DateTime)">
            <summary>
            Creates a cache dependency based on the specified virtual paths
            </summary>
            <param name="virtualPath">The path to the primary virtual resource</param>
            <param name="virtualPathDependencies">An array of paths to other resources required by the primary virtual resource</param>
            <param name="utcStart">The UTC time at which the virtual resources were read</param>
            <returns>A System.Web.Caching.CacheDependency object for the specified virtual resources</returns>
        </member>
        <member name="M:BundleTransformer.Core.FileSystem.VirtualFileSystemWrapper.IsTextFile(System.String,System.Int32,System.Text.Encoding@)">
            <summary>
            Detect if a file is text and detect the encoding
            </summary>
            <param name="virtualPath">The path to the virtual file</param>
            <param name="sampleSize">Number of characters to use for testing</param>
            <param name="encoding">Detected encoding</param>
            <returns>Result of check (true - is text; false - is binary)</returns>
        </member>
        <member name="T:BundleTransformer.Core.Filters.CssFileExtensionsFilter">
            <summary>
            Filter that responsible for choosing appropriate version
            of CSS file, depending on current mode of
            web application (debug mode - debug versions of CSS asset files;
            release mode - minified versions)
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Filters.CssFileExtensionsFilter._debugCssExtensions">
            <summary>
            Extensions of CSS files for debug mode
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Filters.CssFileExtensionsFilter._releaseCssExtensions">
            <summary>
            Extensions of CSS files for release mode
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Filters.CssFileExtensionsFilter.#ctor">
            <summary>
            Constructs a instance of CSS file extensions filter
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Filters.CssFileExtensionsFilter.#ctor(BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper)">
            <summary>
            Constructs a instance of CSS file extensions filter
            </summary>
            <param name="virtualFileSystemWrapper">Virtual file system wrapper</param>
        </member>
        <member name="M:BundleTransformer.Core.Filters.CssFileExtensionsFilter.Transform(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Chooses a appropriate versions of CSS files, depending on
            current mode of web application
            </summary>
            <param name="assets">Set of CSS assets</param>
            <returns>Set of CSS assets adapted for current mode of web application</returns>
        </member>
        <member name="M:BundleTransformer.Core.Filters.CssFileExtensionsFilter.GetAppropriateAssetFilePath(System.String,System.Boolean@)">
            <summary>
            Gets a version of CSS file virtual path, most appropriate for
            current mode of web application
            </summary>
            <param name="assetVirtualPath">CSS asset virtual file path</param>
            <param name="isMinified">Flag indicating what appropriate
            virtual file path version of CSS asset is minified</param>
            <returns>Virtual path to CSS file, corresponding current mode
            of web application</returns>
        </member>
        <member name="T:BundleTransformer.Core.Filters.FileExtensionsFilterBase">
            <summary>
            Base class of filter is responsible for choosing appropriate
            version of asset file, depending on current mode of
            web application (debug mode - debug versions of asset files;
            release mode - minified versions)
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Filters.FileExtensionsFilterBase._virtualFileSystemWrapper">
            <summary>
            Virtual file system wrapper
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Filters.FileExtensionsFilterBase.IsDebugMode">
            <summary>
            Gets or sets a flag that web application is in debug mode
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Filters.FileExtensionsFilterBase.UsePreMinifiedFiles">
            <summary>
            Gets or sets a flag for whether to allow usage of pre-minified files
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Filters.FileExtensionsFilterBase.UsageOfPreMinifiedFilesEnabled">
            <summary>
            Gets a flag that indicating to use of pre-minified files
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Filters.FileExtensionsFilterBase.#ctor(BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper)">
            <summary>
            Constructs a instance of the file extensions filter
            </summary>
            <param name="virtualFileSystemWrapper">Virtual file system wrapper</param>
        </member>
        <member name="M:BundleTransformer.Core.Filters.FileExtensionsFilterBase.Transform(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Chooses a appropriate versions of files, depending on
            current mode of web application
            </summary>
            <param name="assets">Set of assets</param>
            <returns>Set of assets adapted for current mode of web application</returns>
        </member>
        <member name="M:BundleTransformer.Core.Filters.FileExtensionsFilterBase.GetAppropriateAssetFilePath(System.String,System.Boolean@)">
            <summary>
            Gets a version of virtual file path, most appropriate for
            current mode of web application
            </summary>
            <param name="assetVirtualPath">Asset virtual file path</param>
            <param name="isMinified">Flag indicating what appropriate
            virtual file path version of asset is minified</param>
            <returns>Path to file, corresponding current mode
            of web application</returns>
        </member>
        <member name="M:BundleTransformer.Core.Filters.FileExtensionsFilterBase.ProbeAssetFilePath(System.String,System.String[])">
            <summary>
            Gets a appropriate version of asset virtual file path based
            on list of file extensions
            </summary>
            <param name="assetVirtualPath">Asset virtual file path</param>
            <param name="extensions">List of file extensions</param>
            <returns>Asset virtual file path with modified extension</returns>
        </member>
        <member name="T:BundleTransformer.Core.Filters.IFilter">
            <summary>
            Defines interface of asset filter
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Filters.IFilter.Transform(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Performs processing of assets
            </summary>
            <param name="assets">Set of assets</param>
            <returns>Set of processed assets</returns>
        </member>
        <member name="T:BundleTransformer.Core.Filters.JsFileExtensionsFilter">
            <summary>
            Filter that responsible for choosing appropriate version
            of JS file, depending on current mode of
            web application (debug mode - debug versions of JS asset files;
            release mode - minified versions)
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Filters.JsFileExtensionsFilter.VERSION_NUMBER_PLACEHOLDER">
            <summary>
            Version number placeholder
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Filters.JsFileExtensionsFilter._jsFilesWithMsStyleExtensionsRegExps">
            <summary>
            List of regular expressions of JS files with Microsoft-style extensions
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Filters.JsFileExtensionsFilter._debugJsExtensionsForStandardStyle">
            <summary>
            Extensions of JS files for debug mode (standard style)
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Filters.JsFileExtensionsFilter._releaseJsExtensionsForStandardStyle">
            <summary>
            Extensions of JS files for release mode (standard style)
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Filters.JsFileExtensionsFilter._debugJsExtensionsForMicrosoftStyle">
            <summary>
            Extensions of JS files for debug mode (Microsoft style)
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Filters.JsFileExtensionsFilter._releaseJsExtensionsForMicrosoftStyle">
            <summary>
            Extensions of JS files for release mode (Microsoft style)
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Filters.JsFileExtensionsFilter.#ctor(System.String[])">
            <summary>
            Constructs a instance of JS file extensions filter
            </summary>
            <param name="jsFilesWithMsStyleExtensions">JS files with Microsoft-style extensions list</param>
        </member>
        <member name="M:BundleTransformer.Core.Filters.JsFileExtensionsFilter.#ctor(System.String[],BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper)">
            <summary>
            Constructs a instance of JS file extensions filter
            </summary>
            <param name="jsFilesWithMsStyleExtensions">JS files with Microsoft-style extensions list</param>
            <param name="virtualFileSystemWrapper">Virtual file system wrapper</param>
        </member>
        <member name="M:BundleTransformer.Core.Filters.JsFileExtensionsFilter.Transform(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Chooses a appropriate versions of JS files, depending on
            current mode of web application
            </summary>
            <param name="assets">Set of JS assets</param>
            <returns>Set of JS assets adapted for current mode of web application</returns>
        </member>
        <member name="M:BundleTransformer.Core.Filters.JsFileExtensionsFilter.GetAppropriateAssetFilePath(System.String,System.Boolean@)">
            <summary>
            Gets a version of JS file virtual path, most appropriate for
            current mode of web application
            </summary>
            <param name="assetVirtualPath">JS asset file virtual path</param>
            <param name="isMinified">Flag indicating what appropriate
            virtual file path version of JS asset is minified</param>
            <returns>Virtual path to JS file, corresponding current mode
            of web application</returns>
        </member>
        <member name="M:BundleTransformer.Core.Filters.JsFileExtensionsFilter.IsJsFileWithMicrosoftStyleExtension(System.String)">
            <summary>
            Checks a existance of specified JS file in list of
            JS files that have extensions in Microsoft-style
            </summary>
            <param name="assetVirtualPath">JS asset virtual file path</param>
            <returns>Checking result (true – exist; false – not exist)</returns>
        </member>
        <member name="T:BundleTransformer.Core.Filters.ScriptDuplicateAssetsFilter">
            <summary>
            Filter that responsible for removal of duplicate script assets
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Filters.ScriptDuplicateAssetsFilter.Transform(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Removes a duplicate script assets
            </summary>
            <param name="assets">Set of script assets</param>
            <returns>Set of unique script assets</returns>
        </member>
        <member name="T:BundleTransformer.Core.Filters.ScriptUnnecessaryAssetsFilter">
            <summary>
            Filter that responsible for removal of unnecessary script assets
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Filters.ScriptUnnecessaryAssetsFilter.#ctor(System.String[])">
            <summary>
            Constructs a instance of unnecessary script assets filter
            </summary>
            <param name="ignorePatterns">List of patterns of files and directories that
            should be ignored when processing</param>
        </member>
        <member name="M:BundleTransformer.Core.Filters.ScriptUnnecessaryAssetsFilter.Transform(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Removes a unnecessary script assets
            </summary>
            <param name="assets">Set of script assets</param>
            <returns>Set of necessary script assets</returns>
        </member>
        <member name="T:BundleTransformer.Core.Filters.StyleDuplicateAssetsFilter">
            <summary>
            Filter that responsible for removal of duplicate style assets
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Filters.StyleDuplicateAssetsFilter.Transform(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Removes a duplicate style assets
            </summary>
            <param name="assets">Set of style assets</param>
            <returns>Set of unique style assets</returns>
        </member>
        <member name="T:BundleTransformer.Core.Filters.StyleUnnecessaryAssetsFilter">
            <summary>
            Filter that responsible for removal of unnecessary style assets
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Filters.StyleUnnecessaryAssetsFilter.#ctor(System.String[])">
            <summary>
            Constructs a instance of unnecessary style assets filter
            </summary>
            <param name="ignorePatterns">List of patterns of files and directories that
            should be ignored when processing</param>
        </member>
        <member name="M:BundleTransformer.Core.Filters.StyleUnnecessaryAssetsFilter.Transform(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Removes a unnecessary style assets
            </summary>
            <param name="assets">Set of style assets</param>
            <returns>Set of necessary style assets</returns>
        </member>
        <member name="T:BundleTransformer.Core.Filters.UnnecessaryAssetsFilterBase">
            <summary>
            Base class of filter is responsible for removal of unnecessary assets
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Filters.UnnecessaryAssetsFilterBase._ignoreRegExps">
            <summary>
            List of regular expressions of files and directories that
            should be ignored when processing
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Filters.UnnecessaryAssetsFilterBase.#ctor(System.String[])">
            <summary>
            Constructs a instance of unnecessary assets filter
            </summary>
            <param name="ignorePatterns">List of patterns of files and directories that
            should be ignored when processing</param>
        </member>
        <member name="M:BundleTransformer.Core.Filters.UnnecessaryAssetsFilterBase.Transform(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Removes a unnecessary assets
            </summary>
            <param name="assets">Set of assets</param>
            <returns>Set of necessary assets</returns>
        </member>
        <member name="M:BundleTransformer.Core.Filters.UnnecessaryAssetsFilterBase.IsUnnecessaryAsset(System.String)">
            <summary>
            Checks a whether asset is unnecessary
            </summary>
            <param name="assetVirtualPath">Asset virtual file path</param>
            <returns>Checking result (true - unnecessary; false - necessary)</returns>
        </member>
        <member name="T:BundleTransformer.Core.Helpers.UrlHelpers">
            <summary>
            URL helpers
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Helpers.UrlHelpers._protocolRegExp">
            <summary>
            Regular expression for determine protocol in URL
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Helpers.UrlHelpers._multipleForwardSlashesRegex">
            <summary>
            Regular expression for working with multiple forward slashes
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Helpers.UrlHelpers.StartsWithProtocol(System.String)">
            <summary>
            Determines whether the beginning of this url matches the protocol
            </summary>
            <param name="url">URL</param>
            <returns>Result of check (true - is starts with the protocol;
            false - is not starts with the protocol)</returns>
        </member>
        <member name="M:BundleTransformer.Core.Helpers.UrlHelpers.StartsWithDataUriScheme(System.String)">
            <summary>
            Determines whether the beginning of this url matches the data URI scheme
            </summary>
            <param name="url">URL</param>
            <returns>Result of check (true - is starts with the data URI scheme;
            false - is not starts with the data URI scheme)</returns>
        </member>
        <member name="M:BundleTransformer.Core.Helpers.UrlHelpers.ProcessBackSlashes(System.String)">
            <summary>
            Converts a back slashes to forward slashes
            </summary>
            <param name="url">URL with back slashes</param>
            <returns>URL with forward slashes</returns>
        </member>
        <member name="M:BundleTransformer.Core.Helpers.UrlHelpers.RemoveFirstSlash(System.String)">
            <summary>
            Removes a first slash from URL
            </summary>
            <param name="url">URL</param>
            <returns>URL without the first slash</returns>
        </member>
        <member name="M:BundleTransformer.Core.Helpers.UrlHelpers.RemoveLastSlash(System.String)">
            <summary>
            Removes a last slash from URL
            </summary>
            <param name="url">URL</param>
            <returns>URL without the last slash</returns>
        </member>
        <member name="M:BundleTransformer.Core.Helpers.UrlHelpers.FindLastDirectorySeparator(System.String)">
            <summary>
            Finds a last directory seperator
            </summary>
            <param name="url">URL</param>
            <returns>Position of last directory seperator</returns>
        </member>
        <member name="M:BundleTransformer.Core.Helpers.UrlHelpers.GetDirectoryName(System.String)">
            <summary>
            Gets a directory name for the specified URL
            </summary>
            <param name="url">URL</param>
            <returns>The string containing directory name for URL</returns>
        </member>
        <member name="M:BundleTransformer.Core.Helpers.UrlHelpers.GetFileName(System.String)">
            <summary>
            Gets a file name and extension of the specified URL
            </summary>
            <param name="url">URL</param>
            <returns>The consisting of the characters after the last directory character in URL</returns>
        </member>
        <member name="M:BundleTransformer.Core.Helpers.UrlHelpers.Normalize(System.String)">
            <summary>
            Normalizes a URL
            </summary>
            <param name="url">URL</param>
            <returns>Normalized URL</returns>
        </member>
        <member name="M:BundleTransformer.Core.Helpers.UrlHelpers.Combine(System.String,System.String)">
            <summary>
            Combines a two URLs
            </summary>
            <param name="baseUrl">The base URL</param>
            <param name="relativeUrl">The relative URL to add to the base URL</param>
            <returns>The absolute URL</returns>
        </member>
        <member name="M:BundleTransformer.Core.Helpers.UrlHelpers.EscapeLongDataString(System.String)">
            <summary>
            Converts a long string (more than 65 519 characters) to its escaped representation
            </summary>
            <param name="stringToEscape">The long string to escape</param>
            <returns>Escaped representation of long string</returns>
        </member>
        <member name="T:BundleTransformer.Core.HttpHandlers.AssetHandlerBase">
            <summary>
            Base class of the debugging HTTP handler that responsible for text output
            of processed asset
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.HttpHandlers.AssetHandlerBase._context">
            <summary>
            HTTP context
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.HttpHandlers.AssetHandlerBase._cache">
            <summary>
            Server cache
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.HttpHandlers.AssetHandlerBase._cacheSynchronizer">
            <summary>
            Synchronizer of requests to server cache
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.HttpHandlers.AssetHandlerBase._virtualFileSystemWrapper">
            <summary>
            Virtual file system wrapper
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.HttpHandlers.AssetHandlerBase._assetHandlerConfig">
            <summary>
            Configuration settings of the debugging HTTP handler
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.HttpHandlers.AssetHandlerBase._staticFileHandler">
            <summary>
            Static file handler
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.ContentType">
            <summary>
            Gets a asset content type
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.IsStaticAsset">
            <summary>
            Gets a value indicating whether asset is static
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the instance of HTTP handler
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.#ctor(System.Web.Caching.Cache,BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper,BundleTransformer.Core.Configuration.AssetHandlerSettings)">
            <summary>
            Constructs a instance of the debugging HTTP handler
            </summary>
            <param name="cache">Server cache</param>
            <param name="virtualFileSystemWrapper">Virtual file system wrapper</param>
            <param name="assetHandlerConfig">Configuration settings of the debugging HTTP handler</param>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.ProcessStaticAssetRequest(System.Web.HttpContextBase)">
            <summary>
            Process a request of static asset
            </summary>
            <param name="context">HTTP context</param>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.CreateStaticFileHandlerInstance">
            <summary>
            Creates a instance of static file handler
            </summary>
            <returns>Instance of static file handler</returns>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.GetCacheKey(System.String,System.String)">
            <summary>
            Gets a cache key
            </summary>
            <param name="assetVirtualPath">Virtual path of asset</param>
            <param name="bundleVirtualPath">Virtual path of bundle</param>
            <returns>Cache key for specified asset</returns>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.GetProcessedAssetContent(System.String,System.String)">
            <summary>
            Gets a processed asset content
            </summary>
            <param name="assetVirtualPath">Virtual path of asset</param>
            <param name="bundleVirtualPath">Virtual path of bundle</param>
            <returns>Text content of asset</returns>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.GenerateAssetETag(System.String)">
            <summary>
            Generates a value for HTTP header "ETag" based on
            information about processed asset
            </summary>
            <param name="assetContent">Text content of asset</param>
            <returns>ETag value</returns>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.CreateHashAlgorithm">
            <summary>
            Creates a hash algorithm
            </summary>
            <returns>Hash algorithm</returns>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.IsETagHeaderChanged(System.Web.HttpRequestBase,System.String)">
            <summary>
            Checks a actuality of data in browser cache using
            HTTP header "ETag"
            </summary>
            <param name="request">HttpRequest object</param>
            <param name="eTag">ETag value</param>
            <returns>Result of checking (true – data has changed; false – has not changed)</returns>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.ProcessAsset(System.String,System.String)">
            <summary>
            Process a asset
            </summary>
            <param name="assetVirtualPath">Virtual path of asset</param>
            <param name="bundleVirtualPath">Virtual path of bundle</param>
            <returns>Processed asset</returns>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.GetBundleByVirtualPath(System.String)">
            <summary>
            Gets a bundle by virtual path
            </summary>
            <param name="virtualPath">Virtual path</param>
            <returns>Bundle</returns>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.GetBundleFileByVirtualPath(System.Web.Optimization.Bundle,System.String)">
            <summary>
            Gets a bundle file by virtual path
            </summary>
            <param name="bundle">Bundle</param>
            <param name="virtualPath">Virtual path</param>
            <returns>Bundle</returns>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.RemoveAdditionalFileExtension(System.String)">
            <summary>
            Removes a additional file extension from path of specified asset
            </summary>
            <param name="assetPath">Path of asset</param>
            <returns>Path of asset without additional file extension</returns>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.GetTransformer(System.Web.Optimization.Bundle)">
            <summary>
            Gets a transformer from bundle
            </summary>
            <param name="bundle">Bundle</param>
            <returns>Transformer</returns>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.TranslateAsset(BundleTransformer.Core.Assets.IAsset,BundleTransformer.Core.Transformers.ITransformer,System.Boolean)">
            <summary>
            Translates a code of asset written on intermediate language
            </summary>
            <param name="asset">Asset</param>
            <param name="transformer">Transformer</param>
            <param name="isDebugMode">Flag that web application is in debug mode</param>
            <returns>Translated asset</returns>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.InnerTranslateAsset``1(System.String,BundleTransformer.Core.Assets.IAsset,BundleTransformer.Core.Transformers.ITransformer,System.Boolean)">
            <summary>
            Helper method to facilitate a translation of asset
            </summary>
            <typeparam name="T">Type of translator</typeparam>
            <param name="translatorName">Name of translator</param>
            <param name="asset">Asset</param>
            <param name="transformer">Transformer</param>
            <param name="isDebugMode">Flag that web application is in debug mode</param>
            <returns>Translated asset</returns>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.GetTranslatorByName``1(System.String)">
            <summary>
            Gets a translator by name
            </summary>
            <typeparam name="T">Type of translator</typeparam>
            <param name="translatorName">Name of translator</param>
            <returns>Translator</returns>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.GetTranslatorByType``1(BundleTransformer.Core.Transformers.ITransformer)">
            <summary>
            Gets a translator by type from transformer
            </summary>
            <typeparam name="T">Type of translator</typeparam>
            <param name="transformer">Transformer</param>
            <returns>Translator</returns>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.AssetHandlerBase.PostProcessAsset(BundleTransformer.Core.Assets.IAsset,BundleTransformer.Core.Transformers.ITransformer)">
            <summary>
            Postprocess a text content of asset
            </summary>
            <param name="asset">Asset</param>
            <param name="transformer">Transformer</param>
            <returns>Postprocessed asset</returns>
        </member>
        <member name="T:BundleTransformer.Core.HttpHandlers.CssAssetHandler">
            <summary>
            Debugging HTTP handler that responsible for text output
            of translated CSS asset
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.HttpHandlers.CssAssetHandler.IsStaticAsset">
            <summary>
            Gets a value indicating whether asset is static
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.CssAssetHandler.#ctor">
            <summary>
            Constructs a instance of the debugging CSS HTTP handler
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.CssAssetHandler.#ctor(System.Web.Caching.Cache,BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper,BundleTransformer.Core.Configuration.AssetHandlerSettings)">
            <summary>
            Constructs a instance of the debugging CSS HTTP handler
            </summary>
            <param name="cache">Server cache</param>
            <param name="virtualFileSystemWrapper">Virtual file system wrapper</param>
            <param name="assetHandlerConfig">Configuration settings of the debugging HTTP handler</param>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.CssAssetHandler.RemoveAdditionalFileExtension(System.String)">
            <summary>
            Removes a additional file extension from path of specified CSS asset
            </summary>
            <param name="assetPath">Path of CSS asset</param>
            <returns>Path of CSS asset without additional file extension</returns>
        </member>
        <member name="T:BundleTransformer.Core.HttpHandlers.JsAssetHandler">
            <summary>
            Debugging HTTP handler that responsible for text output
            of translated JS asset
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.HttpHandlers.JsAssetHandler.IsStaticAsset">
            <summary>
            Gets a value indicating whether asset is static
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.JsAssetHandler.#ctor">
            <summary>
            Constructs a instance of the debugging JS HTTP handler
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.JsAssetHandler.#ctor(System.Web.Caching.Cache,BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper,BundleTransformer.Core.Configuration.AssetHandlerSettings)">
            <summary>
            Constructs a instance of the debugging JS HTTP handler
            </summary>
            <param name="cache">Server cache</param>
            <param name="virtualFileSystemWrapper">Virtual file system wrapper</param>
            <param name="assetHandlerConfig">Configuration settings of the debugging HTTP handler</param>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.JsAssetHandler.RemoveAdditionalFileExtension(System.String)">
            <summary>
            Removes a additional file extension from path of specified JS asset
            </summary>
            <param name="assetPath">Path of JS asset</param>
            <returns>Path of JS asset without additional file extension</returns>
        </member>
        <member name="T:BundleTransformer.Core.HttpHandlers.ScriptAssetHandlerBase">
            <summary>
            Base class of the debugging HTTP handler that responsible for text output
            of processed script asset
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.HttpHandlers.ScriptAssetHandlerBase.ContentType">
            <summary>
            Gets a asset content type
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.ScriptAssetHandlerBase.#ctor(System.Web.Caching.Cache,BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper,BundleTransformer.Core.Configuration.AssetHandlerSettings)">
            <summary>
            Constructs a instance of the debugging script HTTP handler
            </summary>
            <param name="cache">Server cache</param>
            <param name="virtualFileSystemWrapper">Virtual file system wrapper</param>
            <param name="assetHandlerConfig">Configuration settings of the debugging HTTP handler</param>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.ScriptAssetHandlerBase.GetTransformer(System.Web.Optimization.Bundle)">
            <summary>
            Gets a JS transformer from bundle
            </summary>
            <param name="bundle">Bundle</param>
            <returns>JS transformer</returns>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.ScriptAssetHandlerBase.GetTranslatorByName``1(System.String)">
            <summary>
            Gets a translator by name
            </summary>
            <typeparam name="T">Type of translator</typeparam>
            <param name="translatorName">Name of translator</param>
            <returns>Translator</returns>
        </member>
        <member name="T:BundleTransformer.Core.HttpHandlers.StyleAssetHandlerBase">
            <summary>
            Base class of the debugging HTTP handler that responsible for text output
            of processed style asset
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.HttpHandlers.StyleAssetHandlerBase.ContentType">
            <summary>
            Gets a asset content type
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.StyleAssetHandlerBase.#ctor(System.Web.Caching.Cache,BundleTransformer.Core.FileSystem.IVirtualFileSystemWrapper,BundleTransformer.Core.Configuration.AssetHandlerSettings)">
            <summary>
            Constructs a instance of the debugging style HTTP handler
            </summary>
            <param name="cache">Server cache</param>
            <param name="virtualFileSystemWrapper">Virtual file system wrapper</param>
            <param name="assetHandlerConfig">Configuration settings of the debugging HTTP handler</param>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.StyleAssetHandlerBase.GetTransformer(System.Web.Optimization.Bundle)">
            <summary>
            Gets a CSS transformer from bundle
            </summary>
            <param name="bundle">Bundle</param>
            <returns>CSS transformer</returns>
        </member>
        <member name="M:BundleTransformer.Core.HttpHandlers.StyleAssetHandlerBase.GetTranslatorByName``1(System.String)">
            <summary>
            Gets a translator by name
            </summary>
            <typeparam name="T">Type of translator</typeparam>
            <param name="translatorName">Name of translator</param>
            <returns>Translator</returns>
        </member>
        <member name="T:BundleTransformer.Core.IBundleTransformerContext">
            <summary>
            Defines interface of bundle transformer context
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.IBundleTransformerContext.Configuration">
            <summary>
            Gets a configuration context
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.IBundleTransformerContext.FileSystem">
            <summary>
            Gets a file system context
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.IBundleTransformerContext.Styles">
            <summary>
            Gets a style context
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.IBundleTransformerContext.Scripts">
            <summary>
            Gets a script context
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.IBundleTransformerContext.IsDebugMode">
            <summary>
            Gets a flag that web application is in debug mode
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Minifiers.AssetMinificationException">
            <summary>
            The exception that is thrown when a minification of asset code is failed
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Minifiers.AssetMinificationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <code>BundleTransformer.Core.Minifiers.AssetMinificationException</code> class
            with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:BundleTransformer.Core.Minifiers.AssetMinificationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <code>BundleTransformer.Core.Minifiers.AssetMinificationException</code> class
            with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="T:BundleTransformer.Core.Minifiers.IMinifier">
            <summary>
            Defines a interface of asset minifier
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Minifiers.IMinifier.Minify(BundleTransformer.Core.Assets.IAsset)">
            <summary>
            Minify a text content of asset
            </summary>
            <param name="asset">Asset</param>
            <returns>Asset with minified text content</returns>
        </member>
        <member name="M:BundleTransformer.Core.Minifiers.IMinifier.Minify(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Minify a text content of assets
            </summary>
            <param name="assets">Set of assets</param>
            <returns>Set of assets with minified text content</returns>
        </member>
        <member name="T:BundleTransformer.Core.Minifiers.MinifierNotFoundException">
            <summary>
            The exception that is thrown when a minifier is not found
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Minifiers.MinifierNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <code>BundleTransformer.Core.Minifiers.MinifierNotFoundException</code> class
            with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:BundleTransformer.Core.Minifiers.MinifierNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <code>BundleTransformer.Core.Minifiers.MinifierNotFoundException</code> class
            with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="T:BundleTransformer.Core.Minifiers.NullMinifier">
            <summary>
            Null minifier (used as a placeholder)
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Minifiers.NullMinifier.Minify(BundleTransformer.Core.Assets.IAsset)">
            <summary>
            Do not performs operations with asset
            </summary>
            <param name="asset">Asset</param>
            <returns>Asset</returns>
        </member>
        <member name="M:BundleTransformer.Core.Minifiers.NullMinifier.Minify(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Do not performs operations with assets
            </summary>
            <param name="assets">Set of assets</param>
            <returns>Set of assets</returns>
        </member>
        <member name="T:BundleTransformer.Core.Orderers.NullOrderer">
            <summary>
            Orderer that responsible for sorting of the files in declarative order
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Orderers.NullOrderer.OrderFiles(System.Web.Optimization.BundleContext,System.Collections.Generic.IEnumerable{System.Web.Optimization.BundleFile})">
            <summary>
            Sorts a files in declarative order
            </summary>
            <param name="context">Object BundleContext</param>
            <param name="files">List of files</param>
            <returns>Sorted list of files</returns>
        </member>
        <member name="T:BundleTransformer.Core.PostProcessors.AssetPostProcessingException">
            <summary>
            The exception that is thrown when a postprocessing of asset code is failed
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.PostProcessors.AssetPostProcessingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <code>BundleTransformer.Core.PostProcessors.AssetPostProcessingException</code> class
            with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:BundleTransformer.Core.PostProcessors.AssetPostProcessingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <code>BundleTransformer.Core.PostProcessors.AssetPostProcessingException</code> class
            with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="T:BundleTransformer.Core.PostProcessors.IPostProcessor">
            <summary>
            Defines interface of asset postprocessor (runs after translators and before minifiers)
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.PostProcessors.IPostProcessor.UseInDebugMode">
            <summary>
            Gets or sets a flag for whether to use postprocessor in the debugging HTTP handlers
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.PostProcessors.IPostProcessor.PostProcess(BundleTransformer.Core.Assets.IAsset)">
            <summary>
            Postprocess a text content of asset
            </summary>
            <param name="asset">Asset</param>
            <returns>Asset with processed text content</returns>
        </member>
        <member name="M:BundleTransformer.Core.PostProcessors.IPostProcessor.PostProcess(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Postprocess a text content of assets
            </summary>
            <param name="assets">Set of assets</param>
            <returns>Set of assets with processed code</returns>
        </member>
        <member name="T:BundleTransformer.Core.PostProcessors.NullPostProcessor">
            <summary>
            Null postprocessor (used as a placeholder)
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.PostProcessors.NullPostProcessor.PostProcess(BundleTransformer.Core.Assets.IAsset)">
            <summary>
            Do not performs operations with asset
            </summary>
            <param name="asset">Asset</param>
            <returns>Asset</returns>
        </member>
        <member name="M:BundleTransformer.Core.PostProcessors.NullPostProcessor.PostProcess(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Do not performs operations with assets
            </summary>
            <param name="assets">Set of assets</param>
            <returns>Set of assets</returns>
        </member>
        <member name="T:BundleTransformer.Core.PostProcessors.PostProcessorBase">
            <summary>
            Base class of asset postprocessor (runs after translators and before minifiers)
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.PostProcessors.PostProcessorBase.UseInDebugMode">
            <summary>
            Gets or sets a flag for whether to use postprocessor in the debugging HTTP handlers
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.PostProcessors.PostProcessorBase.PostProcess(BundleTransformer.Core.Assets.IAsset)">
            <summary>
            Postprocess a text content of asset
            </summary>
            <param name="asset">Asset</param>
            <returns>Asset with processed text content</returns>
        </member>
        <member name="M:BundleTransformer.Core.PostProcessors.PostProcessorBase.PostProcess(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Postprocess a text content of assets
            </summary>
            <param name="assets">Set of assets</param>
            <returns>Set of assets with processed code</returns>
        </member>
        <member name="T:BundleTransformer.Core.PostProcessors.PostProcessorNotFoundException">
            <summary>
            The exception that is thrown when a postprocessor is not found
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.PostProcessors.PostProcessorNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <code>BundleTransformer.Core.PostProcessors.PostProcessorNotFoundException</code> class
            with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:BundleTransformer.Core.PostProcessors.PostProcessorNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <code>BundleTransformer.Core.PostProcessors.PostProcessorNotFoundException</code> class
            with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="T:BundleTransformer.Core.PostProcessors.UrlRewritingCssPostProcessor">
            <summary>
            Postprocessor that responsible for transformation of relative
            paths in CSS files to absolute
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.PostProcessors.UrlRewritingCssPostProcessor._relativePathResolver">
            <summary>
            Relative path resolver
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.PostProcessors.UrlRewritingCssPostProcessor._cssImportRuleRegex">
            <summary>
            Regular expression for working with CSS <code>@import</code> rules
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.PostProcessors.UrlRewritingCssPostProcessor.#ctor">
            <summary>
            Constructs a instance of URL rewriting CSS postprocessor
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.PostProcessors.UrlRewritingCssPostProcessor.#ctor(BundleTransformer.Core.FileSystem.IRelativePathResolver)">
            <summary>
            Constructs a instance of URL rewriting CSS postprocessor
            </summary>
            <param name="relativePathResolver">Relative path resolver</param>
        </member>
        <member name="M:BundleTransformer.Core.PostProcessors.UrlRewritingCssPostProcessor.PostProcess(BundleTransformer.Core.Assets.IAsset)">
            <summary>
            Transforms relative paths to absolute in CSS file
            </summary>
            <param name="asset">CSS asset</param>
            <returns>Processed CSS asset</returns>
        </member>
        <member name="M:BundleTransformer.Core.PostProcessors.UrlRewritingCssPostProcessor.PostProcess(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Transforms relative paths to absolute in CSS files
            </summary>
            <param name="assets">Set of CSS assets</param>
            <returns>Set of processed CSS assets</returns>
        </member>
        <member name="M:BundleTransformer.Core.PostProcessors.UrlRewritingCssPostProcessor.ResolveAllRelativePaths(System.String,System.String)">
            <summary>
            Transforms all relative paths to absolute in CSS code
            </summary>
            <param name="content">Text content of CSS asset</param>
            <param name="path">CSS file path</param>
            <returns>Processed text content of CSS asset</returns>
        </member>
        <member name="M:BundleTransformer.Core.PostProcessors.UrlRewritingCssPostProcessor.ProcessImportRule(System.String,System.String)">
            <summary>
            Process a CSS <code>@import</code> rule
            </summary>
            <param name="parentAssetUrl">URL of parent CSS asset file</param>
            <param name="assetUrl">URL of CSS asset file</param>
            <returns>Processed CSS <code>@import</code> rule</returns>
        </member>
        <member name="M:BundleTransformer.Core.PostProcessors.UrlRewritingCssPostProcessor.ProcessUrlRule(System.String,System.String,System.String)">
            <summary>
            Process a CSS <code>url</code> rule
            </summary>
            <param name="parentAssetUrl">URL of parent CSS asset file</param>
            <param name="assetUrl">URL of CSS asset file</param>
            <param name="quote">Quote</param>
            <returns>Processed CSS <code>url</code> rule</returns>
        </member>
        <member name="M:BundleTransformer.Core.PostProcessors.UrlRewritingCssPostProcessor.ProcessOtherContent(System.Text.StringBuilder,System.String,System.Int32@,System.Int32)">
            <summary>
            Process a other stylesheet content
            </summary>
            <param name="contentBuilder">Content builder</param>
            <param name="assetContent">Text content of CSS asset</param>
            <param name="currentPosition">Current position</param>
            <param name="nextPosition">Next position</param>
        </member>
        <member name="T:BundleTransformer.Core.Resolvers.CustomBundleResolver">
            <summary>
            Custom bundle resolver, that required in order to the debugging HTTP handler can use
            transformations of the corresponding bundle
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Resolvers.CustomBundleResolver._bundles">
            <summary>
            Collection of bundles
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Resolvers.CustomBundleResolver._httpContext">
            <summary>
            HTTP context
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resolvers.CustomBundleResolver.Context">
            <summary>
            Gets or sets a HTTP context
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Resolvers.CustomBundleResolver.#ctor">
            <summary>
            Constructs a instance of the <see cref="T:System.Web.Optimization.CustomBundleResolver"/> class
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Resolvers.CustomBundleResolver.#ctor(System.Web.Optimization.BundleCollection)">
            <summary>
            Constructs a instance of the <see cref="T:System.Web.Optimization.CustomBundleResolver"/> class
            with the specified bundle
            </summary>
            <param name="bundles">Collection of bundles</param>
        </member>
        <member name="M:BundleTransformer.Core.Resolvers.CustomBundleResolver.#ctor(System.Web.Optimization.BundleCollection,System.Web.HttpContextBase)">
            <summary>
            Constructs a instance of the <see cref="T:System.Web.Optimization.CustomBundleResolver"/> class
            with the specified bundle and context
            </summary>
            <param name="bundles">Collection of bundles</param>
            <param name="context">HTTP context</param>
        </member>
        <member name="M:BundleTransformer.Core.Resolvers.CustomBundleResolver.IsBundleVirtualPath(System.String)">
            <summary>
            Determines if the virtual path is to a bundle
            </summary>
            <param name="virtualPath">Virtual path of bundle</param>
            <returns>Result of check (true - is virtual path; false - is not virtual path)</returns>
        </member>
        <member name="M:BundleTransformer.Core.Resolvers.CustomBundleResolver.GetBundleContents(System.String)">
            <summary>
            Gets a enumeration of actual file paths to the contents of bundle
            </summary>
            <param name="bundleVirtualPath">Virtual path of bundle</param>
            <returns>Actual file paths to the contents of bundle</returns>
        </member>
        <member name="M:BundleTransformer.Core.Resolvers.CustomBundleResolver.GetBundleUrl(System.String)">
            <summary>
            Gets a versioned url for bundle or returns the virtual path unchanged if it does not point to a bundle
            </summary>
            <param name="virtualPath">Virtual file path</param>
            <returns>Versioned url for bundle</returns>
        </member>
        <member name="T:BundleTransformer.Core.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.AssetHandler_BundleFileNotFound">
            <summary>
              Looks up a localized string similar to Could not find the &apos;{0}&apos; file in the &apos;{1}&apos; bundle..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.AssetHandler_BundleNotFound">
            <summary>
              Looks up a localized string similar to Bundle &apos;{0}&apos; not exist..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.AssetHandler_DependencyNotFound">
             <summary>
               Looks up a localized string similar to During the output text content of processed asset is not found one of its dependencies.
            See more details:
            {0}.
             </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.AssetHandler_TransformerNotFound">
            <summary>
              Looks up a localized string similar to Could not find the transformer in the &apos;{0}&apos; bundle..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.AssetHandler_TranslatorNotFound">
            <summary>
              Looks up a localized string similar to Could not find the translator of `{0}` type for the &apos;{1}&apos; asset..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.AssetHandler_UnknownError">
             <summary>
               Looks up a localized string similar to During the output text content of processed asset an unknown error has occurred.
            See more details:
            {0}.
             </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Assets_InvalidIgnorePattern">
            <summary>
              Looks up a localized string similar to Pure wildcard ignore patterns `*` and `*.*` are not supported..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Assets_ScriptAssetsContainAssetsWithInvalidTypes">
            <summary>
              Looks up a localized string similar to These assets are not scripts: {0}..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Assets_StyleAssetsContainAssetsWithInvalidTypes">
            <summary>
              Looks up a localized string similar to These assets are not style sheets: {0}..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Common_ArgumentIsEmpty">
            <summary>
              Looks up a localized string similar to The parameter `{0}` must be a non-empty string..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Common_ArgumentIsNull">
            <summary>
              Looks up a localized string similar to The parameter `{0}` must be a non-nullable..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Common_AssemblyNameIsEmpty">
            <summary>
              Looks up a localized string similar to You do not specified a name of assembly..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Common_EnumValueConversionFailed">
            <summary>
              Looks up a localized string similar to Can not convert value &apos;{0}&apos; of enumeration type `{1}` to value of enumeration type `{2}`..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Common_EnumValueToCodeConversionFailed">
            <summary>
              Looks up a localized string similar to Can&apos;t find string code that corresponding to the value &apos;{0}&apos; of enumeration type `{1}`..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Common_FileNotExist">
            <summary>
              Looks up a localized string similar to File &apos;{0}&apos; not exist..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Common_InstanceCreationFailed">
            <summary>
              Looks up a localized string similar to During instantiate an object of type `{0}` from assembly `{1}` error occurred..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Common_SeverityLevelToEnumValueConversionFailed">
            <summary>
              Looks up a localized string similar to Can&apos;t find a value of enumeration type `{0}` that corresponding to the severity level {1}..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Common_TypeNameIsEmpty">
            <summary>
              Looks up a localized string similar to You do not specified a type name..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Common_UnknownError">
            <summary>
              Looks up a localized string similar to Unknown error..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Common_UnknownMimeType">
            <summary>
              Looks up a localized string similar to Failed to determine MIME type of the file &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Common_ValueIsEmpty">
            <summary>
              Looks up a localized string similar to Value cannot be empty..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Common_ValueIsNull">
            <summary>
              Looks up a localized string similar to Value cannot be null..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Configuration_DefaultMinifierNotSpecified">
            <summary>
              Looks up a localized string similar to Default {0} minifier not specified..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Configuration_JsEngineNotSpecified">
             <summary>
               Looks up a localized string similar to In the `name` attribute of `/configuration/bundleTransformer/{0}/jsEngine` configuration element not specified a name of JS engine.
            
            If you have not installed JS engine, then for correct working of this module is recommended to install one of the following NuGet packages: {1}
            
            After package is installed and JS engine is registered (https://github.com/Taritsyn/JavaScriptEngineSwitcher/wiki/Registration-of-JS-engines), need set a name of JS engine (for example, `{2}`) to the `name` attribute of `/configur [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Configuration_MinifierNotRegistered">
            <summary>
              Looks up a localized string similar to {0} minifier with name `{1}` is not registered in configuration file..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Configuration_PostProcessorNotRegistered">
            <summary>
              Looks up a localized string similar to {0} postprocessor with name `{1}` is not registered in configuration file..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Configuration_TranslatorNotRegistered">
            <summary>
              Looks up a localized string similar to Translator, which compiles the code on intermediate language to {0}, and has the name `{1}` is not registered in  configuration file..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ErrorDetails_ColumnNumber">
            <summary>
              Looks up a localized string similar to Column number.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ErrorDetails_EndColumn">
            <summary>
              Looks up a localized string similar to End column.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ErrorDetails_EndLine">
            <summary>
              Looks up a localized string similar to End line.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ErrorDetails_ErrorCode">
            <summary>
              Looks up a localized string similar to Error code.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ErrorDetails_ErrorType">
            <summary>
              Looks up a localized string similar to Error type.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ErrorDetails_File">
            <summary>
              Looks up a localized string similar to File.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ErrorDetails_HelpKeyword">
            <summary>
              Looks up a localized string similar to Help keyword.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ErrorDetails_LineNumber">
            <summary>
              Looks up a localized string similar to Line number.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ErrorDetails_LineSource">
            <summary>
              Looks up a localized string similar to Line source.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ErrorDetails_Message">
            <summary>
              Looks up a localized string similar to Message.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ErrorDetails_Name">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ErrorDetails_ScriptStackTrace">
            <summary>
              Looks up a localized string similar to Script stack trace.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ErrorDetails_Severity">
            <summary>
              Looks up a localized string similar to Severity.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ErrorDetails_SourceError">
            <summary>
              Looks up a localized string similar to Source error.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ErrorDetails_SourceName">
            <summary>
              Looks up a localized string similar to Source name.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ErrorDetails_StartColumn">
            <summary>
              Looks up a localized string similar to Start column.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ErrorDetails_StartLine">
            <summary>
              Looks up a localized string similar to Start line.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ErrorDetails_Subcategory">
            <summary>
              Looks up a localized string similar to Subcategory.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ErrorType_Error">
            <summary>
              Looks up a localized string similar to error.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.ErrorType_Warning">
            <summary>
              Looks up a localized string similar to warning.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.FileExtensionMapping_DuplicateFileExtension">
            <summary>
              Looks up a localized string similar to File extension &apos;{0}&apos; has already been added to mapping collection..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Minifiers_MinificationFailed">
             <summary>
               Looks up a localized string similar to During minification of {0} code, readed from the file &apos;{1}&apos;, by {2} error has occurred.	
            See more details:
            
            {3}.
             </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Minifiers_MinificationSyntaxError">
             <summary>
               Looks up a localized string similar to During minification of {0} code, readed from the file &apos;{1}&apos;, by {2} syntax error has occurred. 
            See more details:
            
            {3}.
             </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.PostProcessors_PostprocessingFailed">
             <summary>
               Looks up a localized string similar to During postprocessing of {0} code, readed from the file &apos;{1}&apos;, by {2} error has occurred.	
            See more details:
            
            {3}.
             </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.PostProcessors_PostprocessingSyntaxError">
             <summary>
               Looks up a localized string similar to During postprocessing of {0} code, readed from the file &apos;{1}&apos;, by {2} syntax error has occurred. 
            See more details:
            
            {3}.
             </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Resources_ResourceIsNull">
            <summary>
              Looks up a localized string similar to Resource with name &apos;{0}&apos; is null..
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Translators_TranslationFailed">
             <summary>
               Looks up a localized string similar to During translation of {0} code, readed from the file &apos;{2}&apos;, to {1} code error has occurred.
            See more details:
            
            {3}.
             </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.Translators_TranslationSyntaxError">
             <summary>
               Looks up a localized string similar to During translation of {0} code, readed from the file &apos;{2}&apos;, to {1} code syntax error has occurred. 
            See more details:
            
            {3}.
             </summary>
        </member>
        <member name="P:BundleTransformer.Core.Resources.Strings.UrlMappings_OnlyAppRelativeUrlAllowed">
            <summary>
              Looks up a localized string similar to The URL &apos;{0}&apos; is not valid. Only application relative URLs (~/url) are allowed..
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Transformers.ITransformer">
            <summary>
            Defines interface of transformer that responsible for processing assets
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Transformers.ITransformer.Translators">
            <summary>
            Gets a list of translators
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Transformers.ITransformer.PostProcessors">
            <summary>
            Gets a list of postprocessors
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Transformers.ITransformer.Minifier">
            <summary>
            Gets a minifier
            </summary>
        </member>
        <member name="T:BundleTransformer.Core.Transformers.ScriptTransformer">
            <summary>
            Transformer that responsible for processing of script assets
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Transformers.ScriptTransformer._jsFilesWithMsStyleExtensions">
            <summary>
            List of JS files with Microsoft-style extensions
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Transformers.ScriptTransformer.ContentType">
            <summary>
            Gets a asset content type
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.ScriptTransformer.#ctor">
            <summary>
            Constructs a instance of script transformer
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.ScriptTransformer.#ctor(BundleTransformer.Core.Minifiers.IMinifier)">
            <summary>
            Constructs a instance of script transformer
            </summary>
            <param name="minifier">Minifier</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.ScriptTransformer.#ctor(System.Collections.Generic.IList{BundleTransformer.Core.Translators.ITranslator})">
            <summary>
            Constructs a instance of script transformer
            </summary>
            <param name="translators">List of translators</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.ScriptTransformer.#ctor(System.Collections.Generic.IList{BundleTransformer.Core.PostProcessors.IPostProcessor})">
            <summary>
            Constructs a instance of script transformer
            </summary>
            <param name="postProcessors">List of postprocessors</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.ScriptTransformer.#ctor(BundleTransformer.Core.Minifiers.IMinifier,System.Collections.Generic.IList{BundleTransformer.Core.Translators.ITranslator})">
            <summary>
            Constructs a instance of script transformer
            </summary>
            <param name="minifier">Minifier</param>
            <param name="translators">List of translators</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.ScriptTransformer.#ctor(BundleTransformer.Core.Minifiers.IMinifier,System.Collections.Generic.IList{BundleTransformer.Core.PostProcessors.IPostProcessor})">
            <summary>
            Constructs a instance of script transformer
            </summary>
            <param name="minifier">Minifier</param>
            <param name="postProcessors">List of postprocessors</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.ScriptTransformer.#ctor(System.Collections.Generic.IList{BundleTransformer.Core.Translators.ITranslator},System.Collections.Generic.IList{BundleTransformer.Core.PostProcessors.IPostProcessor})">
            <summary>
            Constructs a instance of script transformer
            </summary>
            <param name="translators">List of translators</param>
            <param name="postProcessors">List of postprocessors</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.ScriptTransformer.#ctor(BundleTransformer.Core.Minifiers.IMinifier,System.Collections.Generic.IList{BundleTransformer.Core.Translators.ITranslator},System.Collections.Generic.IList{BundleTransformer.Core.PostProcessors.IPostProcessor})">
            <summary>
            Constructs a instance of script transformer
            </summary>
            <param name="minifier">Minifier</param>
            <param name="translators">List of translators</param>
            <param name="postProcessors">List of postprocessors</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.ScriptTransformer.#ctor(System.String[])">
            <summary>
            Constructs a instance of script transformer
            </summary>
            <param name="ignorePatterns">List of patterns of files and directories that
            should be ignored when processing</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.ScriptTransformer.#ctor(BundleTransformer.Core.Minifiers.IMinifier,System.Collections.Generic.IList{BundleTransformer.Core.Translators.ITranslator},System.Collections.Generic.IList{BundleTransformer.Core.PostProcessors.IPostProcessor},System.String[])">
            <summary>
            Constructs a instance of script transformer
            </summary>
            <param name="minifier">Minifier</param>
            <param name="translators">List of translators</param>
            <param name="postProcessors">List of postprocessors</param>
            <param name="ignorePatterns">List of patterns of files and directories that
            should be ignored when processing</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.ScriptTransformer.#ctor(BundleTransformer.Core.Minifiers.IMinifier,System.Collections.Generic.IList{BundleTransformer.Core.Translators.ITranslator},System.Collections.Generic.IList{BundleTransformer.Core.PostProcessors.IPostProcessor},System.String[],BundleTransformer.Core.Configuration.CoreSettings)">
            <summary>
            Constructs a instance of script transformer
            </summary>
            <param name="minifier">Minifier</param>
            <param name="translators">List of translators</param>
            <param name="postProcessors">List of postprocessors</param>
            <param name="ignorePatterns">List of patterns of files and directories that
            should be ignored when processing</param>
            <param name="coreConfig">Configuration settings of core</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.ScriptTransformer.ValidateAssetTypes(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Validates whether the specified assets are script asset
            </summary>
            <param name="assets">Set of script assets</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.ScriptTransformer.RemoveDuplicateAssets(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Removes a duplicate script assets
            </summary>
            <param name="assets">Set of script assets</param>
            <returns>Set of unique script assets</returns>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.ScriptTransformer.RemoveUnnecessaryAssets(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Removes a unnecessary script assets
            </summary>
            <param name="assets">Set of script assets</param>
            <returns>Set of necessary script assets</returns>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.ScriptTransformer.ReplaceFileExtensions(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset},System.Boolean)">
            <summary>
            Replaces a file extensions of script assets
            </summary>
            <param name="assets">Set of script assets</param>
            <param name="isDebugMode">Flag that web application is in debug mode</param>
            <returns>Set of script assets with a modified extension</returns>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.ScriptTransformer.Combine(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset},System.String,System.Boolean)">
            <summary>
            Combines a code of script assets
            </summary>
            <param name="assets">Set of script assets</param>
            <param name="bundleVirtualPath">Virtual path of bundle</param>
            <param name="isDebugMode">Flag that web application is in debug mode</param>
            /// <returns>Combined asset</returns>
        </member>
        <member name="T:BundleTransformer.Core.Transformers.StyleTransformer">
            <summary>
            Transformer that responsible for processing of style assets
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Transformers.StyleTransformer.ContentType">
            <summary>
            Gets a asset content type
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.StyleTransformer.#ctor">
            <summary>
            Constructs a instance of style transformer
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.StyleTransformer.#ctor(BundleTransformer.Core.Minifiers.IMinifier)">
            <summary>
            Constructs a instance of style transformer
            </summary>
            <param name="minifier">Minifier</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.StyleTransformer.#ctor(System.Collections.Generic.IList{BundleTransformer.Core.Translators.ITranslator})">
            <summary>
            Constructs a instance of style transformer
            </summary>
            <param name="translators">List of translators</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.StyleTransformer.#ctor(System.Collections.Generic.IList{BundleTransformer.Core.PostProcessors.IPostProcessor})">
            <summary>
            Constructs a instance of style transformer
            </summary>
            <param name="postProcessors">List of postprocessors</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.StyleTransformer.#ctor(BundleTransformer.Core.Minifiers.IMinifier,System.Collections.Generic.IList{BundleTransformer.Core.Translators.ITranslator})">
            <summary>
            Constructs a instance of style transformer
            </summary>
            <param name="minifier">Minifier</param>
            <param name="translators">List of translators</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.StyleTransformer.#ctor(BundleTransformer.Core.Minifiers.IMinifier,System.Collections.Generic.IList{BundleTransformer.Core.PostProcessors.IPostProcessor})">
            <summary>
            Constructs a instance of style transformer
            </summary>
            <param name="minifier">Minifier</param>
            <param name="postProcessors">List of postprocessors</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.StyleTransformer.#ctor(System.Collections.Generic.IList{BundleTransformer.Core.Translators.ITranslator},System.Collections.Generic.IList{BundleTransformer.Core.PostProcessors.IPostProcessor})">
            <summary>
            Constructs a instance of style transformer
            </summary>
            <param name="translators">List of translators</param>
            <param name="postProcessors">List of postprocessors</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.StyleTransformer.#ctor(BundleTransformer.Core.Minifiers.IMinifier,System.Collections.Generic.IList{BundleTransformer.Core.Translators.ITranslator},System.Collections.Generic.IList{BundleTransformer.Core.PostProcessors.IPostProcessor})">
            <summary>
            Constructs a instance of style transformer
            </summary>
            <param name="minifier">Minifier</param>
            <param name="translators">List of translators</param>
            <param name="postProcessors">List of postprocessors</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.StyleTransformer.#ctor(System.String[])">
            <summary>
            Constructs a instance of style transformer
            </summary>
            <param name="ignorePatterns">List of patterns of files and directories that
            should be ignored when processing</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.StyleTransformer.#ctor(BundleTransformer.Core.Minifiers.IMinifier,System.Collections.Generic.IList{BundleTransformer.Core.Translators.ITranslator},System.Collections.Generic.IList{BundleTransformer.Core.PostProcessors.IPostProcessor},System.String[])">
            <summary>
            Constructs a instance of style transformer
            </summary>
            <param name="minifier">Minifier</param>
            <param name="translators">List of translators</param>
            <param name="postProcessors">List of postprocessors</param>
            <param name="ignorePatterns">List of patterns of files and directories that
            should be ignored when processing</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.StyleTransformer.#ctor(BundleTransformer.Core.Minifiers.IMinifier,System.Collections.Generic.IList{BundleTransformer.Core.Translators.ITranslator},System.Collections.Generic.IList{BundleTransformer.Core.PostProcessors.IPostProcessor},System.String[],BundleTransformer.Core.Configuration.CoreSettings)">
            <summary>
            Constructs a instance of style transformer
            </summary>
            <param name="minifier">Minifier</param>
            <param name="translators">List of translators</param>
            <param name="postProcessors">List of postprocessors</param>
            <param name="ignorePatterns">List of patterns of files and directories that
            should be ignored when processing</param>
            <param name="coreConfig">Configuration settings of core</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.StyleTransformer.ValidateAssetTypes(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Validates whether the specified assets are style asset
            </summary>
            <param name="assets">Set of style assets</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.StyleTransformer.RemoveDuplicateAssets(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Removes a duplicate style assets
            </summary>
            <param name="assets">Set of style assets</param>
            <returns>Set of unique style assets</returns>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.StyleTransformer.RemoveUnnecessaryAssets(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Removes a unnecessary style assets
            </summary>
            <param name="assets">Set of style assets</param>
            <returns>Set of necessary style assets</returns>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.StyleTransformer.ReplaceFileExtensions(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset},System.Boolean)">
            <summary>
            Replaces a file extensions of style assets
            </summary>
            <param name="assets">Set of style assets</param>
            <param name="isDebugMode">Flag that web application is in debug mode</param>
            <returns>Set of style assets with a modified extension</returns>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.StyleTransformer.Combine(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset},System.String,System.Boolean)">
            <summary>
            Combines a code of style assets
            </summary>
            <param name="assets">Set of style assets</param>
            <param name="bundleVirtualPath">Virtual path of bundle</param>
            <param name="isDebugMode">Flag that web application is in debug mode</param>
        </member>
        <member name="T:BundleTransformer.Core.Transformers.Tracer">
            <summary>
            Transformer that responsible to output trace information
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.Tracer.Process(System.Web.Optimization.BundleContext,System.Web.Optimization.BundleResponse)">
            <summary>
            Displays trace information
            </summary>
            <param name="context">Object BundleContext</param>
            <param name="response">Object BundleResponse</param>
        </member>
        <member name="T:BundleTransformer.Core.Transformers.TransformerBase">
            <summary>
            Base class of transformer that responsible for processing assets
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Transformers.TransformerBase._ignorePatterns">
            <summary>
            List of patterns of files and directories that
            should be ignored when processing
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Transformers.TransformerBase._translators">
            <summary>
            List of translators
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Transformers.TransformerBase._postProcessors">
            <summary>
            List of postprocessors
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Transformers.TransformerBase._minifier">
            <summary>
            Minifier
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Transformers.TransformerBase.ContentType">
            <summary>
            Gets a asset content type
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Transformers.TransformerBase.Translators">
            <summary>
            Gets a list of translators (LESS, Sass, SCSS, CoffeeScript and TypeScript)
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Transformers.TransformerBase.PostProcessors">
            <summary>
            Gets a list of postprocessors
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Transformers.TransformerBase.Minifier">
            <summary>
            Gets a minifier
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Transformers.TransformerBase.EnableTracing">
            <summary>
            Gets or sets a flag for whether to enable tracing
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Transformers.TransformerBase.UsePreMinifiedFiles">
            <summary>
            Gets or sets a flag for whether to allow usage of pre-minified files
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Transformers.TransformerBase.CombineFilesBeforeMinification">
            <summary>
            Gets or sets a flag for whether to allow combine files before minification
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.TransformerBase.#ctor(System.String[],BundleTransformer.Core.Configuration.CoreSettings)">
            <summary>
            Constructs a instance of transformer
            </summary>
            <param name="ignorePatterns">List of patterns of files and directories that
            should be ignored when processing</param>
            <param name="coreConfig">Configuration settings of core</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.TransformerBase.Process(System.Web.Optimization.BundleContext,System.Web.Optimization.BundleResponse)">
            <summary>
            Starts a processing of assets
            </summary>
            <param name="bundleContext">Object BundleContext</param>
            <param name="bundleResponse">Object BundleResponse</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.TransformerBase.Process(System.Web.Optimization.BundleContext,System.Web.Optimization.BundleResponse,System.Boolean)">
            <summary>
            Starts a processing of assets
            </summary>
            <param name="bundleContext">Object BundleContext</param>
            <param name="bundleResponse">Object BundleResponse</param>
            <param name="isDebugMode">Flag that web application is in debug mode</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.TransformerBase.Transform(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset},System.Web.Optimization.BundleContext,System.Web.Optimization.BundleResponse,System.Web.Hosting.VirtualPathProvider,System.Boolean)">
            <summary>
            Transforms a assets
            </summary>
            <param name="assets">Set of assets</param>
            <param name="bundleContext">Object BundleContext</param>
            <param name="bundleResponse">Object BundleResponse</param>
            <param name="virtualPathProvider">Virtual path provider</param>
            <param name="isDebugMode">Flag that web application is in debug mode</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.TransformerBase.ValidateAssetTypes(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Validates a assets for compliance with a valid types
            </summary>
            <param name="assets">Set of assets</param>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.TransformerBase.RemoveDuplicateAssets(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Removes a duplicate assets
            </summary>
            <param name="assets">Set of assets</param>
            <returns>Set of unique assets</returns>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.TransformerBase.RemoveUnnecessaryAssets(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Removes a unnecessary assets
            </summary>
            <param name="assets">Set of assets</param>
            <returns>Set of necessary assets</returns>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.TransformerBase.Translate(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset},System.Boolean)">
            <summary>
            Translates a code of assets
            </summary>
            <param name="assets">Set of assets</param>
            <param name="isDebugMode">Flag that web application is in debug mode</param>
            <returns>Set of assets with translated code</returns>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.TransformerBase.ReplaceFileExtensions(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset},System.Boolean)">
            <summary>
            Replaces a file extensions of assets
            </summary>
            <param name="assets">Set of assets</param>
            <param name="isDebugMode">Flag that web application is in debug mode</param>
            <returns>Set of assets with a modified extension</returns>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.TransformerBase.PostProcess(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset},System.Boolean)">
            <summary>
            Process a text content of assets
            </summary>
            <param name="assets">Set of assets</param>
            <param name="isDebugMode">Flag that web application is in debug mode</param>
            <returns>Set of assets with processed code</returns>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.TransformerBase.Minify(BundleTransformer.Core.Assets.IAsset)">
            <summary>
            Minify a text content of asset
            </summary>
            <param name="asset">Asset</param>
            <returns>Asset with minified code</returns>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.TransformerBase.Minify(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Minify a text content of assets
            </summary>
            <param name="assets">Set of assets</param>
            <returns>Set of assets with minified code</returns>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.TransformerBase.Combine(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset},System.String,System.Boolean)">
            <summary>
            Combines a code of assets
            </summary>
            <param name="assets">Set of assets</param>
            <param name="bundleVirtualPath">Virtual path of bundle</param>
            <param name="isDebugMode">Flag that web application is in debug mode</param>
            <returns>Combined asset</returns>
        </member>
        <member name="M:BundleTransformer.Core.Transformers.TransformerBase.ConfigureBundleResponse(BundleTransformer.Core.Assets.IAsset,System.Web.Optimization.BundleResponse,System.Web.Hosting.VirtualPathProvider)">
            <summary>
            Configures a bundle bundleResponse
            </summary>
            <param name="combinedAsset">Combined asset</param>
            <param name="bundleResponse">Object BundleResponse</param>
            <param name="virtualPathProvider">Virtual path provider</param>
        </member>
        <member name="T:BundleTransformer.Core.Translators.AssetTranslationException">
            <summary>
            The exception that is thrown when a translation of asset code, written
            on intermediate language, is failed
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Translators.AssetTranslationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <code>BundleTransformer.Core.Translators.AssetTranslationException</code> class
            with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:BundleTransformer.Core.Translators.AssetTranslationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <code>BundleTransformer.Core.Translators.AssetTranslationException</code> class
            with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="T:BundleTransformer.Core.Translators.ITranslator">
            <summary>
            This interface used in implementation of containers for
            translators of code written on intermediate languages
            (LESS, Sass, SCSS, CoffeeScript, TypeScript and etc) to CSS or JS code
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Translators.ITranslator.IsDebugMode">
            <summary>
            Gets or sets a flag that web application is in debug mode
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Translators.ITranslator.Translate(BundleTransformer.Core.Assets.IAsset)">
            <summary>
            Translates a code of asset written on intermediate language to CSS or JS code
            </summary>
            <param name="asset">Asset with code written on intermediate language</param>
            <returns>Asset with translated code</returns>
        </member>
        <member name="M:BundleTransformer.Core.Translators.ITranslator.Translate(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Translates a code of assets written on intermediate languages to CSS or JS code
            </summary>
            <param name="assets">Set of assets with code written on intermediate languages</param>
            <returns>Set of assets with translated code</returns>
        </member>
        <member name="T:BundleTransformer.Core.Translators.NullTranslator">
            <summary>
            Null translator (used as a placeholder)
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Translators.NullTranslator.IsDebugMode">
            <summary>
            Gets or sets a flag that web application is in debug mode
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Translators.NullTranslator.Translate(BundleTransformer.Core.Assets.IAsset)">
            <summary>
            Do not performs operations with asset
            </summary>
            <param name="asset">Asset</param>
            <returns>Asset</returns>
        </member>
        <member name="M:BundleTransformer.Core.Translators.NullTranslator.Translate(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Do not performs operations with assets
            </summary>
            <param name="assets">Set of assets</param>
            <returns>Set of assets</returns>
        </member>
        <member name="T:BundleTransformer.Core.Translators.TranslatorNotFoundException">
            <summary>
            The exception that is thrown when a translator is not found
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Translators.TranslatorNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <code>BundleTransformer.Core.Translators.TranslatorNotFoundException</code> class
            with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:BundleTransformer.Core.Translators.TranslatorNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <code>BundleTransformer.Core.Translators.TranslatorNotFoundException</code> class
            with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="T:BundleTransformer.Core.Translators.TranslatorWithNativeMinificationBase">
            <summary>
            Base class of translator with support for native minification
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Translators.TranslatorWithNativeMinificationBase.IsDebugMode">
            <summary>
            Gets or sets a flag that web application is in debug mode
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Translators.TranslatorWithNativeMinificationBase.UseNativeMinification">
            <summary>
            Gets or sets a flag for whether to allow the use of native minification
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Translators.TranslatorWithNativeMinificationBase.NativeMinificationEnabled">
            <summary>
            Gets a flag that indicating to use of native minification
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Translators.TranslatorWithNativeMinificationBase.Translate(BundleTransformer.Core.Assets.IAsset)">
            <summary>
            Translates a code of asset written on intermediate language to CSS or JS code
            </summary>
            <param name="asset">Asset with code written on intermediate language</param>
            <returns>Asset with translated code</returns>
        </member>
        <member name="M:BundleTransformer.Core.Translators.TranslatorWithNativeMinificationBase.Translate(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Translates a code of assets written on intermediate languages to CSS and JS code
            </summary>
            <param name="assets">Set of assets with code written on intermediate languages</param>
            <returns>Set of assets with translated code</returns>
        </member>
        <member name="T:BundleTransformer.Core.Utilities.CharExtensions">
            <summary>
            Extensions for Char
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Utilities.SourceCodeNavigator._nextLineBreakChars">
            <summary>
            Array of characters used to find the next line break
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Utilities.SourceCodeNavigator._previousLineBreakChars">
            <summary>
            Array of characters used to find the previous line break
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.SourceCodeNavigator.FindNextLineBreak(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Finds a next line break
            </summary>
            <param name="sourceCode">Source code</param>
            <param name="startPosition">Position in the input string that defines the leftmost
            position to be searched</param>
            <param name="lineBreakPosition">Position of line break</param>
            <param name="lineBreakLength">Length of line break</param>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.SourceCodeNavigator.FindNextLineBreak(System.String,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Finds a next line break
            </summary>
            <param name="sourceCode">Source code</param>
            <param name="startPosition">Position in the input string that defines the leftmost
            position to be searched</param>
            <param name="length">Number of characters in the substring to include in the search</param>
            <param name="lineBreakPosition">Position of line break</param>
            <param name="lineBreakLength">Length of line break</param>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.SourceCodeNavigator.FindPreviousLineBreak(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Finds a previous line break
            </summary>
            <param name="sourceCode">Source code</param>
            <param name="startPosition">Position in the input string that defines the leftmost
            position to be searched</param>
            <param name="lineBreakPosition">Position of line break</param>
            <param name="lineBreakLength">Length of line break</param>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.SourceCodeNavigator.CalculateLineBreakCount(System.String,System.Int32@,System.Int32@)">
            <summary>
            Calculates a line break count
            </summary>
            <param name="sourceCode">Source code</param>
            <param name="lineBreakCount">Number of line breaks</param>
            <param name="charRemainderCount">Number of characters left</param>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.SourceCodeNavigator.CalculateLineBreakCount(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Calculates a line break count
            </summary>
            <param name="sourceCode">Source code</param>
            <param name="fragmentStartPosition">Start position of fragment</param>
            <param name="lineBreakCount">Number of line breaks</param>
            <param name="charRemainderCount">Number of characters left</param>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.SourceCodeNavigator.CalculateLineBreakCount(System.String,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Calculates a line break count
            </summary>
            <param name="sourceCode">Source code</param>
            <param name="fragmentStartPosition">Start position of fragment</param>
            <param name="fragmentLength">Length of fragment</param>
            <param name="lineBreakCount">Number of line breaks</param>
            <param name="charRemainderCount">Number of characters left</param>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.SourceCodeNavigator.CalculateNodeCoordinates(System.String,System.Int32)">
            <summary>
            Calculates a node coordinates
            </summary>
            <param name="sourceCode">Source code</param>
            <param name="nodePosition">Current node position</param>
            <returns>Node coordinates</returns>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.SourceCodeNavigator.GetSourceFragment(System.String,System.Int32,System.Byte,System.Int32)">
            <summary>
            Gets a source fragment
            </summary>
            <param name="sourceCode">Source code</param>
            <param name="nodePosition">Current node position</param>
            <param name="tabSize">Number of spaces in the tab</param>
            <param name="maxFragmentLength">Maximum length of the source fragment</param>
            <returns>Source fragment</returns>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.SourceCodeNavigator.GetSourceFragment(System.String,BundleTransformer.Core.Utilities.SourceCodeNodeCoordinates,System.Byte,System.Int32)">
            <summary>
            Gets a source fragment
            </summary>
            <param name="sourceCode">Source code</param>
            <param name="nodeCoordinates">Node coordinates</param>
            <param name="tabSize">Number of spaces in the tab</param>
            <param name="maxFragmentLength">Maximum length of the source fragment</param>
            <returns>Source fragment</returns>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.SourceCodeNavigator.CalculateCutPositions(System.String,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Calculates a cut positions
            </summary>
            <param name="line">Line content</param>
            <param name="columnNumber">Column number</param>
            <param name="maxFragmentLength">Maximum length of the source fragment</param>
            <param name="fragmentStartPosition">Start position of source fragment</param>
            <param name="fragmentLength">Length of source fragment</param>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.SourceCodeNavigator.FormatSourceCodeLine(System.String,BundleTransformer.Core.Utilities.SourceCodeNodeCoordinates,System.Int32,System.Int32,System.Int32,System.Byte)">
            <summary>
            Formats a line of source code
            </summary>
            <param name="line">Line content</param>
            <param name="nodeCoordinates">Node coordinates</param>
            <param name="lineNumberSize">Number of symbols in the line number caption</param>
            <param name="fragmentStartPosition">Start position of source fragment</param>
            <param name="fragmentLength">Length of source fragment</param>
            <param name="tabSize">Number of spaces in the tab</param>
            <returns>Formatted line</returns>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.SourceCodeNavigator.CalculateAbsoluteNodeCoordinates(BundleTransformer.Core.Utilities.SourceCodeNodeCoordinates,BundleTransformer.Core.Utilities.SourceCodeNodeCoordinates)">
            <summary>
            Calculates a absolute node coordinates
            </summary>
            <param name="baseNodeCoordinates">Base node coordinates</param>
            <param name="relativeNodeCoordinates">Relative node coordinates</param>
            <returns>Absolute node coordinates</returns>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.SourceCodeNavigator.CalculateAbsoluteNodeCoordinates(BundleTransformer.Core.Utilities.SourceCodeNodeCoordinates,System.String)">
            <summary>
            Calculates a absolute node coordinates
            </summary>
            <param name="baseNodeCoordinates">Base node coordinates</param>
            <param name="additionalContent">Additional content</param>
            <returns>Absolute node coordinates</returns>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.SourceCodeNavigator.CalculateAbsoluteNodeCoordinates(BundleTransformer.Core.Utilities.SourceCodeNodeCoordinates,System.Int32,System.Int32)">
            <summary>
            Calculates a absolute node coordinates
            </summary>
            <param name="baseNodeCoordinates">Base node coordinates</param>
            <param name="lineBreakCount">Number of line breaks</param>
            <param name="charRemainderCount">Number of characters left</param>
            <returns>Absolute node coordinates</returns>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.SourceCodeNavigator.GetCurrentLine(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets a current line content
            </summary>
            <param name="sourceCode">Source code</param>
            <param name="currentPosition">Current position</param>
            <param name="startLinePosition">Start position of line</param>
            <param name="endLinePosition">End position of line</param>
            <returns>Line content</returns>
        </member>
        <member name="T:BundleTransformer.Core.Utilities.SourceCodeNodeCoordinates">
            <summary>
            Source code node coordinates
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Utilities.SourceCodeNodeCoordinates._lineNumber">
            <summary>
            Line number
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Utilities.SourceCodeNodeCoordinates._columnNumber">
            <summary>
            Column number
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Utilities.SourceCodeNodeCoordinates.LineNumber">
            <summary>
            Gets or sets a line number
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Utilities.SourceCodeNodeCoordinates.ColumnNumber">
            <summary>
            Gets or sets a column number
            </summary>
        </member>
        <member name="F:BundleTransformer.Core.Utilities.SourceCodeNodeCoordinates.Empty">
            <summary>
            Represents a node coordinates that has line number and column number values set to zero.
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Utilities.SourceCodeNodeCoordinates.IsEmpty">
            <summary>
            Gets a value indicating whether this node coordinates is empty
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.SourceCodeNodeCoordinates.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs an instance of source code node coordinates
            </summary>
            <param name="lineNumber">Line number</param>
            <param name="columnNumber">Column number</param>
        </member>
        <member name="T:BundleTransformer.Core.Utilities.StringExtensions">
            <summary>
            Extensions for String
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.StringExtensions.TabsToSpaces(System.String,System.Int32)">
            <summary>
            Replaces a tabs by specified number of spaces
            </summary>
            <param name="source">String value</param>
            <param name="tabSize">Number of spaces in tab</param>
            <returns>Processed string value</returns>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.StringExtensions.TryGetChar(System.String,System.Int32,System.Char@)">
            <summary>
            Gets a character at the specified index from the string.
            A return value indicates whether the receiving succeeded.
            </summary>
            <param name="source">The source string</param>
            <param name="index">The zero-based index of the character</param>
            <param name="result">When this method returns, contains the character from the string,
            if the receiving succeeded, or null character if the receiving failed.
            The receiving fails if the index out of bounds.</param>
            <returns>true if the character was received successfully; otherwise, false</returns>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.Utils.ConvertToStringCollection(System.String,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Converts a string value to string collection
            </summary>
            <param name="value">String value</param>
            <param name="separator">Separator</param>
            <param name="trimItemValues">Allow trim of item values</param>
            <param name="removeEmptyItems">Allow removal of empty items from collection</param>
            <returns>String collection</returns>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.Utils.ConvertToStringCollection(System.String,System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Converts a string value to string collection
            </summary>
            <param name="value">String value</param>
            <param name="separator">Separator</param>
            <param name="trimItemValues">Allow trim of item values</param>
            <param name="removeEmptyItems">Allow removal of empty items from collection</param>
            <returns>String collection</returns>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.Utils.CreateInstanceByFullTypeName``1(System.String)">
            <summary>
            Creates a instance by specified full type name
            </summary>
            <param name="fullTypeName">Full type name</param>
            <typeparam name="T">Target type</typeparam>
            <returns>Instance of type</returns>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.Utils.GetEnumFromOtherEnum``2(``0)">
            <summary>
            Converts a value of source enumeration type to value of destination enumeration type
            </summary>
            <typeparam name="TSource">Source enumeration type</typeparam>
            <typeparam name="TDest">Destination enumeration type</typeparam>
            <param name="value">Value of source enumeration type</param>
            <returns>Value of destination enumeration type</returns>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.Utils.GetResourceAsString(System.String,System.Type)">
            <summary>
            Gets a content of the embedded resource as string
            </summary>
            <param name="resourceName">The case-sensitive resource name without the namespace of the specified type</param>
            <param name="type">The type, that determines the assembly and whose namespace is used to scope
            the resource name</param>
            <returns>Сontent of the embedded resource as string</returns>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.Utils.GetResourceAsString(System.String,System.Reflection.Assembly)">
            <summary>
            Gets a content of the embedded resource as string
            </summary>
            <param name="resourceName">The case-sensitive resource name</param>
            <param name="assembly">The assembly, which contains the embedded resource</param>
            <returns>Сontent of the embedded resource as string</returns>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.Utils.IsTextStream(System.IO.Stream,System.Int32,System.Text.Encoding@)">
            <summary>
            Detect if a stream is text and detect the encoding
            </summary>
            <param name="stream">Stream</param>
            <param name="sampleSize">Number of characters to use for testing</param>
            <param name="encoding">Detected encoding</param>
            <returns>Result of check (true - is text; false - is binary)</returns>
        </member>
        <member name="M:BundleTransformer.Core.Utilities.Utils.GetStreamFromString(System.String)">
            <summary>
            Gets a stream from the string value
            </summary>
            <param name="value">String value</param>
            <returns>Stream</returns>
        </member>
        <member name="T:BundleTransformer.Core.Validators.InvalidAssetTypesException">
            <summary>
            The exception that is thrown when a assets are invalid types
            </summary>
        </member>
        <member name="P:BundleTransformer.Core.Validators.InvalidAssetTypesException.InvalidAssetsVirtualPaths">
            <summary>
            Gets or sets a virtual paths of assets with invalid types
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Validators.InvalidAssetTypesException.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <code>BundleTransformer.Core.Validators.InvalidAssetTypesException</code> class
            with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="invalidAssetsVirtualPaths">Virtual paths of assets with invalid types</param>
        </member>
        <member name="T:BundleTransformer.Core.Validators.IValidator">
            <summary>
            Defines interface of asset validator
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Validators.IValidator.Validate(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Validates a assets
            </summary>
            <param name="assets">Set of assets</param>
        </member>
        <member name="T:BundleTransformer.Core.Validators.ScriptAssetTypesValidator">
            <summary>
            Validator that checks whether the specified assets are script
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Validators.ScriptAssetTypesValidator.Validate(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Validates whether the specified assets are script assets
            </summary>
            <param name="assets">Set of assets</param>
        </member>
        <member name="T:BundleTransformer.Core.Validators.StyleAssetTypesValidator">
            <summary>
            Validator that checks whether the specified assets are style assets
            </summary>
        </member>
        <member name="M:BundleTransformer.Core.Validators.StyleAssetTypesValidator.Validate(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Validates whether the specified assets are style assets
            </summary>
            <param name="assets">Set of assets</param>
        </member>
    </members>
</doc>
