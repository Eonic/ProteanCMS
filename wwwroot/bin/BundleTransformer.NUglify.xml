<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BundleTransformer.NUglify</name>
    </assembly>
    <members>
        <member name="T:BundleTransformer.NUglify.BlockStart">
            <summary>
            Describes how to output the opening curly-brace for blocks when the OutputMode
            is set to <code>MultipleLines</code>
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.BlockStart.NewLine">
            <summary>
            Output the opening curly-brace block-start character on its own new line.
            Example:
            <code>if (condition)
            {
                ...
            }</code>
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.BlockStart.SameLine">
            <summary>
            Output the opening curly-brace block-start character at the end of the previous line.
            Example:
            <code>if (condition) {
                ...
            }</code>
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.BlockStart.UseSource">
            <summary>
            Output the opening curly-brace block-start character on the same line or a new line
            depending on how it was specified in the sources
            </summary>
        </member>
        <member name="T:BundleTransformer.NUglify.Configuration.ConfigurationContextExtensions">
            <summary>
            Configuration context extensions
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.Configuration.ConfigurationContextExtensions._nuglifyConfig">
            <summary>
            Configuration settings of NUglify Minifier
            </summary>
        </member>
        <member name="M:BundleTransformer.NUglify.Configuration.ConfigurationContextExtensions.GetNUglifySettings(BundleTransformer.Core.Configuration.IConfigurationContext)">
            <summary>
            Gets a NUglify Minifier configuration settings
            </summary>
            <param name="context">Configuration context</param>
            <returns>Configuration settings of NUglify Minifier</returns>
        </member>
        <member name="T:BundleTransformer.NUglify.Configuration.CssMinifierSettings">
            <summary>
            Configuration settings of NUglify CSS minifier
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.CssMinifierSettings.ColorNames">
            <summary>
            Gets or sets a <see cref="T:BundleTransformer.NUglify.CssColor"/> setting
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.CssMinifierSettings.CommentMode">
            <summary>
            Gets or sets a <see cref="T:BundleTransformer.NUglify.CssComment"/> setting
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.CssMinifierSettings.DecodeEscapes">
            <summary>
            Gets or sets a value indicating whether unicode escape strings (e.g. <code>\ff0e</code>)
            would be replaced by it's actual character or not
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.CssMinifierSettings.FixIE8Fonts">
            <summary>
            Gets or sets a value indicating whether IE8 .EOT fonts should get a question-mark
            appended to the URL (if not there already) to prevent the browser from generating
            invalid HTTP requests to the server
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.CssMinifierSettings.MinifyExpressions">
            <summary>
            Gets or sets a value indicating whether to minify the
            JS within expression functions
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.CssMinifierSettings.RemoveEmptyBlocks">
            <summary>
            Gets or sets a value indicating whether empty blocks removes
            the corresponding rule or directive
            </summary>
        </member>
        <member name="T:BundleTransformer.NUglify.Configuration.JsMinifierSettings">
            <summary>
            Configuration settings of NUglify JS minifier
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.AlwaysEscapeNonAscii">
            <summary>
            Gets or sets a flag indicating whether to always escape non-ASCII characters as <code>\uXXXX</code>
            or to let the output encoding object handle that via the <code>JsEncoderFallback</code> object for the
            specified output encoding format
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.AmdSupport">
            <summary>
            Gets or sets a flag indicating whether to perform extra tasks on AMD-style defines
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.CollapseToLiteral">
            <summary>
            Gets or sets a flag for whether to collapse <code>new Array()</code>
            to <code>[]</code> and <code>new Object()</code> to <code>{}</code>
            (true) or leave as-is (false)
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.ConstStatementsMozilla">
            <summary>
            Gets or sets a boolean value indicating whether to use old-style
            const statements (just var-statements that define unchangeable fields)
            or new EcmaScript 6 lexical declarations
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.DebugLookupList">
            <summary>
            Gets or sets a string representation of the list of debug
            lookups (comma-separated)
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.ErrorIfNotInlineSafe">
            <summary>
            Gets or sets a flag for whether to throw an error
            if a source string is not safe for inclusion in an
            HTML inline script block
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.EvalLiteralExpressions">
            <summary>
            Gets or sets a flag for whether to evaluate expressions containing
            only literal bool, string, numeric, or null values (true).
            Leave literal expressions alone and do not evaluate them (false).
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.EvalTreatment">
            <summary>
            EvalTreatment setting
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.IgnoreConditionalCompilation">
            <summary>
            Gets or sets a flag for whether or not to ignore conditional-compilation
            comment syntax (true) or to try to retain the comments in the output (false)
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.IgnorePreprocessorDefines">
            <summary>
            Gets or sets a boolean value indicating whether or not to ignore preprocessor
            defines comment syntax (true) or to evaluate them (false)
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.InlineSafeStrings">
            <summary>
            Gets or sets a flag for whether to break up string literals containing
            <code>&lt;/script&gt;</code> so inline code won't break (true).
            Leave string literals as-is (false).
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.KnownGlobalNamesList">
            <summary>
            Gets or sets the known global names list as a single comma-separated string
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.LocalRenaming">
            <summary>
            Gets or sets a value indicating whether to how to rename local variables and functions:
            <code>KeepAll</code> - do not rename local variables and functions;
            <code>CrunchAll</code> - rename all local variables and functions to shorter names;
            <code>KeepLocalizationVars</code> - rename all local variables and functions that do NOT start with L_
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.MacSafariQuirks">
            <summary>
            Gets or sets a value indicating whether to add characters to the output
            to make sure Mac Safari bugs are not generated (true).
            Disregard potential Mac Safari bugs (false).
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.ManualRenamesProperties">
            <summary>
            Gets or sets a boolean value indicating whether object property
            names with the specified "from" names will get renamed to
            the corresponding "to" names (true) when using
            the manual-rename feature, or left alone (false)
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.NoAutoRenameList">
            <summary>
            Get or sets the no-automatic-renaming list as a single string of
            comma-separated identifiers
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.PreserveFunctionNames">
            <summary>
            Gets or sets a value indicating whether all function names
            must be preserved and remain as-named
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.PreserveImportantComments">
            <summary>
            Gets or sets a value indicating whether to preserve important
            comments in the output
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.QuoteObjectLiteralProperties">
            <summary>
            Gets or sets a value indicating whether to always quote object literal property names
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.RemoveFunctionExpressionNames">
            <summary>
            Gets or sets a value indicating whether or not to remove
            unreferenced function expression names
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.RemoveUnneededCode">
            <summary>
            Remove unneeded code, like uncalled local functions (true).
            Keep all code (false).
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.RenamePairs">
            <summary>
            Gets or sets a string representation of all the indentifier
            replacements as a comma-separated list of "source=target" identifiers
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.ReorderScopeDeclarations">
            <summary>
            Gets or sets a value indicating whether or not to reorder function and variable
            declarations within scopes (true), or to leave the order as specified in
            the original source
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.ScriptVersion">
            <summary>
            Gets or sets an enumeration that gives the parser a hint as to which version
            of EcmaScript standards to parse the source as
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.StrictMode">
            <summary>
            Gets or sets a boolean value indicating whether or not to force
            the input code into strict mode (can still specify strict-mode in
            the sources if this value is false)
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.JsMinifierSettings.StripDebugStatements">
            <summary>
            Strip debug statements (true).
            Leave debug statements (false).
            </summary>
        </member>
        <member name="T:BundleTransformer.NUglify.Configuration.MinifierSettingsBase">
            <summary>
            Configuration settings of minifier
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.MinifierSettingsBase.AllowEmbeddedAspNetBlocks">
            <summary>
            Gets or sets whether embedded ASP.NET blocks (<code>&lt;% %&gt;</code>)
            should be recognized and output as is
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.MinifierSettingsBase.BlocksStartOnSameLine">
            <summary>
            Gets or sets a value indicating whether the opening curly brace for blocks is
            on its own line (<code>NewLine</code>) or on the same line as
            the preceding code (<code>SameLine</code>)
            or taking a hint from the source code position (<code>UseSource</code>).
            Only relevant when OutputMode is set to <code>MultipleLines</code>.
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.MinifierSettingsBase.IgnoreAllErrors">
            <summary>
            Gets or sets a flag for whether to ignore all errors found in the input code
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.MinifierSettingsBase.IgnoreErrorList">
            <summary>
            Gets or sets a string representation of the list of errors to ignore (comma-separated)
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.MinifierSettingsBase.IndentSize">
            <summary>
            Gets or sets a number of spaces or tabs per indent level when in
            <code>MultipleLines</code> output mode
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.MinifierSettingsBase.IndentType">
            <summary>
            Gets or sets a indent type when in <code>MultipleLines</code> output mode
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.MinifierSettingsBase.LineBreakThreshold">
            <summary>
            Gets or sets a column position at which the line
            will be broken at the next available opportunity
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.MinifierSettingsBase.OutputMode">
            <summary>
            Gets or sets a output mode:
            <code>SingleLine</code> - output all code on a single line;
            <code>MultipleLines</code> - break the output into multiple lines to be more human-readable
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.MinifierSettingsBase.PreprocessorDefineList">
            <summary>
            Gets or sets a string representation of the list
            of names defined for the preprocessor (comma-separated)
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.MinifierSettingsBase.TermSemicolons">
            <summary>
            Gets or sets a flag for whether to add a semicolon
            at the end of the parsed code
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.MinifierSettingsBase.Severity">
            <summary>
            Gets or sets a severity level of errors:
            	0 - syntax error;
            	1 - the programmer probably did not intend to do this;
            	2 - this can lead to problems in the future;
            	3 - this can lead to performance problems;
            	4 - this is just not right
            </summary>
        </member>
        <member name="T:BundleTransformer.NUglify.Configuration.NUglifySettings">
            <summary>
            Common configuration settings of NUglify Minifier
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.NUglifySettings.CssMinifier">
            <summary>
            Gets a configuration settings of NUglify CSS minifier
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Configuration.NUglifySettings.JsMinifier">
            <summary>
            Gets a configuration settings of NUglify JS minifier
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.CssColor.Strict">
            <summary>
            Convert strict names to hex values if shorter; hex values to strict names if shorter. Leave all other
            color names or hex values as-specified.
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.CssColor.Hex">
            <summary>
            Always use hex values; do not convert any hex values to color names
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.CssColor.Major">
            <summary>
            Convert known hex values to major-browser color names if shorter; and known major-browser color
            names to hex if shorter
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.CssColor.NoSwap">
            <summary>
            Don't swap names for hex or hex for names, whether or not one is shorter
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.CssComment.Important">
            <summary>
            Remove all comments except those marked as important (<code>//!</code> or <code>/*!</code>)
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.CssComment.None">
            <summary>
            Remove all source comments from the output
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.CssComment.All">
            <summary>
            Keep all source comments in the output
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.CssComment.Hacks">
            <summary>
            Remove all source comments except those for approved comment-based hacks
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.EvalTreatment.Ignore">
            <summary>
            Ignore all eval statements. This assumes that code that is eval'd will not attempt
            to access any local variables or functions, as those variables and function may be renamed.
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.EvalTreatment.MakeImmediateSafe">
            <summary>
            Assume any code that is eval'd will attempt to access local variables and functions declared
            in the same scope as the eval statement. This will turn off local variable and function renaming
            in any scope that contains an eval statement.
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.EvalTreatment.MakeAllSafe">
            <summary>
            Assume that any local variable or function in any accessible scope chain may be referenced by
            code that is eval'd. This will turn off local variable and function renaming for all scopes that
            contain an eval statement, and all their parent scopes up the chain to the global scope.
            </summary>
        </member>
        <member name="T:BundleTransformer.NUglify.IndentType">
            <summary>
            Indent types
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.LocalRenaming.KeepAll">
            <summary>
            Keep all names; don't rename anything
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.LocalRenaming.KeepLocalizationVars">
            <summary>
            Rename all local variables and functions that do not begin with "L_"
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.LocalRenaming.CrunchAll">
            <summary>
            Rename all local variables and functions
            </summary>
        </member>
        <member name="T:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier">
            <summary>
            Minifier, which produces minifiction of CSS code
            by using NUglify Minifier
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.MINIFIER_NAME">
            <summary>
            Name of minifier
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.CODE_TYPE">
            <summary>
            Name of code type
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier._cssParserConfiguration">
            <summary>
            Configuration settings of CSS parser
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.AllowEmbeddedAspNetBlocks">
            <summary>
            Gets or sets whether embedded ASP.NET blocks (<code>&lt;% %gt;</code>)
            should be recognized and output as is
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.BlocksStartOnSameLine">
            <summary>
            Gets or sets a value indicating whether the opening curly brace for blocks is
            on its own line (<code>NewLine</code>) or on the same line as
            the preceding code (<code>SameLine</code>)
            or taking a hint from the source code position (<code>UseSource</code>).
            Only relevant when OutputMode is set to <code>MultipleLines</code>.
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.IgnoreAllErrors">
            <summary>
            Gets or sets a flag for whether to ignore all errors found in the input code
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.IgnoreErrorList">
            <summary>
            Gets or sets a string representation of the list of
            debug lookups (comma-separated)
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.IndentSize">
            <summary>
            Gets or sets number of spaces or tabs per indent level when in
            <code>MultipleLines</code> output mode
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.IndentType">
            <summary>
            Gets or sets a indent type when in <code>MultipleLines</code> output mode
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.LineBreakThreshold">
            <summary>
            Gets or sets a column position at which the line
            will be broken at the next available opportunity
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.OutputMode">
            <summary>
            Gets or sets a output mode:
            <code>SingleLine</code> - output all code on a single line;
            <code>MultipleLines</code> - break the output into multiple lines to be more human-readable
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.PreprocessorDefineList">
            <summary>
            Gets or sets string representation of the list
            of names defined for the preprocessor (comma-separated)
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.TermSemicolons">
            <summary>
            Gets or sets a flag for whether to add a semicolon
            at the end of the parsed code
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.ColorNames">
            <summary>
            Gets or sets a <see cref="T:BundleTransformer.NUglify.CssColor"/> setting
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.CommentMode">
            <summary>
            Gets or sets a <see cref="T:BundleTransformer.NUglify.CssComment"/> setting
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.DecodeEscapes">
            <summary>
            Gets or sets a value indicating whether unicode escape strings (e.g. <code>\ff0e</code>)
            would be replaced by it's actual character or not
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.FixIE8Fonts">
            <summary>
            Gets or sets a value indicating whether IE8 .EOT fonts should get a question-mark
            appended to the URL (if not there already) to prevent the browser from generating
            invalid HTTP requests to the server
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.MinifyExpressions">
            <summary>
            Gets or sets a value indicating whether to minify the
            JS within expression functions
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.RemoveEmptyBlocks">
            <summary>
            Gets or sets a value indicating whether empty blocks removes
            the corresponding rule or directive
            </summary>
        </member>
        <member name="M:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.#ctor">
            <summary>
            Constructs a instance of NUglify CSS minifier
            </summary>
        </member>
        <member name="M:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.#ctor(BundleTransformer.NUglify.Configuration.NUglifySettings)">
            <summary>
            Constructs a instance of NUglify CSS minifier
            </summary>
            <param name="nuglifyConfig">Configuration settings of NUglify Minifier</param>
        </member>
        <member name="M:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.Minify(BundleTransformer.Core.Assets.IAsset)">
            <summary>
            Produces a code minifiction of CSS asset by using NUglify Minifier
            </summary>
            <param name="asset">CSS asset</param>
            <returns>CSS asset with minified text content</returns>
        </member>
        <member name="M:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.Minify(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Produces a code minifiction of CSS assets by using NUglify Minifier
            </summary>
            <param name="assets">Set of CSS assets</param>
            <returns>Set of CSS assets with minified text content</returns>
        </member>
        <member name="M:BundleTransformer.NUglify.Minifiers.NUglifyCssMinifier.ParserErrorHandler(System.Object,NUglify.ContextErrorEventArgs)">
            <summary>
            CSS parser error handler
            </summary>
            <param name="source">The source of the event</param>
            <param name="args">A NUglify.ContextErrorEventArgs
            that contains the event data</param>
        </member>
        <member name="T:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier">
            <summary>
            Minifier, which produces minifiction of JS code
            by using NUglify Minifier
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.MINIFIER_NAME">
            <summary>
            Name of minifier
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.CODE_TYPE">
            <summary>
            Name of code type
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier._jsParserConfiguration">
            <summary>
            Configuration settings of JS parser
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.AllowEmbeddedAspNetBlocks">
            <summary>
            Gets or sets whether embedded ASP.NET blocks (<code>&lt;% %&gt;</code>)
            should be recognized and output as is
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.BlocksStartOnSameLine">
            <summary>
            Gets or sets a value indicating whether the opening curly brace for blocks is
            on its own line (<code>NewLine</code>) or on the same line as
            the preceding code (<code>SameLine</code>)
            or taking a hint from the source code position (<code>UseSource</code>).
            Only relevant when OutputMode is set to <code>MultipleLines</code>.
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.IgnoreAllErrors">
            <summary>
            Gets or sets a flag for whether to ignore all errors found in the input code
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.IgnoreErrorList">
            <summary>
            Gets or sets a string representation of the list of
            debug lookups (comma-separated)
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.IndentSize">
            <summary>
            Gets or sets number of spaces or tabs per indent level when in
            <code>MultipleLines</code> output mode
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.IndentType">
            <summary>
            Gets or sets a indent type when in <code>MultipleLines</code> output mode
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.LineBreakThreshold">
            <summary>
            Gets or sets a column position at which the line
            will be broken at the next available opportunity
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.OutputMode">
            <summary>
            Gets or sets a output mode:
            <code>SingleLine</code> - output all code on a single line;
            <code>MultipleLines</code> - break the output into multiple lines to be more human-readable
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.PreprocessorDefineList">
            <summary>
            Gets or sets string representation of the list
            of names defined for the preprocessor (comma-separated)
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.TermSemicolons">
            <summary>
            Gets or sets a flag for whether to add a semicolon
            at the end of the parsed code
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.AlwaysEscapeNonAscii">
            <summary>
            Gets or sets a flag indicating whether to always escape non-ASCII characters as <code>\uXXXX</code>
            or to let the output encoding object handle that via the <code>JsEncoderFallback</code> object for the
            specified output encoding format
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.AmdSupport">
            <summary>
            Gets or sets a flag indicating whether to perform extra tasks on AMD-style defines
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.CollapseToLiteral">
            <summary>
            Gets or sets a flag for whether to collapse <code>new Array()</code>
            to <code>[]</code> and <code>new Object()</code> to <code>{}</code>
            (true) or leave as-is (false)
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.ConstStatementsMozilla">
            <summary>
            Gets or sets a boolean value indicating whether to use old-style
            const statements (just var-statements that define unchangeable fields)
            or new EcmaScript 6 lexical declarations
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.DebugLookupList">
            <summary>
            Gets or sets a string representation of the list of debug
            lookups (comma-separated)
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.ErrorIfNotInlineSafe">
            <summary>
            Gets or sets a flag for whether to throw an error
            if a source string is not safe for inclusion in an
            HTML inline script block
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.EvalLiteralExpressions">
            <summary>
            Gets or sets a flag for whether to evaluate expressions containing
            only literal bool, string, numeric, or null values (true).
            Leave literal expressions alone and do not evaluate them (false).
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.EvalTreatment">
            <summary>
            EvalTreatment setting
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.IgnoreConditionalCompilation">
            <summary>
            Gets or sets a flag for whether or not to ignore conditional-compilation
            comment syntax (true) or to try to retain the comments in the output (false)
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.IgnorePreprocessorDefines">
            <summary>
            Gets or sets a boolean value indicating whether or not to ignore preprocessor
            defines comment syntax (true) or to evaluate them (false)
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.InlineSafeStrings">
            <summary>
            Gets or sets a flag for whether to break up string literals containing
            <code>&lt;/script&gt;</code> so inline code won't break (true).
            Leave string literals as-is (false).
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.KnownGlobalNamesList">
            <summary>
            Gets or sets the known global names list as a single comma-separated string
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.LocalRenaming">
            <summary>
            Gets or sets a value indicating whether to how to rename local variables and functions:
            <code>KeepAll</code> - do not rename local variables and functions;
            <code>CrunchAll</code> - rename all local variables and functions to shorter names;
            <code>KeepLocalizationVars</code> - rename all local variables and functions that do NOT start with L_
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.MacSafariQuirks">
            <summary>
            Gets or sets a value indicating whether to add characters to the output
            to make sure Mac Safari bugs are not generated (true).
            Disregard potential Mac Safari bugs (false).
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.ManualRenamesProperties">
            <summary>
            Gets or sets a boolean value indicating whether object property
            names with the specified "from" names will get renamed to
            the corresponding "to" names (true) when using
            the manual-rename feature, or left alone (false)
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.NoAutoRenameList">
            <summary>
            Get or sets the no-automatic-renaming list as a single string of
            comma-separated identifiers
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.PreserveFunctionNames">
            <summary>
            Gets or sets a value indicating whether all function names
            must be preserved and remain as-named
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.PreserveImportantComments">
            <summary>
            Gets or sets a value indicating whether to preserve important
            comments in the output
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.QuoteObjectLiteralProperties">
            <summary>
            Gets or sets a value indicating whether to always quote object literal property names
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.RemoveFunctionExpressionNames">
            <summary>
            Gets or sets a value indicating whether or not to remove
            unreferenced function expression names
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.RemoveUnneededCode">
            <summary>
            Remove unneeded code, like uncalled local functions (true).
            Keep all code (false).
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.RenamePairs">
            <summary>
            Gets or sets a string representation of all the indentifier
            replacements as a comma-separated list of "source=target" identifiers.
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.ReorderScopeDeclarations">
            <summary>
            Gets or sets a value indicating whether or not to reorder function and variable
            declarations within scopes (true), or to leave the order as specified in
            the original source
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.ScriptVersion">
            <summary>
            Gets or sets an enumeration that gives the parser a hint as to which version
            of EcmaScript standards to parse the source as
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.StrictMode">
            <summary>
            Gets or sets a boolean value indicating whether or not to force
            the input code into strict mode (can still specify strict-mode in
            the sources if this value is false)
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.StripDebugStatements">
            <summary>
            Strip debug statements (true).
            Leave debug statements (false).
            </summary>
        </member>
        <member name="M:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.#ctor">
            <summary>
            Constructs a instance of NUglify JS minifier
            </summary>
        </member>
        <member name="M:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.#ctor(BundleTransformer.NUglify.Configuration.NUglifySettings)">
            <summary>
            Constructs a instance of NUglify JS minifier
            </summary>
            <param name="nuglifyConfig">Configuration settings of NUglify Minifier</param>
        </member>
        <member name="M:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.Minify(BundleTransformer.Core.Assets.IAsset)">
            <summary>
            Produces a code minifiction of JS asset by using NUglify Minifier
            </summary>
            <param name="asset">JS asset</param>
            <returns>JS asset with minified text content</returns>
        </member>
        <member name="M:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.Minify(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Produces a code minifiction of JS assets by using NUglify Minifier
            </summary>
            <param name="assets">Set of JS assets</param>
            <returns>Set of JS assets with minified text content</returns>
        </member>
        <member name="M:BundleTransformer.NUglify.Minifiers.NUglifyJsMinifier.ParserErrorHandler(System.Object,NUglify.ContextErrorEventArgs)">
            <summary>
            JS parser error handler
            </summary>
            <param name="source">The source of the event</param>
            <param name="args">A NUglify.ContextErrorEventArgs that
            contains the event data</param>
        </member>
        <member name="T:BundleTransformer.NUglify.Minifiers.NUglifyMinifierBase">
            <summary>
            Base class of minifier, which produces minifiction of code
            by using NUglify Minifier
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyMinifierBase.AllowEmbeddedAspNetBlocks">
            <summary>
            Gets or sets whether embedded ASP.NET blocks (<code>&lt;% %&gt;</code>)
            should be recognized and output as is
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyMinifierBase.BlocksStartOnSameLine">
            <summary>
            Gets or sets a value indicating whether the opening curly brace for blocks is
            on its own line (<code>NewLine</code>) or on the same line as
            the preceding code (<code>SameLine</code>)
            or taking a hint from the source code position (UseSource).
            Only relevant when OutputMode is set to MultipleLines.
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyMinifierBase.IgnoreAllErrors">
            <summary>
            Gets or sets a flag for whether to ignore all errors found in the input code
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyMinifierBase.IgnoreErrorList">
            <summary>
            Gets or sets a string representation of the list of errors to ignore (comma-separated)
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyMinifierBase.IndentSize">
            <summary>
            Gets or sets a number of spaces or tabs per indent level when in
            <code>MultipleLines</code> output mode
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyMinifierBase.IndentType">
            <summary>
            Gets or sets a indent type when in <code>MultipleLines</code> output mode
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyMinifierBase.LineBreakThreshold">
            <summary>
            Gets or sets the column position at which the line
            will be broken at the next available opportunity
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyMinifierBase.OutputMode">
            <summary>
            Gets or sets a output mode:
            <code>SingleLine</code> - output all code on a single line;
            <code>MultipleLines</code> - break the output into multiple lines to be more human-readable
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyMinifierBase.PreprocessorDefineList">
            <summary>
            Gets or sets a string representation of the list
            of names defined for the preprocessor (comma-separated)
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyMinifierBase.TermSemicolons">
            <summary>
            Gets or sets a flag for whether to add a semicolon
            at the end of the parsed code
            </summary>
        </member>
        <member name="P:BundleTransformer.NUglify.Minifiers.NUglifyMinifierBase.Severity">
            <summary>
            Gets or sets a severity level of errors
            	0 - syntax error;
            	1 - the programmer probably did not intend to do this;
            	2 - this can lead to problems in the future;
            	3 - this can lead to performance problems;
            	4 - this is just not right
            </summary>
        </member>
        <member name="M:BundleTransformer.NUglify.Minifiers.NUglifyMinifierBase.Minify(BundleTransformer.Core.Assets.IAsset)">
            <summary>
            Produces a code minifiction of asset
            </summary>
            <param name="asset">Asset</param>
            <returns>Asset with minified text content</returns>
        </member>
        <member name="M:BundleTransformer.NUglify.Minifiers.NUglifyMinifierBase.Minify(System.Collections.Generic.IList{BundleTransformer.Core.Assets.IAsset})">
            <summary>
            Produces a code minifiction of assets
            </summary>
            <param name="assets">Set of assets</param>
            <returns>Set of assets with minified text content</returns>
        </member>
        <member name="M:BundleTransformer.NUglify.Minifiers.NUglifyMinifierBase.FormatContextError(NUglify.UglifyError)">
            <summary>
            Generates a detailed error message based on object UglifyError
            </summary>
            <param name="error">Object UglifyError</param>
            <returns>Detailed error message</returns>
        </member>
        <member name="M:BundleTransformer.NUglify.Minifiers.NUglifyMinifierBase.MapCommonSettings(BundleTransformer.NUglify.Minifiers.NUglifyMinifierBase,BundleTransformer.NUglify.Configuration.MinifierSettingsBase)">
            <summary>
            Maps a common settings
            </summary>
            <param name="minifier">Minifier</param>
            <param name="commonMinifierSettings">Common configuration settings of NUglify Minifier</param>
        </member>
        <member name="T:BundleTransformer.NUglify.NUglifyParsingException">
            <summary>
            The exception that is thrown when a parsing of asset code by NUglify Minifier is failed
            </summary>
        </member>
        <member name="M:BundleTransformer.NUglify.NUglifyParsingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the BundleTransformer.NUglify.NUglifyParsingException class
            with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:BundleTransformer.NUglify.NUglifyParsingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the BundleTransformer.NUglify.NUglifyParsingException class
            with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception</param>
        </member>
        <member name="T:BundleTransformer.NUglify.OutputMode">
            <summary>
            Output mode setting
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.OutputMode.SingleLine">
            <summary>
            Output the minified code on a single line for maximum minification.
            LineBreakThreshold may still break the single line into multiple lines
            at a syntactically correct point after the given line length is reached.
            Not easily human-readable.
            </summary>
        </member>
        <member name="F:BundleTransformer.NUglify.OutputMode.MultipleLines">
            <summary>
            Output the minified code on multiple lines to increase readability
            </summary>
        </member>
    </members>
</doc>
